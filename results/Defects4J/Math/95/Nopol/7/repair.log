cd /tmp/Nopol_Defects4J_Math_95;
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 5 \
	--source src/java/ \
	--classpath "target/classes/:target/test-classes/:/tmp/Nopol_Defects4J_Math_95/target/classes/:/tmp/Nopol_Defects4J_Math_95/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
22:05:41.568 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/java]
22:05:41.572 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Math_95/target/classes/, file:/tmp/Nopol_Defects4J_Math_95/target/test-classes/, file:/tmp/Nopol_Defects4J_Math_95/target/classes/, file:/tmp/Nopol_Defects4J_Math_95/target/test-classes/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
22:05:41.572 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
22:05:41.573 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.BisectionSolverTest, org.apache.commons.math.analysis.BisectionSolverTest, org.apache.commons.math.analysis.BrentSolverTest, org.apache.commons.math.analysis.BrentSolverTest, org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.LaguerreSolverTest, org.apache.commons.math.analysis.LaguerreSolverTest, org.apache.commons.math.analysis.MullerSolverTest, org.apache.commons.math.analysis.MullerSolverTest, org.apache.commons.math.analysis.NevilleInterpolatorTest, org.apache.commons.math.analysis.NevilleInterpolatorTest, org.apache.commons.math.analysis.NewtonSolverTest, org.apache.commons.math.analysis.NewtonSolverTest, org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.PolynomialFunctionTest, org.apache.commons.math.analysis.PolynomialFunctionTest, org.apache.commons.math.analysis.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.RiddersSolverTest, org.apache.commons.math.analysis.RiddersSolverTest, org.apache.commons.math.analysis.RombergIntegratorTest, org.apache.commons.math.analysis.RombergIntegratorTest, org.apache.commons.math.analysis.SimpsonIntegratorTest, org.apache.commons.math.analysis.SimpsonIntegratorTest, org.apache.commons.math.analysis.SplineInterpolatorTest, org.apache.commons.math.analysis.SplineInterpolatorTest, org.apache.commons.math.analysis.TrapezoidIntegratorTest, org.apache.commons.math.analysis.TrapezoidIntegratorTest, org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorImplTest, org.apache.commons.math.linear.RealVectorImplTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.StepInterpolatorAbstractTest, org.apache.commons.math.ode.nonstiff.StepInterpolatorAbstractTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest]
22:05:41.575 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.BisectionSolverTest, org.apache.commons.math.analysis.BisectionSolverTest, org.apache.commons.math.analysis.BrentSolverTest, org.apache.commons.math.analysis.BrentSolverTest, org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.LaguerreSolverTest, org.apache.commons.math.analysis.LaguerreSolverTest, org.apache.commons.math.analysis.MullerSolverTest, org.apache.commons.math.analysis.MullerSolverTest, org.apache.commons.math.analysis.NevilleInterpolatorTest, org.apache.commons.math.analysis.NevilleInterpolatorTest, org.apache.commons.math.analysis.NewtonSolverTest, org.apache.commons.math.analysis.NewtonSolverTest, org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.PolynomialFunctionTest, org.apache.commons.math.analysis.PolynomialFunctionTest, org.apache.commons.math.analysis.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.RiddersSolverTest, org.apache.commons.math.analysis.RiddersSolverTest, org.apache.commons.math.analysis.RombergIntegratorTest, org.apache.commons.math.analysis.RombergIntegratorTest, org.apache.commons.math.analysis.SimpsonIntegratorTest, org.apache.commons.math.analysis.SimpsonIntegratorTest, org.apache.commons.math.analysis.SplineInterpolatorTest, org.apache.commons.math.analysis.SplineInterpolatorTest, org.apache.commons.math.analysis.TrapezoidIntegratorTest, org.apache.commons.math.analysis.TrapezoidIntegratorTest, org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorImplTest, org.apache.commons.math.linear.RealVectorImplTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.StepInterpolatorAbstractTest, org.apache.commons.math.ode.nonstiff.StepInterpolatorAbstractTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=5, outputFolder=., json=true}
22:05:41.576 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 24
22:05:41.582 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 435 MB
22:05:41.583 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
22:05:41.583 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 483 MB
22:05:41.583 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
22:05:41.584 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
22:05:41.584 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
22:05:55.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
22:05:55.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:272 which is executed by 13 tests
-1378958115
22:05:55.606 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:05:58.725 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3076 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:05:58.726 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:05:58.726 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
22:05:58.726 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:269 which is executed by 13 tests
-1378958115
22:05:58.819 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
22:05:58.819 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:258 which is executed by 13 tests
-1378958115
22:05:58.919 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
22:05:58.920 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:249 which is executed by 13 tests
-1378958115
22:05:59.064 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:02.100 [pool-6-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3026 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:06:02.101 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:02.101 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
22:06:02.101 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:246 which is executed by 13 tests
-1378958115
22:06:02.194 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:05.238 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3034 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:06:05.239 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:05.240 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
22:06:05.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:243 which is executed by 13 tests
-1378958115
22:06:05.334 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
22:06:05.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:255 which is executed by 12 tests
-1378958115
22:06:05.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:08.405 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2962 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 0

22:06:08.405 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:08.406 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
22:06:08.406 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:252 which is executed by 12 tests
-1378958115
22:06:08.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:11.467 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2946 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 0

22:06:11.468 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:11.468 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
22:06:11.468 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:251 which is executed by 12 tests
-1378958115
22:06:11.556 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:14.514 [pool-14-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2950 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 0

22:06:14.514 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:14.514 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
22:06:14.515 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:250 which is executed by 12 tests
-1378958115
22:06:14.601 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:17.565 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2955 ms)
<> Total tests run: 79
<> Ignored tests: 0
<> Failed tests: 0

22:06:17.565 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:17.566 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
22:06:17.566 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator:253 which is executed by 10 tests
-1378958115
22:06:17.655 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:19.913 [pool-18-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (2251 ms)
<> Total tests run: 65
<> Ignored tests: 0
<> Failed tests: 0

22:06:19.913 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:19.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
22:06:19.914 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator:243 which is executed by 27 tests
-1670384204
22:06:19.999 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
22:06:19.999 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:157 which is executed by 16 tests
1013737658
22:06:20.105 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
22:06:20.106 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:156 which is executed by 16 tests
1013737658
22:06:20.207 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:20.246 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (29 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

22:06:20.247 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:20.247 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
22:06:20.247 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:155 which is executed by 16 tests
1013737658
22:06:20.366 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:20.396 [pool-22-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (22 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

22:06:20.397 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:20.397 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
22:06:20.397 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:154 which is executed by 16 tests
1013737658
22:06:20.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
22:06:20.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:133 which is executed by 16 tests
1013737658
22:06:20.566 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
22:06:20.566 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:132 which is executed by 16 tests
1013737658
22:06:20.650 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
22:06:20.650 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:115 which is executed by 16 tests
1013737658
22:06:20.732 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
22:06:20.733 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:114 which is executed by 16 tests
1013737658
22:06:20.816 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
22:06:20.817 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:229 which is executed by 16 tests
-1129122774
22:06:20.896 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
22:06:20.896 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:228 which is executed by 16 tests
-1129122774
22:06:20.975 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:20.998 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (16 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

22:06:20.998 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:20.998 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
22:06:20.998 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:224 which is executed by 16 tests
-1129122774
22:06:21.078 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:21.100 [pool-26-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (16 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

22:06:21.100 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:21.100 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:21.122 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

22:06:21.122 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:21.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
22:06:21.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:383 which is executed by 7 tests
1013737658
22:06:21.206 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:21.233 [pool-30-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:21.233 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:21.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
22:06:21.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:279 which is executed by 7 tests
1013737658
22:06:21.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:21.351 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:21.352 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:21.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
22:06:21.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:278 which is executed by 7 tests
1013737658
22:06:21.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
22:06:21.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:277 which is executed by 7 tests
1013737658
22:06:21.515 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
22:06:21.516 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:387 which is executed by 8 tests
1013737658
22:06:21.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
22:06:21.599 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:382 which is executed by 8 tests
1013737658
22:06:21.694 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:21.707 [pool-34-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:21.708 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:21.708 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:21.720 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:21.721 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:21.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
22:06:21.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:380 which is executed by 8 tests
1013737658
22:06:21.803 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:21.816 [pool-38-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:21.817 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:21.817 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
22:06:21.817 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:379 which is executed by 8 tests
1013737658
22:06:21.898 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
22:06:21.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:378 which is executed by 8 tests
1013737658
22:06:21.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:21.992 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:21.992 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:21.992 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
22:06:21.993 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:375 which is executed by 8 tests
1013737658
22:06:22.074 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:22.087 [pool-42-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:22.088 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:22.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:22.100 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:22.101 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:22.101 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
22:06:22.101 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:373 which is executed by 8 tests
1013737658
22:06:22.184 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
22:06:22.184 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:372 which is executed by 8 tests
1013737658
22:06:22.281 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
22:06:22.281 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:371 which is executed by 8 tests
1013737658
22:06:22.366 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
22:06:22.366 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:362 which is executed by 8 tests
1013737658
22:06:22.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
22:06:22.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:361 which is executed by 8 tests
1013737658
22:06:22.543 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:22.556 [pool-46-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:22.556 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:22.556 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
22:06:22.556 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:360 which is executed by 8 tests
1013737658
22:06:22.637 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:22.649 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:22.649 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:22.649 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
22:06:22.649 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:268 which is executed by 8 tests
1013737658
22:06:22.729 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:22.742 [pool-50-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:22.742 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:22.742 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:22.754 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:22.754 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:22.754 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
22:06:22.754 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:267 which is executed by 8 tests
1013737658
22:06:22.834 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
22:06:22.834 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:264 which is executed by 8 tests
1013737658
22:06:22.914 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:22.928 [pool-54-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

22:06:22.928 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:22.928 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
22:06:22.928 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:261 which is executed by 8 tests
1013737658
22:06:23.008 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
22:06:23.008 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:245 which is executed by 8 tests
1013737658
22:06:23.089 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
22:06:23.089 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:244 which is executed by 8 tests
1013737658
22:06:23.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
22:06:23.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:133 which is executed by 8 tests
-1129122774
22:06:23.246 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
22:06:23.246 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:356 which is executed by 55 tests
1048307728
22:06:23.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
22:06:23.334 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:355 which is executed by 55 tests
1048307728
22:06:23.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:26.469 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3025 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:06:26.469 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:26.469 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
22:06:26.469 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:342 which is executed by 55 tests
1048307728
22:06:26.551 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
22:06:26.551 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:341 which is executed by 55 tests
1048307728
22:06:26.633 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:29.647 [pool-58-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3007 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:06:29.647 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:29.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
22:06:29.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:161 which is executed by 55 tests
1048307728
22:06:29.747 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
22:06:29.747 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:160 which is executed by 55 tests
1048307728
22:06:29.827 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:32.848 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3014 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:06:32.848 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:32.848 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
22:06:32.848 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:233 which is executed by 9 tests
1013737658
22:06:32.941 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
22:06:32.941 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:301 which is executed by 66 tests
1694344315
22:06:33.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
22:06:33.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:300 which is executed by 66 tests
1694344315
22:06:33.122 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:36.149 [pool-62-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3020 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:06:36.149 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:36.150 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
22:06:36.150 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator:299 which is executed by 66 tests
1694344315
22:06:36.242 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:39.293 [pool-64-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (3045 ms)
<> Total tests run: 85
<> Ignored tests: 0
<> Failed tests: 0

22:06:39.293 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:39.294 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
22:06:39.294 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:225 which is executed by 7 tests
1013737658
22:06:39.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
22:06:39.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:309 which is executed by 2 tests
1013737658
22:06:39.455 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
22:06:39.455 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:214 which is executed by 2 tests
-1129122774
22:06:39.542 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
22:06:39.542 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:213 which is executed by 2 tests
-1129122774
22:06:39.636 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
22:06:39.636 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:212 which is executed by 2 tests
-1129122774
22:06:39.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
22:06:39.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:211 which is executed by 2 tests
-1129122774
22:06:39.788 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
22:06:39.788 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:301 which is executed by 3 tests
1013737658
22:06:40.014 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:40.023 [pool-66-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.024 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.024 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:40.032 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.032 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.032 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
22:06:40.032 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:300 which is executed by 3 tests
1013737658
22:06:40.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
22:06:40.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:297 which is executed by 3 tests
1013737658
22:06:40.197 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:40.206 [pool-70-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.206 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.206 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
22:06:40.206 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:286 which is executed by 3 tests
1013737658
22:06:40.285 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:40.294 [pool-72-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.294 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.294 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
22:06:40.294 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:293 which is executed by 3 tests
1013737658
22:06:40.374 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
22:06:40.374 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:292 which is executed by 3 tests
1013737658
22:06:40.453 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:40.461 [pool-74-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.462 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.462 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
22:06:40.462 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:291 which is executed by 3 tests
1013737658
22:06:40.543 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:40.551 [pool-76-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.551 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.551 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
22:06:40.551 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:205 which is executed by 3 tests
-1129122774
22:06:40.628 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:40.637 [pool-78-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.637 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.637 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:40.645 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.645 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.645 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
22:06:40.645 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:197 which is executed by 3 tests
-1129122774
22:06:40.740 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:40.748 [pool-82-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.749 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:40.756 [pool-84-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.757 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
22:06:40.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:196 which is executed by 3 tests
-1129122774
22:06:40.840 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
22:06:40.840 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:193 which is executed by 3 tests
-1129122774
22:06:40.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:40.925 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:40.925 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:40.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
22:06:40.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:182 which is executed by 3 tests
-1129122774
22:06:41.001 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:41.009 [pool-88-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:41.009 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:41.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
22:06:41.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:175 which is executed by 3 tests
-1129122774
22:06:41.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:41.094 [pool-90-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:41.094 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:41.094 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
22:06:41.094 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:174 which is executed by 3 tests
-1129122774
22:06:41.171 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
22:06:41.171 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:173 which is executed by 3 tests
-1129122774
22:06:41.247 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
22:06:41.248 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:166 which is executed by 3 tests
-1129122774
22:06:41.331 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:41.339 [pool-92-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:41.339 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:41.339 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:41.346 [pool-94-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:41.346 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:41.346 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
22:06:41.346 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:283 which is executed by 1 tests
1013737658
22:06:41.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
22:06:41.435 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:158 which is executed by 4 tests
-1129122774
22:06:41.512 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:41.520 [pool-96-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:41.520 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:41.520 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:41.527 [pool-98-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:41.527 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:41.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
22:06:41.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:157 which is executed by 4 tests
-1129122774
22:06:41.603 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
22:06:41.604 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:154 which is executed by 4 tests
-1129122774
22:06:41.681 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:41.688 [pool-100-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:41.689 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:41.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
22:06:41.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:145 which is executed by 5 tests
-1129122774
22:06:41.766 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:41.773 [pool-102-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (4 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:41.774 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:41.774 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:41.781 [pool-104-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:41.781 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:41.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
22:06:41.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:144 which is executed by 5 tests
-1129122774
22:06:41.857 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
22:06:41.858 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:141 which is executed by 5 tests
-1129122774
22:06:41.934 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:41.942 [pool-106-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:41.942 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:41.942 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
22:06:41.942 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:138 which is executed by 5 tests
-1129122774
22:06:42.019 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
22:06:42.019 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:134 which is executed by 5 tests
-1129122774
22:06:42.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
22:06:42.104 [pool-108-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:42.104 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:42.104 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
22:06:42.112 [pool-110-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

22:06:42.112 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
22:06:42.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
22:06:42.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:140 which is executed by 86 tests
22:06:42.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:140
22:06:42.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
22:06:42.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:124 which is executed by 86 tests
22:06:42.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:124
22:06:42.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
22:06:42.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:113 which is executed by 92 tests
22:06:42.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:113
22:06:42.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:112 which is executed by 92 tests
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:112
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:105 which is executed by 92 tests
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:105
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #93
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:104 which is executed by 92 tests
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:104
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #94
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:97 which is executed by 92 tests
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:97
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #95
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:96 which is executed by 92 tests
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:96
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #96
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:95 which is executed by 92 tests
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:95
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #97
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:94 which is executed by 92 tests
22:06:42.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:94
22:06:42.114 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #98
22:06:42.114 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:93 which is executed by 92 tests
22:06:42.114 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemAbstract:93
22:06:42.114 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #99
22:06:42.114 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:116 which is executed by 6 tests
-1129122774
22:06:42.190 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #100
22:06:42.190 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemFactory:46 which is executed by 7 tests
22:06:42.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblemFactory:46
22:06:42.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #101
22:06:42.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.ode.nonstiff.TestProblem1:70 which is executed by 8 tests
22:06:42.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.ode.nonstiff.TestProblem1:70
22:06:42.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #102
22:06:42.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:179 which is executed by 2 tests
-1263631007
22:06:42.267 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:42.282 [pool-112-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]
    at org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(UnivariateRealSolverImpl.java:296)
    at org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:129)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealSolverUtils.java:11)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:107)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:119)
22:06:42.963 [pool-113-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]]
java.lang.IllegalArgumentException: Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]    at org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(UnivariateRealSolverImpl.java:296)
    at org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:129)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealSolverUtils.java:11)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:107)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:119)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:51)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:42.965 [pool-114-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:51)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:42.966 [pool-111-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]]
22:06:42.966 [pool-111-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:42.966 [pool-111-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:179.
22:06:42.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #103
22:06:42.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:148 which is executed by 3 tests
-1399899349
22:06:43.043 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #104
22:06:43.043 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:147 which is executed by 3 tests
-1399899349
22:06:43.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:43.131 [pool-116-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:43.272 [pool-115-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FDistributionImpl.java:66: error: variable ret might not have been initialized
        return ret;
               ^
22:06:43.275 [pool-115-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.FDistribution {
    private static final long serialVersionUID = -8516354193418641566L;

    private double numeratorDegreesOfFreedom;

    private double denominatorDegreesOfFreedom;

    public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) {
        super();
        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);
        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);
    }

    public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
        double ret;
        if (x <= 0.0) {
            ret = 0.0;
        }else {
            double n = getNumeratorDegreesOfFreedom();
            double m = getDenominatorDegreesOfFreedom();
            ret = org.apache.commons.math.special.Beta.regularizedBeta(((n * x) / (m + (n * x))), (0.5 * n), (0.5 * m));
        }
        return ret;
    }

    public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
        if (p == 0) {
            return 0.0;
        }
        if (p == 1) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return super.inverseCumulativeProbability(p);
    }

    protected double getDomainLowerBound(double p) {
        return 0.0;
    }

    protected double getDomainUpperBound(double p) {
        return java.lang.Double.MAX_VALUE;
    }

    protected double getInitialDomain(double p) {
        double ret;
        double d = getDenominatorDegreesOfFreedom();
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(1).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("p",p);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.commons.math.distribution.FDistributionImpl.this.denominatorDegreesOfFreedom",org.apache.commons.math.distribution.FDistributionImpl.this.denominatorDegreesOfFreedom);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.apache.commons.math.distribution.FDistributionImpl.this.numeratorDegreesOfFreedom",org.apache.commons.math.distribution.FDistributionImpl.this.numeratorDegreesOfFreedom);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("d",d);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionEnds();
        }
        if (runtimeAngelicValue)
            ret = d / (d - 2.0);

        return ret;
    }

    public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
        if (degreesOfFreedom <= 0.0) {
            throw new java.lang.IllegalArgumentException("degrees of freedom must be positive.");
        }
        this.numeratorDegreesOfFreedom = degreesOfFreedom;
    }

    public double getNumeratorDegreesOfFreedom() {
        return numeratorDegreesOfFreedom;
    }

    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {
        if (degreesOfFreedom <= 0.0) {
            throw new java.lang.IllegalArgumentException("degrees of freedom must be positive.");
        }
        this.denominatorDegreesOfFreedom = degreesOfFreedom;
    }

    public double getDenominatorDegreesOfFreedom() {
        return denominatorDegreesOfFreedom;
    }
}
22:06:43.276 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:43.276 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #105
22:06:43.276 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:145 which is executed by 3 tests
-1399899349
22:06:43.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #106
22:06:43.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:132 which is executed by 3 tests
-1399899349
22:06:43.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #107
22:06:43.444 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:119 which is executed by 3 tests
-1399899349
22:06:43.518 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #108
22:06:43.518 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:106 which is executed by 4 tests
-1399899349
22:06:43.593 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #109
22:06:43.593 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:103 which is executed by 5 tests
-1399899349
22:06:43.668 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:43.681 [pool-118-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:43.813 [pool-119-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:43.815 [pool-120-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:43.816 [pool-117-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:43.816 [pool-117-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:43.816 [pool-117-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:103.
22:06:43.816 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:43.828 [pool-122-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:43.958 [pool-123-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError: expected:<0.975> but was:<Infinity>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)
22:06:43.959 [pool-124-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[expected:<0.975> but was:<Infinity>]
junit.framework.AssertionFailedError: expected:<0.975> but was:<Infinity>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)

22:06:43.960 [pool-121-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:43.960 [pool-121-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): expected:<0.975> but was:<Infinity>]
22:06:43.960 [pool-121-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:103.
22:06:43.960 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #110
22:06:43.960 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:100 which is executed by 5 tests
-1399899349
22:06:44.035 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:44.047 [pool-126-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:44.188 [pool-127-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:44.190 [pool-128-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:44.190 [pool-125-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:44.191 [pool-125-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:44.191 [pool-125-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:100.
22:06:44.191 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:44.203 [pool-130-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:44.334 [pool-131-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError: expected:<0.975> but was:<0.0>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)
22:06:44.335 [pool-132-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[expected:<0.975> but was:<0.0>]
junit.framework.AssertionFailedError: expected:<0.975> but was:<0.0>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)

22:06:44.336 [pool-129-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:44.336 [pool-129-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): expected:<0.975> but was:<0.0>]
22:06:44.336 [pool-129-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:100.
22:06:44.336 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #111
22:06:44.336 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:78 which is executed by 8 tests
-1399899349
22:06:44.411 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:44.424 [pool-134-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:44.536 [pool-133-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FDistributionImpl.java:42: error: variable ret might not have been initialized
        return ret;
               ^
22:06:44.538 [pool-133-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.FDistribution {
    private static final long serialVersionUID = -8516354193418641566L;

    private double numeratorDegreesOfFreedom;

    private double denominatorDegreesOfFreedom;

    public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) {
        super();
        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);
        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);
    }

    public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
        double ret;
        if (x <= 0.0) {
            ret = 0.0;
        }else {
            double n = getNumeratorDegreesOfFreedom();
            double m = getDenominatorDegreesOfFreedom();
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(6).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.math.distribution.FDistributionImpl.this.denominatorDegreesOfFreedom",org.apache.commons.math.distribution.FDistributionImpl.this.denominatorDegreesOfFreedom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("org.apache.commons.math.distribution.FDistributionImpl.this.numeratorDegreesOfFreedom",org.apache.commons.math.distribution.FDistributionImpl.this.numeratorDegreesOfFreedom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("m",m);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionEnds();
            }
            if (runtimeAngelicValue)
                ret = org.apache.commons.math.special.Beta.regularizedBeta(((n * x) / (m + (n * x))), (0.5 * n), (0.5 * m));

        }
        return ret;
    }

    public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
        if (p == 0) {
            return 0.0;
        }
        if (p == 1) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return super.inverseCumulativeProbability(p);
    }

    protected double getDomainLowerBound(double p) {
        return 0.0;
    }

    protected double getDomainUpperBound(double p) {
        return java.lang.Double.MAX_VALUE;
    }

    protected double getInitialDomain(double p) {
        double ret;
        double d = getDenominatorDegreesOfFreedom();
        ret = d / (d - 2.0);
        return ret;
    }

    public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
        if (degreesOfFreedom <= 0.0) {
            throw new java.lang.IllegalArgumentException("degrees of freedom must be positive.");
        }
        this.numeratorDegreesOfFreedom = degreesOfFreedom;
    }

    public double getNumeratorDegreesOfFreedom() {
        return numeratorDegreesOfFreedom;
    }

    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {
        if (degreesOfFreedom <= 0.0) {
            throw new java.lang.IllegalArgumentException("degrees of freedom must be positive.");
        }
        this.denominatorDegreesOfFreedom = degreesOfFreedom;
    }

    public double getDenominatorDegreesOfFreedom() {
        return denominatorDegreesOfFreedom;
    }
}
22:06:44.539 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:44.539 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #112
22:06:44.539 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:76 which is executed by 8 tests
-1399899349
22:06:44.612 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #113
22:06:44.613 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:75 which is executed by 8 tests
-1399899349
22:06:44.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #114
22:06:44.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:192 which is executed by 9 tests
-1399899349
22:06:44.761 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #115
22:06:44.761 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:170 which is executed by 9 tests
-1399899349
22:06:44.836 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #116
22:06:44.836 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:82 which is executed by 9 tests
-1399899349
22:06:44.910 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #117
22:06:44.910 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:72 which is executed by 9 tests
-1399899349
22:06:44.985 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:44.997 [pool-136-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:45.122 [pool-135-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FDistributionImpl.java:40: error: variable ret might not have been initialized
        return ret;
               ^
22:06:45.125 [pool-135-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.FDistribution {
    private static final long serialVersionUID = -8516354193418641566L;

    private double numeratorDegreesOfFreedom;

    private double denominatorDegreesOfFreedom;

    public FDistributionImpl(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) {
        super();
        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);
        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);
    }

    public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(7).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.commons.math.distribution.FDistributionImpl.this.denominatorDegreesOfFreedom",org.apache.commons.math.distribution.FDistributionImpl.this.denominatorDegreesOfFreedom);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("org.apache.commons.math.distribution.FDistributionImpl.this.numeratorDegreesOfFreedom",org.apache.commons.math.distribution.FDistributionImpl.this.numeratorDegreesOfFreedom);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("x <= 0.0",x <= 0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(7).collectionEnds();
        }
        if (runtimeAngelicValue) if (x <= 0.0) {
            ret = 0.0;
        }else {
            double n = getNumeratorDegreesOfFreedom();
            double m = getDenominatorDegreesOfFreedom();
            ret = org.apache.commons.math.special.Beta.regularizedBeta(((n * x) / (m + (n * x))), (0.5 * n), (0.5 * m));
        }
        return ret;
    }

    public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
        if (p == 0) {
            return 0.0;
        }
        if (p == 1) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return super.inverseCumulativeProbability(p);
    }

    protected double getDomainLowerBound(double p) {
        return 0.0;
    }

    protected double getDomainUpperBound(double p) {
        return java.lang.Double.MAX_VALUE;
    }

    protected double getInitialDomain(double p) {
        double ret;
        double d = getDenominatorDegreesOfFreedom();
        ret = d / (d - 2.0);
        return ret;
    }

    public void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
        if (degreesOfFreedom <= 0.0) {
            throw new java.lang.IllegalArgumentException("degrees of freedom must be positive.");
        }
        this.numeratorDegreesOfFreedom = degreesOfFreedom;
    }

    public double getNumeratorDegreesOfFreedom() {
        return numeratorDegreesOfFreedom;
    }

    public void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {
        if (degreesOfFreedom <= 0.0) {
            throw new java.lang.IllegalArgumentException("degrees of freedom must be positive.");
        }
        this.denominatorDegreesOfFreedom = degreesOfFreedom;
    }

    public double getDenominatorDegreesOfFreedom() {
        return denominatorDegreesOfFreedom;
    }
}
22:06:45.125 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:45.125 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:45.137 [pool-138-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:45.269 [pool-139-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:50)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError: expected:<0.975> but was:<0.0>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)
22:06:45.270 [pool-140-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[expected:<0.975> but was:<0.0>]
junit.framework.AssertionFailedError: expected:<0.975> but was:<0.0>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)

22:06:45.271 [pool-137-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:45.271 [pool-137-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): expected:<0.975> but was:<0.0>]
22:06:45.271 [pool-137-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:72.
22:06:45.271 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #118
22:06:45.271 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:185 which is executed by 12 tests
-1399899349
22:06:45.359 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #119
22:06:45.359 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:184 which is executed by 12 tests
-1399899349
22:06:45.450 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:45.463 [pool-142-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError: expected:<0.975> but was:<1.0>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)
22:06:45.601 [pool-143-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[expected:<0.975> but was:<1.0>]
junit.framework.AssertionFailedError: expected:<0.975> but was:<1.0>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:45.604 [pool-144-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:45.604 [pool-141-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): expected:<0.975> but was:<1.0>]
22:06:45.604 [pool-141-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:45.604 [pool-141-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:184.
22:06:45.604 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #120
22:06:45.605 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:180 which is executed by 12 tests
-1399899349
22:06:45.700 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:45.712 [pool-146-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:45.826 [pool-147-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:45.827 [pool-148-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:45.828 [pool-145-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:45.828 [pool-145-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:45.828 [pool-145-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:180.
22:06:45.828 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:45.839 [pool-150-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:45.952 [pool-151-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: degrees of freedom must be positive.
    at org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(FDistributionImpl.java:81)
    at org.apache.commons.math.distribution.FDistributionImpl.<init>(FDistributionImpl.java:12)
    at org.apache.commons.math.distribution.FDistributionTest.makeDistribution(FDistributionTest.java:41)
    at org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp(ContinuousDistributionAbstractTest.java:117)
    at org.apache.commons.math.distribution.FDistributionTest.setUp(FDistributionTest.java:60)
    at junit.framework.TestCase.runBare(TestCase.java:139)
22:06:45.953 [pool-152-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[degrees of freedom must be positive.]
java.lang.IllegalArgumentException: degrees of freedom must be positive.    at org.apache.commons.math.distribution.FDistributionImpl.setDenominatorDegreesOfFreedom(FDistributionImpl.java:81)
    at org.apache.commons.math.distribution.FDistributionImpl.<init>(FDistributionImpl.java:12)
    at org.apache.commons.math.distribution.FDistributionTest.makeDistribution(FDistributionTest.java:41)
    at org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp(ContinuousDistributionAbstractTest.java:117)
    at org.apache.commons.math.distribution.FDistributionTest.setUp(FDistributionTest.java:60)
    at junit.framework.TestCase.runBare(TestCase.java:139)

22:06:45.954 [pool-149-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:45.954 [pool-149-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): degrees of freedom must be positive.]
22:06:45.954 [pool-149-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:180.
22:06:45.954 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #121
22:06:45.954 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:163 which is executed by 12 tests
-1399899349
22:06:46.029 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #122
22:06:46.029 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:162 which is executed by 12 tests
-1399899349
22:06:46.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:46.115 [pool-154-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:46.227 [pool-155-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:46.229 [pool-156-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:46.230 [pool-153-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:46.230 [pool-153-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:46.230 [pool-153-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:162.
22:06:46.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #123
22:06:46.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.FDistributionImpl:158 which is executed by 12 tests
-1399899349
22:06:46.306 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:46.318 [pool-158-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:46.434 [pool-159-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:46.436 [pool-160-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:46.436 [pool-157-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:46.436 [pool-157-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:46.437 [pool-157-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:158.
22:06:46.437 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:46.449 [pool-162-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:46.563 [pool-163-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:34)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: degrees of freedom must be positive.
    at org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(FDistributionImpl.java:70)
    at org.apache.commons.math.distribution.FDistributionImpl.<init>(FDistributionImpl.java:11)
    at org.apache.commons.math.distribution.FDistributionTest.makeDistribution(FDistributionTest.java:41)
    at org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp(ContinuousDistributionAbstractTest.java:117)
    at org.apache.commons.math.distribution.FDistributionTest.setUp(FDistributionTest.java:60)
    at junit.framework.TestCase.runBare(TestCase.java:139)
22:06:46.565 [pool-164-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[degrees of freedom must be positive.]
java.lang.IllegalArgumentException: degrees of freedom must be positive.    at org.apache.commons.math.distribution.FDistributionImpl.setNumeratorDegreesOfFreedom(FDistributionImpl.java:70)
    at org.apache.commons.math.distribution.FDistributionImpl.<init>(FDistributionImpl.java:11)
    at org.apache.commons.math.distribution.FDistributionTest.makeDistribution(FDistributionTest.java:41)
    at org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp(ContinuousDistributionAbstractTest.java:117)
    at org.apache.commons.math.distribution.FDistributionTest.setUp(FDistributionTest.java:60)
    at junit.framework.TestCase.runBare(TestCase.java:139)

22:06:46.565 [pool-161-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:46.565 [pool-161-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): degrees of freedom must be positive.]
22:06:46.565 [pool-161-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.FDistributionImpl:158.
22:06:46.566 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #124
22:06:46.566 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.AbstractContinuousDistribution:84 which is executed by 15 tests
-457909738
22:06:46.642 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:46.654 [pool-166-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:54)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
22:06:46.770 [pool-167-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:54)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:43)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:46.772 [pool-168-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:43)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:46.772 [pool-165-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): null]
22:06:46.773 [pool-165-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:46.773 [pool-165-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.AbstractContinuousDistribution:84.
22:06:46.773 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #125
22:06:46.773 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.AbstractContinuousDistribution:82 which is executed by 15 tests
-457909738
22:06:46.847 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #126
22:06:46.848 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.AbstractContinuousDistribution:81 which is executed by 15 tests
-457909738
22:06:46.921 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #127
22:06:46.922 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.AbstractContinuousDistribution:80 which is executed by 15 tests
-457909738
22:06:46.996 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #128
22:06:46.997 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.AbstractContinuousDistribution:67 which is executed by 15 tests
-457909738
22:06:47.071 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #129
22:06:47.072 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:178 which is executed by 18 tests
-1263631007
22:06:47.146 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.158 [pool-170-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]
    at org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(UnivariateRealSolverImpl.java:296)
    at org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:129)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealSolverUtils.java:11)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:107)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:119)
22:06:47.285 [pool-171-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]]
java.lang.IllegalArgumentException: Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]    at org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(UnivariateRealSolverImpl.java:296)
    at org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:129)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealSolverUtils.java:11)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:107)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:119)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:55)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.287 [pool-172-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:55)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:47.287 [pool-169-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]]
22:06:47.287 [pool-169-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:47.288 [pool-169-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:178.
22:06:47.288 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.299 [pool-174-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]
    at org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(UnivariateRealSolverImpl.java:296)
    at org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:129)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealSolverUtils.java:11)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:107)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:119)
22:06:47.427 [pool-175-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]]
java.lang.IllegalArgumentException: Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]    at org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(UnivariateRealSolverImpl.java:296)
    at org.apache.commons.math.analysis.BrentSolver.solve(BrentSolver.java:129)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.solve(UnivariateRealSolverUtils.java:11)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:107)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:119)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:55)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.429 [pool-176-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:55)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:47.430 [pool-173-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Endpoints do not specify an interval: [Infinity,1.7976931348623157E308]]
22:06:47.430 [pool-173-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:47.430 [pool-173-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:178.
22:06:47.430 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #130
22:06:47.430 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:174 which is executed by 18 tests
-1263631007
22:06:47.504 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.517 [pool-178-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.636 [pool-179-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.637 [pool-180-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:47.638 [pool-177-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:47.638 [pool-177-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:47.638 [pool-177-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:174.
22:06:47.638 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.649 [pool-182-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.778 [pool-183-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: bad value for maximumIterations: 2147483647
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:49)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.779 [pool-184-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[bad value for maximumIterations: 2147483647]
java.lang.IllegalArgumentException: bad value for maximumIterations: 2147483647    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:49)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:47.780 [pool-181-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:47.780 [pool-181-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): bad value for maximumIterations: 2147483647]
22:06:47.780 [pool-181-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:174.
22:06:47.780 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #131
22:06:47.780 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:171 which is executed by 18 tests
-1263631007
22:06:47.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.866 [pool-186-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.982 [pool-187-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.984 [pool-188-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:47.985 [pool-185-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:47.985 [pool-185-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:47.985 [pool-185-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:171.
22:06:47.985 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:47.996 [pool-190-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:48.109 [pool-191-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:52)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: function is null.
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:46)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:48.111 [pool-192-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[function is null.]
java.lang.IllegalArgumentException: function is null.    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:46)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:22)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:48.111 [pool-189-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:48.112 [pool-189-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): function is null.]
22:06:48.112 [pool-189-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:171.
22:06:48.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #132
22:06:48.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.analysis.UnivariateRealSolverUtils:128 which is executed by 18 tests
-1263631007
22:06:48.188 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #133
22:06:48.188 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.AbstractContinuousDistribution:61 which is executed by 20 tests
-457909738
22:06:48.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:48.275 [pool-194-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:43)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:48.380 [pool-195-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:43)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:43)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:48.382 [pool-196-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:43)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:48.382 [pool-193-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:48.383 [pool-193-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:48.383 [pool-193-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.AbstractContinuousDistribution:61.
22:06:48.383 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:48.394 [pool-198-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:43)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:48.500 [pool-199-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:43)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: p must be between 0.0 and 1.0, inclusive.
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:28)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
22:06:48.501 [pool-200-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[p must be between 0.0 and 1.0, inclusive.]
java.lang.IllegalArgumentException: p must be between 0.0 and 1.0, inclusive.    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:28)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

22:06:48.501 [pool-197-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:48.502 [pool-197-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): p must be between 0.0 and 1.0, inclusive.]
22:06:48.502 [pool-197-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.AbstractContinuousDistribution:61.
22:06:48.502 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #134
22:06:48.502 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta$1:142 which is executed by 44 tests
2066961
22:06:48.577 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:48.588 [pool-202-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:48.697 [pool-201-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:59: error: variable ret might not have been initialized
                        return ret;
                               ^
22:06:48.700 [pool-201-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta implements java.io.Serializable {
    private static final long serialVersionUID = -3833485397404128220L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    private static final long serialVersionUID = -7658917278956100597L;

                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(24).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                                fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(24).collectionEnds();
                            }
                            if (runtimeAngelicValue)
                                ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));

                        }else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((java.lang.Math.exp(((((a * (java.lang.Math.log(x))) + (b * (java.lang.Math.log((1.0 - x))))) - (java.lang.Math.log(a))) - (org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            ret = ((org.apache.commons.math.special.Gamma.logGamma(a)) + (org.apache.commons.math.special.Gamma.logGamma(b))) - (org.apache.commons.math.special.Gamma.logGamma((a + b)));
        }
        return ret;
    }
}
22:06:48.700 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:48.700 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #135
22:06:48.700 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta$1:141 which is executed by 44 tests
2066961
22:06:48.774 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:48.787 [pool-204-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:48.896 [pool-203-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:54: error: variable m might not have been initialized
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                                    ^
22:06:48.898 [pool-203-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta implements java.io.Serializable {
    private static final long serialVersionUID = -3833485397404128220L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    private static final long serialVersionUID = -7658917278956100597L;

                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(25).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                                fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectionEnds();
                            }
                            if (runtimeAngelicValue)
                                m = n / 2.0;

                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((java.lang.Math.exp(((((a * (java.lang.Math.log(x))) + (b * (java.lang.Math.log((1.0 - x))))) - (java.lang.Math.log(a))) - (org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            ret = ((org.apache.commons.math.special.Gamma.logGamma(a)) + (org.apache.commons.math.special.Gamma.logGamma(b))) - (org.apache.commons.math.special.Gamma.logGamma((a + b)));
        }
        return ret;
    }
}
22:06:48.899 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:48.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #136
22:06:48.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:311 which is executed by 45 tests
22:06:48.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:311
22:06:48.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #137
22:06:48.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:310 which is executed by 45 tests
22:06:48.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:310
22:06:48.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #138
22:06:48.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta:156 which is executed by 51 tests
2066961
22:06:48.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:48.987 [pool-206-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:49.100 [pool-205-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:74: error: variable ret might not have been initialized
        return ret;
               ^
22:06:49.103 [pool-205-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta implements java.io.Serializable {
    private static final long serialVersionUID = -3833485397404128220L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    private static final long serialVersionUID = -7658917278956100597L;

                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(26).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.apache.commons.math.special.Beta.DEFAULT_EPSILON",org.apache.commons.math.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("fraction",fraction);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionEnds();
                }
                if (runtimeAngelicValue)
                    ret = ((java.lang.Math.exp(((((a * (java.lang.Math.log(x))) + (b * (java.lang.Math.log((1.0 - x))))) - (java.lang.Math.log(a))) - (org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));

            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            ret = ((org.apache.commons.math.special.Gamma.logGamma(a)) + (org.apache.commons.math.special.Gamma.logGamma(b))) - (org.apache.commons.math.special.Gamma.logGamma((a + b)));
        }
        return ret;
    }
}
22:06:49.103 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:49.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #139
22:06:49.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta:133 which is executed by 51 tests
2066961
22:06:49.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #140
22:06:49.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta:130 which is executed by 51 tests
2066961
22:06:49.254 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:49.267 [pool-208-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:49.389 [pool-207-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:78: error: variable ret might not have been initialized
        return ret;
               ^
22:06:49.391 [pool-207-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta implements java.io.Serializable {
    private static final long serialVersionUID = -3833485397404128220L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(27).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("((a + 1.0) / ((a + b) + 2.0))",((a + 1.0) / ((a + b) + 2.0)));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("((a + b) + 2.0)",((a + b) + 2.0));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("1.0",1.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("x > ((a + 1.0) / ((a + b) + 2.0))",x > ((a + 1.0) / ((a + b) + 2.0)));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("2.0",2.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("(a + b)",(a + b));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("org.apache.commons.math.special.Beta.DEFAULT_EPSILON",org.apache.commons.math.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("(a + 1.0)",(a + 1.0));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectionEnds();
            }
            if (runtimeAngelicValue) if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    private static final long serialVersionUID = -7658917278956100597L;

                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((java.lang.Math.exp(((((a * (java.lang.Math.log(x))) + (b * (java.lang.Math.log((1.0 - x))))) - (java.lang.Math.log(a))) - (org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }
        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            ret = ((org.apache.commons.math.special.Gamma.logGamma(a)) + (org.apache.commons.math.special.Gamma.logGamma(b))) - (org.apache.commons.math.special.Gamma.logGamma((a + b)));
        }
        return ret;
    }
}
22:06:49.392 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:49.392 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:49.403 [pool-210-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:49.533 [pool-211-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.StackOverflowError
    at fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(AngelicExecution.java:16)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:33)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:53)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:53)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:53)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:53)
22:06:49.573 [pool-212-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (39 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[null]
java.lang.StackOverflowError    at fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(AngelicExecution.java:16)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:33)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:53)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:53)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:53)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:53)

22:06:49.573 [pool-209-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:49.574 [pool-209-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): null]
22:06:49.574 [pool-209-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Beta:130.
22:06:49.574 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #141
22:06:49.574 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta$1:153 which is executed by 51 tests
2066961
22:06:49.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #142
22:06:49.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta$1:149 which is executed by 51 tests
2066961
22:06:49.723 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #143
22:06:49.723 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta$1:146 which is executed by 51 tests
2066961
22:06:49.797 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:49.809 [pool-214-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:49.930 [pool-213-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:59: error: variable ret might not have been initialized
                        return ret;
                               ^
22:06:49.932 [pool-213-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta implements java.io.Serializable {
    private static final long serialVersionUID = -3833485397404128220L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    private static final long serialVersionUID = -7658917278956100597L;

                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            m = (n - 1.0) / 2.0;
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(29).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                                fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectionEnds();
                            }
                            if (runtimeAngelicValue)
                                ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));

                        }
                        return ret;
                    }

                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((java.lang.Math.exp(((((a * (java.lang.Math.log(x))) + (b * (java.lang.Math.log((1.0 - x))))) - (java.lang.Math.log(a))) - (org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            ret = ((org.apache.commons.math.special.Gamma.logGamma(a)) + (org.apache.commons.math.special.Gamma.logGamma(b))) - (org.apache.commons.math.special.Gamma.logGamma((a + b)));
        }
        return ret;
    }
}
22:06:49.933 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:49.933 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #144
22:06:49.933 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta$1:145 which is executed by 51 tests
2066961
22:06:50.019 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:50.031 [pool-216-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:50.152 [pool-215-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:57: error: variable m might not have been initialized
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                                           ^
22:06:50.154 [pool-215-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta implements java.io.Serializable {
    private static final long serialVersionUID = -3833485397404128220L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    private static final long serialVersionUID = -7658917278956100597L;

                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(30).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                                fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionEnds();
                            }
                            if (runtimeAngelicValue)
                                m = (n - 1.0) / 2.0;

                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((java.lang.Math.exp(((((a * (java.lang.Math.log(x))) + (b * (java.lang.Math.log((1.0 - x))))) - (java.lang.Math.log(a))) - (org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            ret = ((org.apache.commons.math.special.Gamma.logGamma(a)) + (org.apache.commons.math.special.Gamma.logGamma(b))) - (org.apache.commons.math.special.Gamma.logGamma((a + b)));
        }
        return ret;
    }
}
22:06:50.155 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:50.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #145
22:06:50.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta$1:140 which is executed by 51 tests
2066961
22:06:50.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:50.257 [pool-218-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:50.405 [pool-217-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:61: error: variable ret might not have been initialized
                        return ret;
                               ^
22:06:50.408 [pool-217-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta implements java.io.Serializable {
    private static final long serialVersionUID = -3833485397404128220L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    private static final long serialVersionUID = -7658917278956100597L;

                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(31).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("(n % 2) == 0",(n % 2) == 0);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("0",0);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("2",2);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("(n % 2)",(n % 2));} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionEnds();
                        }
                        if (runtimeAngelicValue) if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((java.lang.Math.exp(((((a * (java.lang.Math.log(x))) + (b * (java.lang.Math.log((1.0 - x))))) - (java.lang.Math.log(a))) - (org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            ret = ((org.apache.commons.math.special.Gamma.logGamma(a)) + (org.apache.commons.math.special.Gamma.logGamma(b))) - (org.apache.commons.math.special.Gamma.logGamma((a + b)));
        }
        return ret;
    }
}
22:06:50.409 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:50.409 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:50.421 [pool-220-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:50.559 [pool-221-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:50.561 [pool-222-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:50.561 [pool-219-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:50.561 [pool-219-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:50.561 [pool-219-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Beta$1:140.
22:06:50.561 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #146
22:06:50.561 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta:200 which is executed by 52 tests
2066961
22:06:50.658 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:50.670 [pool-224-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:50.779 [pool-223-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:86: error: variable ret might not have been initialized
        return ret;
               ^
22:06:50.782 [pool-223-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta implements java.io.Serializable {
    private static final long serialVersionUID = -3833485397404128220L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    private static final long serialVersionUID = -7658917278956100597L;

                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((java.lang.Math.exp(((((a * (java.lang.Math.log(x))) + (b * (java.lang.Math.log((1.0 - x))))) - (java.lang.Math.log(a))) - (org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(33).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("org.apache.commons.math.special.Beta.DEFAULT_EPSILON",org.apache.commons.math.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionEnds();
            }
            if (runtimeAngelicValue)
                ret = ((org.apache.commons.math.special.Gamma.logGamma(a)) + (org.apache.commons.math.special.Gamma.logGamma(b))) - (org.apache.commons.math.special.Gamma.logGamma((a + b)));

        }
        return ret;
    }
}
22:06:50.782 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:50.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #147
22:06:50.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta:204 which is executed by 58 tests
2066961
22:06:50.857 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #148
22:06:50.857 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta:197 which is executed by 58 tests
2066961
22:06:50.931 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:50.943 [pool-226-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:51.047 [pool-225-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:87: error: variable ret might not have been initialized
        return ret;
               ^
22:06:51.050 [pool-225-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta implements java.io.Serializable {
    private static final long serialVersionUID = -3833485397404128220L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    private static final long serialVersionUID = -7658917278956100597L;

                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((java.lang.Math.exp(((((a * (java.lang.Math.log(x))) + (b * (java.lang.Math.log((1.0 - x))))) - (java.lang.Math.log(a))) - (org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(34).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("org.apache.commons.math.special.Beta.DEFAULT_EPSILON",org.apache.commons.math.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("(b <= 0.0)",(b <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("(a <= 0.0)",(a <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectionEnds();
        }
        if (runtimeAngelicValue) if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            ret = ((org.apache.commons.math.special.Gamma.logGamma(a)) + (org.apache.commons.math.special.Gamma.logGamma(b))) - (org.apache.commons.math.special.Gamma.logGamma((a + b)));
        }
        return ret;
    }
}
22:06:51.050 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:51.050 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.061 [pool-228-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.171 [pool-229-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.172 [pool-230-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:51.173 [pool-227-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:51.173 [pool-227-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:51.173 [pool-227-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Beta:197.
22:06:51.173 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #149
22:06:51.173 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta:161 which is executed by 59 tests
2066961
22:06:51.247 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #150
22:06:51.247 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta:126 which is executed by 59 tests
2066961
22:06:51.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.334 [pool-232-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:51.447 [pool-231-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:78: error: variable ret might not have been initialized
        return ret;
               ^
22:06:51.449 [pool-231-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta implements java.io.Serializable {
    private static final long serialVersionUID = -3833485397404128220L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(36).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("(b <= 0.0)",(b <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("(x < 0)",(x < 0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("0",0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("1",1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("(x > 1)",(x > 1));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("org.apache.commons.math.special.Beta.DEFAULT_EPSILON",org.apache.commons.math.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectInput("(a <= 0.0)",(a <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(36).collectionEnds();
        }
        if (runtimeAngelicValue) if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    private static final long serialVersionUID = -7658917278956100597L;

                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((java.lang.Math.exp(((((a * (java.lang.Math.log(x))) + (b * (java.lang.Math.log((1.0 - x))))) - (java.lang.Math.log(a))) - (org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            ret = ((org.apache.commons.math.special.Gamma.logGamma(a)) + (org.apache.commons.math.special.Gamma.logGamma(b))) - (org.apache.commons.math.special.Gamma.logGamma((a + b)));
        }
        return ret;
    }
}
22:06:51.450 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
22:06:51.450 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.461 [pool-234-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.569 [pool-235-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.571 [pool-236-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:51.571 [pool-233-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:51.571 [pool-233-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:51.571 [pool-233-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Beta:126.
22:06:51.571 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #151
22:06:51.571 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Beta:59 which is executed by 59 tests
2066961
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #152
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:107 which is executed by 64 tests
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:107
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #153
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:102 which is executed by 64 tests
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:102
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #154
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:134 which is executed by 71 tests
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:134
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #155
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:133 which is executed by 71 tests
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:133
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #156
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:132 which is executed by 71 tests
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:132
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #157
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:131 which is executed by 71 tests
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:131
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #158
22:06:51.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:130 which is executed by 71 tests
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:130
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #159
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:129 which is executed by 71 tests
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:129
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #160
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:128 which is executed by 71 tests
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:128
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #161
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:122 which is executed by 71 tests
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:122
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #162
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:121 which is executed by 71 tests
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:121
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #163
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:120 which is executed by 71 tests
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:120
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #164
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:119 which is executed by 71 tests
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:119
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #165
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:118 which is executed by 71 tests
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:118
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #166
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:117 which is executed by 71 tests
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:117
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #167
22:06:51.647 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:116 which is executed by 71 tests
22:06:51.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:116
22:06:51.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #168
22:06:51.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:178 which is executed by 81 tests
-82779744
22:06:51.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #169
22:06:51.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:172 which is executed by 81 tests
-82779744
22:06:51.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.807 [pool-238-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.911 [pool-239-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.913 [pool-240-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:51.913 [pool-237-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:51.913 [pool-237-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:51.913 [pool-237-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:172.
22:06:51.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:51.924 [pool-242-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:52.037 [pool-243-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MaxIterationsExceededException: Continued fraction convergents failed to converge for value 0.494
    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:86)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:156)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:59)
    at org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(FDistributionImpl.java:78)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:113)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:52.041 [pool-244-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Continued fraction convergents failed to converge for value 0.494]
org.apache.commons.math.MaxIterationsExceededException: Continued fraction convergents failed to converge for value 0.494    at org.apache.commons.math.util.ContinuedFraction.evaluate(ContinuedFraction.java:86)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:156)
    at org.apache.commons.math.special.Beta.regularizedBeta(Beta.java:59)
    at org.apache.commons.math.distribution.FDistributionImpl.cumulativeProbability(FDistributionImpl.java:78)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:113)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:52.041 [pool-241-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:52.041 [pool-241-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Continued fraction convergents failed to converge for value 0.494]
22:06:52.041 [pool-241-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:172.
22:06:52.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #170
22:06:52.041 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:170 which is executed by 81 tests
-82779744
22:06:52.115 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #171
22:06:52.115 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:169 which is executed by 81 tests
-82779744
22:06:52.188 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:52.200 [pool-246-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: p must be between 0.0 and 1.0, inclusive.
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:62)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
22:06:52.335 [pool-247-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (35 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[p must be between 0.0 and 1.0, inclusive.]
java.lang.IllegalArgumentException: p must be between 0.0 and 1.0, inclusive.    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:62)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:52.339 [pool-248-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:52.339 [pool-245-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): p must be between 0.0 and 1.0, inclusive.]
22:06:52.339 [pool-245-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:52.339 [pool-245-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:169.
22:06:52.339 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #172
22:06:52.339 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:168 which is executed by 81 tests
-82779744
22:06:52.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:52.425 [pool-250-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: p must be between 0.0 and 1.0, inclusive.
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:62)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
22:06:52.558 [pool-251-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[p must be between 0.0 and 1.0, inclusive.]
java.lang.IllegalArgumentException: p must be between 0.0 and 1.0, inclusive.    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:62)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:52.561 [pool-252-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:52.561 [pool-249-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): p must be between 0.0 and 1.0, inclusive.]
22:06:52.561 [pool-249-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:52.561 [pool-249-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:168.
22:06:52.562 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #173
22:06:52.562 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:167 which is executed by 81 tests
-82779744
22:06:52.636 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:52.648 [pool-254-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError: expected:<0.975> but was:<0.0>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)
22:06:52.784 [pool-255-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (34 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[expected:<0.975> but was:<0.0>]
junit.framework.AssertionFailedError: expected:<0.975> but was:<0.0>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:52.787 [pool-256-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:52.787 [pool-253-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): expected:<0.975> but was:<0.0>]
22:06:52.787 [pool-253-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:52.787 [pool-253-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:167.
22:06:52.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #174
22:06:52.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:166 which is executed by 81 tests
-82779744
22:06:52.861 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:52.872 [pool-258-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError: expected:<0.975> but was:<0.0>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)
22:06:53.003 [pool-259-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[expected:<0.975> but was:<0.0>]
junit.framework.AssertionFailedError: expected:<0.975> but was:<0.0>    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:120)
    at junit.framework.Assert.assertEquals(Assert.java:129)
    at junit.framework.TestCase.assertEquals(TestCase.java:288)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:115)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:53.006 [pool-260-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:53.006 [pool-257-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): expected:<0.975> but was:<0.0>]
22:06:53.006 [pool-257-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:53.007 [pool-257-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:166.
22:06:53.007 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #175
22:06:53.007 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:165 which is executed by 81 tests
-82779744
22:06:53.090 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:53.101 [pool-262-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:53.247 [pool-263-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (33 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:53.249 [pool-264-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:06:53.249 [pool-261-thread-1] DEBUG tests.output - Failing tests with false: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:53.249 [pool-261-thread-1] DEBUG tests.output - Failing tests with true: 
[testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest): Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
22:06:53.249 [pool-261-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:165.
22:06:53.249 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #176
22:06:53.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:162 which is executed by 81 tests
-82779744
22:06:53.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
22:06:53.335 [pool-266-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 9
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308]
java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:179)
    at org.apache.commons.math.analysis.UnivariateRealSolverUtils.bracket(UnivariateRealSolverUtils.java:128)
    at org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability(AbstractContinuousDistribution.java:84)
    at org.apache.commons.math.distribution.FDistributionImpl.inverseCumulativeProbability(FDistributionImpl.java:106)
    at org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(FDistributionTest.java:114)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

22:11:57.716 [pool-265-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
22:11:57.717 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
22:11:57.717 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #177
22:11:57.717 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.util.ContinuedFraction:161 which is executed by 81 tests
java.lang.OutOfMemoryError: GC overhead limit exceeded
    at java.util.HashMap.resize(HashMap.java:704)
    at java.util.HashMap.putVal(HashMap.java:663)
    at java.util.HashMap.put(HashMap.java:612)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:31)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:17)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:73)
22:12:47.666 [pool-267-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (354234 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)
[GC overhead limit exceeded]
java.lang.OutOfMemoryError: GC overhead limit exceeded    at java.util.HashMap.resize(HashMap.java:704)
    at java.util.HashMap.putVal(HashMap.java:663)
    at java.util.HashMap.put(HashMap.java:612)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:31)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:17)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:73)

java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at fr.inria.lille.repair.Main.main(Main.java:106)
Caused by: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.zip.ZipFile.getZipEntry(ZipFile.java:572)
	at java.util.zip.ZipFile.access$900(ZipFile.java:60)
	at java.util.zip.ZipFile$ZipEntryIterator.next(ZipFile.java:539)
	at java.util.zip.ZipFile$ZipEntryIterator.nextElement(ZipFile.java:514)
	at java.util.zip.ZipFile$ZipEntryIterator.nextElement(ZipFile.java:495)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.getModulesDeclaringPackage(ClasspathJar.java:234)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathLocation.isPackage(ClasspathLocation.java:177)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.findClass(ClasspathJar.java:111)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.internalFindClass(FileSystem.java:443)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.findClass(FileSystem.java:385)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.findType(FileSystem.java:529)
	at org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment.findType(IModuleAwareNameEnvironment.java:94)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createPackage(LookupEnvironment.java:1094)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.buildTypeBindings(CompilationUnitScope.java:129)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.buildTypeBindings(LookupEnvironment.java:457)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:838)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:387)
	at spoon.support.compiler.jdt.TreeBuilderCompiler.buildUnits(TreeBuilderCompiler.java:73)
	at spoon.support.compiler.jdt.JDTBatchCompiler.getUnits(JDTBatchCompiler.java:266)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnits(JDTBasedSpoonCompiler.java:444)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:388)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:53)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:61)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:47)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:222)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:213)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:154)
	at fr.inria.lille.repair.Main$1.call(Main.java:101)

Usage: java -jar nopol.jar
                          [(-m|--mode) <repair|ranking>] (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic> [(-o|--oracle) <angelic|symbolic>] [(-y|--synthesis) <smt|dynamoth>] [(-l|--solver) <z3|cvc4>] [(-p|--solver-path) <solverPath>] (-s|--source) source1:source2:...:sourceN  (-c|--classpath) <classpath> [(-t|--test) test1:test2:...:testN ] [--complianceLevel <complianceLevel>] [--maxTime <maxTime>] [--maxTimeType <maxTimeType>] [(-z|--flocal) < cocospoon|dumb|gzoltar>] [--output <outputFolder>] [--json[:<outputJson>]]

  [(-m|--mode) <repair|ranking>]
        Define the mode of execution. (default: repair)

  (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic>
        The repair type (example fixing only conditions, or adding
        precondition). REQUIRED OPTION (default: condition)

  [(-o|--oracle) <angelic|symbolic>]
        Define the oracle (only used with repair mode). (default: angelic)

  [(-y|--synthesis) <smt|dynamoth>]
        Define the patch synthesis. (default: smt)

  [(-l|--solver) <z3|cvc4>]
        Define the solver (only used with smt synthesis). (default: z3)

  [(-p|--solver-path) <solverPath>]
        Define the solver binary path (only used with smt synthesis).

  (-s|--source) source1:source2:...:sourceN 
        Define the path to the source code of the project.

  (-c|--classpath) <classpath>
        Define the classpath of the project.

  [(-t|--test) test1:test2:...:testN ]
        Define the tests of the project (both failing and passing),
        fully-qualified, separated with ':' (even if the classpath contains
        other tests, only those are considered.

  [--complianceLevel <complianceLevel>]
        The compliance level of the project. (default: 7)

  [--maxTime <maxTime>]
        The maximum time execution in minute for the whole execution of
        Nopol.(default: 10)

  [--maxTimeType <maxTimeType>]
        The maximum time execution in minute for one type of patch. (default: 5)

  [(-z|--flocal) < cocospoon|dumb|gzoltar>]
        Define the fault localizer to be used. (default: gzoltar)

  [--output <outputFolder>]
        Define the location where the patches will be saved. (default: .)

  [--json[:<outputJson>]]
        Output a json file in the current working directory.

Command exited with non-zero status 255
7139.91user 14.51system 7:58.24elapsed 1495%CPU (0avgtext+0avgdata 4595084maxresident)k
51232inputs+7240outputs (3major+1316053minor)pagefaults 0swaps


Node: petitprince-11.luxembourg.grid5000.fr



Date: Wed Nov 28 22:13:38 EST 2018

