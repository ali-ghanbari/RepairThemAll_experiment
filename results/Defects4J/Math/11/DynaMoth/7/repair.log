cd /tmp/DynaMoth_Defects4J_Math_11;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -d64 -Xmx4g -Xms1g -XX:MaxPermSize=1024m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSClassUnloadingEnabled -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis dynamoth \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 5 \
	--source src/main/java/ \
	--classpath "target/classes/:target/test-classes/:/tmp/DynaMoth_Defects4J_Math_11/target/classes/:/tmp/DynaMoth_Defects4J_Math_11/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1024m; support was removed in 8.0
10:36:52.340 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
10:36:52.343 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/DynaMoth_Defects4J_Math_11/target/classes/, file:/tmp/DynaMoth_Defects4J_Math_11/target/test-classes/, file:/tmp/DynaMoth_Defects4J_Math_11/target/classes/, file:/tmp/DynaMoth_Defects4J_Math_11/target/test-classes/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
10:36:52.343 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
10:36:52.344 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.QuaternionTest, org.apache.commons.math3.complex.QuaternionTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.fitting.CurveFitterTest, org.apache.commons.math3.fitting.CurveFitterTest, org.apache.commons.math3.fitting.GaussianFitterTest, org.apache.commons.math3.fitting.GaussianFitterTest, org.apache.commons.math3.fitting.HarmonicFitterTest, org.apache.commons.math3.fitting.HarmonicFitterTest, org.apache.commons.math3.fitting.PolynomialFitterTest, org.apache.commons.math3.fitting.PolynomialFitterTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.SegmentTest, org.apache.commons.math3.geometry.euclidean.twod.SegmentTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.DiagonalMatrixTest, org.apache.commons.math3.linear.DiagonalMatrixTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.optim.PointValuePairTest, org.apache.commons.math3.optim.PointValuePairTest, org.apache.commons.math3.optim.PointVectorValuePairTest, org.apache.commons.math3.optim.PointVectorValuePairTest, org.apache.commons.math3.optim.SimplePointCheckerTest, org.apache.commons.math3.optim.SimplePointCheckerTest, org.apache.commons.math3.optim.SimpleValueCheckerTest, org.apache.commons.math3.optim.SimpleValueCheckerTest, org.apache.commons.math3.optim.SimpleVectorValueCheckerTest, org.apache.commons.math3.optim.SimpleVectorValueCheckerTest, org.apache.commons.math3.optim.linear.SimplexSolverTest, org.apache.commons.math3.optim.linear.SimplexSolverTest, org.apache.commons.math3.optim.linear.SimplexTableauTest, org.apache.commons.math3.optim.linear.SimplexTableauTest, org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest, org.apache.commons.math3.optim.univariate.BracketFinderTest, org.apache.commons.math3.optim.univariate.BracketFinderTest, org.apache.commons.math3.optim.univariate.BrentOptimizerTest, org.apache.commons.math3.optim.univariate.BrentOptimizerTest, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest, org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.SimplePointCheckerTest, org.apache.commons.math3.optimization.SimplePointCheckerTest, org.apache.commons.math3.optimization.SimpleValueCheckerTest, org.apache.commons.math3.optimization.SimpleValueCheckerTest, org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest, org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.SynchronizedRandomGeneratorTest, org.apache.commons.math3.random.SynchronizedRandomGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.clustering.DBSCANClustererTest, org.apache.commons.math3.stat.clustering.DBSCANClustererTest, org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest, org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.GTestTest, org.apache.commons.math3.stat.inference.GTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.TransformerMapTest, org.apache.commons.math3.util.TransformerMapTest]
10:36:52.347 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@2ff4f00f', projectTests=[org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest, org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest, org.apache.commons.math3.analysis.differentiation.GradientFunctionTest, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest, org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.QuaternionTest, org.apache.commons.math3.complex.QuaternionTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.fitting.CurveFitterTest, org.apache.commons.math3.fitting.CurveFitterTest, org.apache.commons.math3.fitting.GaussianFitterTest, org.apache.commons.math3.fitting.GaussianFitterTest, org.apache.commons.math3.fitting.HarmonicFitterTest, org.apache.commons.math3.fitting.HarmonicFitterTest, org.apache.commons.math3.fitting.PolynomialFitterTest, org.apache.commons.math3.fitting.PolynomialFitterTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.SegmentTest, org.apache.commons.math3.geometry.euclidean.twod.SegmentTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.DiagonalMatrixTest, org.apache.commons.math3.linear.DiagonalMatrixTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest, org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.optim.PointValuePairTest, org.apache.commons.math3.optim.PointValuePairTest, org.apache.commons.math3.optim.PointVectorValuePairTest, org.apache.commons.math3.optim.PointVectorValuePairTest, org.apache.commons.math3.optim.SimplePointCheckerTest, org.apache.commons.math3.optim.SimplePointCheckerTest, org.apache.commons.math3.optim.SimpleValueCheckerTest, org.apache.commons.math3.optim.SimpleValueCheckerTest, org.apache.commons.math3.optim.SimpleVectorValueCheckerTest, org.apache.commons.math3.optim.SimpleVectorValueCheckerTest, org.apache.commons.math3.optim.linear.SimplexSolverTest, org.apache.commons.math3.optim.linear.SimplexSolverTest, org.apache.commons.math3.optim.linear.SimplexTableauTest, org.apache.commons.math3.optim.linear.SimplexTableauTest, org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest, org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest, org.apache.commons.math3.optim.univariate.BracketFinderTest, org.apache.commons.math3.optim.univariate.BracketFinderTest, org.apache.commons.math3.optim.univariate.BrentOptimizerTest, org.apache.commons.math3.optim.univariate.BrentOptimizerTest, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest, org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest, org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.SimplePointCheckerTest, org.apache.commons.math3.optimization.SimplePointCheckerTest, org.apache.commons.math3.optimization.SimpleValueCheckerTest, org.apache.commons.math3.optimization.SimpleValueCheckerTest, org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest, org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.SynchronizedRandomGeneratorTest, org.apache.commons.math3.random.SynchronizedRandomGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.clustering.DBSCANClustererTest, org.apache.commons.math3.stat.clustering.DBSCANClustererTest, org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest, org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.GTestTest, org.apache.commons.math3.stat.inference.GTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.TransformerMapTest, org.apache.commons.math3.util.TransformerMapTest], complianceLevel=5, outputFolder=., json=true}
10:36:52.348 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 4
10:36:52.358 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 889 MB
10:36:52.358 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
10:36:52.358 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 990 MB
10:36:52.359 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
10:36:52.360 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
10:36:52.360 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
10:50:48.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
10:50:48.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:238 which is executed by 3 tests
1563228003
10:50:48.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
10:50:48.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:236 which is executed by 3 tests
1563228003
10:50:48.956 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3323205106975874> but was:<0.8330039883543864>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:50:49.274 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (300 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3323205106975874> but was:<0.8330039883543864>]
java.lang.AssertionError: expected:<0.3323205106975874> but was:<0.8330039883543864>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:50:50.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
10:50:50.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:235 which is executed by 3 tests
1563228003
10:50:50.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.587460838325649E-6> but was:<8.992430771478504E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:50:50.795 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (319 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.587460838325649E-6> but was:<8.992430771478504E-6>]
java.lang.AssertionError: expected:<3.587460838325649E-6> but was:<8.992430771478504E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:50:51.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
10:50:51.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:234 which is executed by 3 tests
1563228003
10:50:51.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
10:50:51.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:233 which is executed by 3 tests
1563228003
10:50:51.525 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
10:50:51.526 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:231 which is executed by 3 tests
1563228003
10:50:51.756 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.13378955620998115> but was:<0.33536068444627226>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:50:52.085 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (326 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.13378955620998115> but was:<0.33536068444627226>]
java.lang.AssertionError: expected:<0.13378955620998115> but was:<0.33536068444627226>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:50:52.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
10:50:52.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:230 which is executed by 3 tests
1563228003
10:50:52.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.028394278400616525> but was:<0.07117390107672968>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:50:52.945 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (334 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.028394278400616525> but was:<0.07117390107672968>]
java.lang.AssertionError: expected:<0.028394278400616525> but was:<0.07117390107672968>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:50:53.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
10:50:53.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:229 which is executed by 3 tests
1563228003
10:50:53.455 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
10:50:53.455 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:183 which is executed by 3 tests
1563228003
10:50:53.657 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
10:50:53.657 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:179 which is executed by 3 tests
1563228003
10:50:53.887 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.17674491676226756> but was:<0.44303380575360246>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:50:54.219 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (330 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.17674491676226756> but was:<0.44303380575360246>]
java.lang.AssertionError: expected:<0.17674491676226756> but was:<0.44303380575360246>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:50:54.551 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.17652026084502942> but was:<0.44247067687939023>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:50:54.846 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (293 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.17652026084502942> but was:<0.44247067687939023>]
java.lang.AssertionError: expected:<0.17652026084502942> but was:<0.44247067687939023>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:50:55.156 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
10:50:55.157 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:178 which is executed by 3 tests
1563228003
10:50:55.353 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
10:50:55.354 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.MultivariateNormalDistribution:164 which is executed by 4 tests
1563228003
10:50:55.551 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
10:50:55.551 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:388 which is executed by 5 tests
-1875222545
10:50:55.768 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
10:50:55.768 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:385 which is executed by 5 tests
-1875222545
10:50:55.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.414878134441109E-5> but was:<8.559830086209247E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:50:56.374 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (384 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.414878134441109E-5> but was:<8.559830086209247E-5>]
java.lang.AssertionError: expected:<3.414878134441109E-5> but was:<8.559830086209247E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:50:56.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
10:50:56.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:383 which is executed by 5 tests
-1875222545
10:50:56.957 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<9.013502177820635E-9> but was:<2.25934994123733E-8>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:50:57.300 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (322 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<9.013502177820635E-9> but was:<2.25934994123733E-8>]
java.lang.AssertionError: expected:<9.013502177820635E-9> but was:<2.25934994123733E-8>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:50:57.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
10:50:57.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:382 which is executed by 5 tests
-1875222545
10:50:57.850 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.006350095574451569> but was:<0.015917329113529485>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:50:58.227 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (373 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.006350095574451569> but was:<0.015917329113529485>]
java.lang.AssertionError: expected:<0.006350095574451569> but was:<0.015917329113529485>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:50:58.607 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
10:50:58.607 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:381 which is executed by 5 tests
-1875222545
10:50:58.816 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
10:50:58.816 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:380 which is executed by 5 tests
-1875222545
10:50:59.024 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.10001734425938477> but was:<0.25070630307407643>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:50:59.331 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (305 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.10001734425938477> but was:<0.25070630307407643>]
java.lang.AssertionError: expected:<0.10001734425938477> but was:<0.25070630307407643>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:50:59.655 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
10:50:59.655 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:379 which is executed by 5 tests
-1875222545
10:50:59.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
10:50:59.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:375 which is executed by 5 tests
-1875222545
10:51:00.073 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.0907176549055385E-4> but was:<2.7340237134254407E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:00.405 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (319 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.0907176549055385E-4> but was:<2.7340237134254407E-4>]
java.lang.AssertionError: expected:<1.0907176549055385E-4> but was:<2.7340237134254407E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:00.724 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<7.319288226400681E-4> but was:<0.0018346734818469733>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:01.037 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (312 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<7.319288226400681E-4> but was:<0.0018346734818469733>]
java.lang.AssertionError: expected:<7.319288226400681E-4> but was:<0.0018346734818469733>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:01.367 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
10:51:01.367 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:374 which is executed by 5 tests
-1875222545
10:51:01.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
10:51:01.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:373 which is executed by 5 tests
-1875222545
10:51:01.777 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
10:51:01.777 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution:53 which is executed by 9 tests
-977592164
10:51:01.967 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
10:51:01.968 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:361 which is executed by 10 tests
-2056333858
10:51:02.187 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
10:51:02.188 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:359 which is executed by 10 tests
-2056333858
10:51:02.399 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.8820288099689766E-7> but was:<4.7175466287383704E-7>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:02.726 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (325 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.8820288099689766E-7> but was:<4.7175466287383704E-7>]
java.lang.AssertionError: expected:<1.8820288099689766E-7> but was:<4.7175466287383704E-7>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:03.131 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
10:51:03.131 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:358 which is executed by 10 tests
-2056333858
10:51:03.341 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<6.805625359609817E-4> but was:<0.0017059172952943735>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:03.711 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (368 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<6.805625359609817E-4> but was:<0.0017059172952943735>]
java.lang.AssertionError: expected:<6.805625359609817E-4> but was:<0.0017059172952943735>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:04.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
10:51:04.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:357 which is executed by 10 tests
-2056333858
10:51:04.315 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
10:51:04.315 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:334 which is executed by 10 tests
-1875222545
10:51:04.522 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
10:51:04.522 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:333 which is executed by 10 tests
-1875222545
10:51:04.726 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.11739580710887176> but was:<0.29426764942222494>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:05.036 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (298 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.11739580710887176> but was:<0.29426764942222494>]
java.lang.AssertionError: expected:<0.11739580710887176> but was:<0.29426764942222494>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:05.346 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
10:51:05.347 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:332 which is executed by 10 tests
-1875222545
10:51:05.550 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.24390042664774653> but was:<0.6113677056298057>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:05.847 [pool-64-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (295 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.24390042664774653> but was:<0.6113677056298057>]
java.lang.AssertionError: expected:<0.24390042664774653> but was:<0.6113677056298057>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:06.144 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
10:51:06.144 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:550 which is executed by 11 tests
-2056333858
10:51:06.356 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
10:51:06.356 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:547 which is executed by 11 tests
-2056333858
10:51:06.574 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3710053067104824> but was:<0.9299723918386414>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:06.873 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (293 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3710053067104824> but was:<0.9299723918386414>]
java.lang.AssertionError: expected:<0.3710053067104824> but was:<0.9299723918386414>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:07.216 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
10:51:07.216 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:545 which is executed by 11 tests
-2056333858
10:51:07.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<5.902312202953204E-4> but was:<0.0014794902653622087>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:07.770 [pool-72-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (337 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<5.902312202953204E-4> but was:<0.0014794902653622087>]
java.lang.AssertionError: expected:<5.902312202953204E-4> but was:<0.0014794902653622087>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:08.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
10:51:08.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:544 which is executed by 11 tests
-2056333858
10:51:08.331 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
10:51:08.331 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:543 which is executed by 11 tests
-2056333858
10:51:08.547 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<7.712486256755965E-4> but was:<0.0019332336118887505>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:08.911 [pool-76-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (362 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<7.712486256755965E-4> but was:<0.0019332336118887505>]
java.lang.AssertionError: expected:<7.712486256755965E-4> but was:<0.0019332336118887505>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:09.276 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
10:51:09.276 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:542 which is executed by 11 tests
-2056333858
10:51:09.488 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
10:51:09.488 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:541 which is executed by 11 tests
-2056333858
10:51:09.700 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.9890136065292653E-8> but was:<9.998974294014036E-8>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:09.998 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (296 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.9890136065292653E-8> but was:<9.998974294014036E-8>]
java.lang.AssertionError: expected:<3.9890136065292653E-8> but was:<9.998974294014036E-8>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:10.339 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
10:51:10.339 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:540 which is executed by 11 tests
-2056333858
10:51:10.554 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
10:51:10.554 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:539 which is executed by 11 tests
-2056333858
10:51:10.766 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.18701073466687096> but was:<0.46876639517549457>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:11.065 [pool-84-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (293 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.18701073466687096> but was:<0.46876639517549457>]
java.lang.AssertionError: expected:<0.18701073466687096> but was:<0.46876639517549457>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:11.394 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
10:51:11.394 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:537 which is executed by 11 tests
-2056333858
10:51:11.611 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
10:51:11.612 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:536 which is executed by 11 tests
-2056333858
10:51:11.821 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
10:51:11.822 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:580 which is executed by 11 tests
816641250
10:51:12.049 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
10:51:12.049 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:578 which is executed by 11 tests
816641250
10:51:12.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.001315655709734484> but was:<0.003297859801700174>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:12.585 [pool-88-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (313 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.001315655709734484> but was:<0.003297859801700174>]
java.lang.AssertionError: expected:<0.001315655709734484> but was:<0.003297859801700174>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:13.209 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
10:51:13.209 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:577 which is executed by 11 tests
816641250
10:51:13.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.33776048262450475> but was:<0.8466399757995963>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:13.743 [pool-92-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (308 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.33776048262450475> but was:<0.8466399757995963>]
java.lang.AssertionError: expected:<0.33776048262450475> but was:<0.8466399757995963>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:14.259 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
10:51:14.259 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:574 which is executed by 11 tests
816641250
10:51:14.486 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<2.958895295113992E-6> but was:<7.41685060840537E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:14.780 [pool-96-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (292 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<2.958895295113992E-6> but was:<7.41685060840537E-6>]
java.lang.AssertionError: expected:<2.958895295113992E-6> but was:<7.41685060840537E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:15.287 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.05298877735971725> but was:<0.13282316756799425>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:15.603 [pool-100-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (314 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.05298877735971725> but was:<0.13282316756799425>]
java.lang.AssertionError: expected:<0.05298877735971725> but was:<0.13282316756799425>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:16.125 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
10:51:16.125 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:573 which is executed by 11 tests
816641250
10:51:16.347 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
10:51:16.347 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:572 which is executed by 11 tests
816641250
10:51:16.566 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<2.1034613028673546E-8> but was:<5.272595576359473E-8>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:16.863 [pool-104-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (296 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<2.1034613028673546E-8> but was:<5.272595576359473E-8>]
java.lang.AssertionError: expected:<2.1034613028673546E-8> but was:<5.272595576359473E-8>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:17.350 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
10:51:17.351 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:532 which is executed by 12 tests
-2056333858
10:51:17.566 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.2878740816998712> but was:<0.7215933127223318>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:17.872 [pool-108-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (304 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.2878740816998712> but was:<0.7215933127223318>]
java.lang.AssertionError: expected:<0.2878740816998712> but was:<0.7215933127223318>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:18.195 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.19368695868203714> but was:<0.4855012070596806>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:18.534 [pool-112-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (338 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.19368695868203714> but was:<0.4855012070596806>]
java.lang.AssertionError: expected:<0.19368695868203714> but was:<0.4855012070596806>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:18.872 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
10:51:18.872 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:522 which is executed by 13 tests
-2056333858
10:51:19.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
10:51:19.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:409 which is executed by 14 tests
-2056333858
10:51:19.291 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
10:51:19.291 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:406 which is executed by 14 tests
-2056333858
10:51:19.500 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<2.566193694645877E-4> but was:<6.432493673179146E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:19.821 [pool-116-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (319 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<2.566193694645877E-4> but was:<6.432493673179146E-4>]
java.lang.AssertionError: expected:<2.566193694645877E-4> but was:<6.432493673179146E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:20.144 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.3244580582167455> but was:<0.8132957426579654>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:20.463 [pool-120-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (317 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3244580582167455> but was:<0.8132957426579654>]
java.lang.AssertionError: expected:<0.3244580582167455> but was:<0.8132957426579654>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:20.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
10:51:20.788 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:277 which is executed by 14 tests
-2056333858
10:51:21.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
10:51:21.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:273 which is executed by 14 tests
-2056333858
10:51:21.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3346935803176878> but was:<0.8389523917617979>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:21.508 [pool-124-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (291 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3346935803176878> but was:<0.8389523917617979>]
java.lang.AssertionError: expected:<0.3346935803176878> but was:<0.8389523917617979>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:21.824 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<4.214810719628243E-5> but was:<1.0564963722037989E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:22.159 [pool-128-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (333 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<4.214810719628243E-5> but was:<1.0564963722037989E-4>]
java.lang.AssertionError: expected:<4.214810719628243E-5> but was:<1.0564963722037989E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:22.483 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
10:51:22.483 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:272 which is executed by 14 tests
-2056333858
10:51:22.690 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.003250397304559114> but was:<0.008147537787392266>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:22.983 [pool-132-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (291 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.003250397304559114> but was:<0.008147537787392266>]
java.lang.AssertionError: expected:<0.003250397304559114> but was:<0.008147537787392266>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:23.296 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
10:51:23.296 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:517 which is executed by 14 tests
-2056333858
10:51:23.517 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.992258690349625E-9> but was:<1.0007108512871696E-8>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:23.813 [pool-136-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (294 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.992258690349625E-9> but was:<1.0007108512871696E-8>]
java.lang.AssertionError: expected:<3.992258690349625E-9> but was:<1.0007108512871696E-8>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:24.124 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.5910422111762524E-5> but was:<3.988151392665821E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:24.431 [pool-140-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (305 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.5910422111762524E-5> but was:<3.988151392665821E-5>]
java.lang.AssertionError: expected:<1.5910422111762524E-5> but was:<3.988151392665821E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:24.762 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
10:51:24.763 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition$Solver:516 which is executed by 14 tests
-2056333858
10:51:24.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.3239431975161667E-9> but was:<8.3318900021614E-9>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:25.270 [pool-144-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (294 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.3239431975161667E-9> but was:<8.3318900021614E-9>]
java.lang.AssertionError: expected:<3.3239431975161667E-9> but was:<8.3318900021614E-9>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:25.585 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
10:51:25.585 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:348 which is executed by 14 tests
-2056333858
10:51:25.796 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
10:51:25.796 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:290 which is executed by 19 tests
-2056333858
10:51:26.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
10:51:26.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.NormalDistribution:137 which is executed by 31 tests
1935604012
10:51:26.196 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
10:51:26.196 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.NormalDistribution:136 which is executed by 31 tests
1935604012
10:51:26.389 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
10:51:26.389 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.NormalDistribution:135 which is executed by 31 tests
1935604012
10:51:26.582 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
10:51:26.582 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.MathArrays:719 which is executed by 56 tests
-1392754045
10:51:26.799 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
10:51:26.799 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1614 which is executed by 56 tests
1033054629
10:51:27.049 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.3767922620182125E-4> but was:<3.4511064122680243E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:27.349 [pool-148-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (298 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.3767922620182125E-4> but was:<3.4511064122680243E-4>]
java.lang.AssertionError: expected:<1.3767922620182125E-4> but was:<3.4511064122680243E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:28.264 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
10:51:28.264 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:564 which is executed by 67 tests
-2056333858
10:51:28.487 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
10:51:28.487 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:563 which is executed by 67 tests
-2056333858
10:51:28.696 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.19965788333291679> but was:<0.5004680956152667>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:28.992 [pool-152-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (295 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.19965788333291679> but was:<0.5004680956152667>]
java.lang.AssertionError: expected:<0.19965788333291679> but was:<0.5004680956152667>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:29.315 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
10:51:29.315 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:562 which is executed by 67 tests
-2056333858
10:51:29.524 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.5560480909060393E-6> but was:<3.9004341413506674E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:29.854 [pool-156-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (328 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.5560480909060393E-6> but was:<3.9004341413506674E-6>]
java.lang.AssertionError: expected:<1.5560480909060393E-6> but was:<3.9004341413506674E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:30.196 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
10:51:30.196 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:561 which is executed by 67 tests
-2056333858
10:51:30.404 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<2.3152466987755703E-8> but was:<5.803462837896927E-8>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:30.713 [pool-160-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (307 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<2.3152466987755703E-8> but was:<5.803462837896927E-8>]
java.lang.AssertionError: expected:<2.3152466987755703E-8> but was:<5.803462837896927E-8>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:31.056 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
10:51:31.057 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:185 which is executed by 68 tests
-490309094
10:51:31.253 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
10:51:31.253 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:175 which is executed by 68 tests
-490309094
10:51:31.447 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
10:51:31.447 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:589 which is executed by 70 tests
-2056333858
10:51:31.676 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.696659946210387E-8> but was:<4.2528957936048685E-8>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:32.055 [pool-164-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (378 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.696659946210387E-8> but was:<4.2528957936048685E-8>]
java.lang.AssertionError: expected:<1.696659946210387E-8> but was:<4.2528957936048685E-8>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:32.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
10:51:32.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:413 which is executed by 70 tests
1308483921
10:51:32.638 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
10:51:32.638 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:721 which is executed by 71 tests
-2056333858
10:51:32.849 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
10:51:32.849 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:719 which is executed by 71 tests
-2056333858
10:51:33.058 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.048588627823602244> but was:<0.12179362832816391>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:33.361 [pool-168-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (302 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.048588627823602244> but was:<0.12179362832816391>]
java.lang.AssertionError: expected:<0.048588627823602244> but was:<0.12179362832816391>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:33.681 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
10:51:33.681 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:717 which is executed by 71 tests
-2056333858
10:51:33.892 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.02280269025952593> but was:<0.057157868142180594>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:34.256 [pool-172-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (362 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.02280269025952593> but was:<0.057157868142180594>]
java.lang.AssertionError: expected:<0.02280269025952593> but was:<0.057157868142180594>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:34.567 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
10:51:34.568 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:716 which is executed by 71 tests
-2056333858
10:51:34.778 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<9.099042438460942E-7> but was:<2.28079170483136E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:35.088 [pool-176-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (308 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<9.099042438460942E-7> but was:<2.28079170483136E-6>]
java.lang.AssertionError: expected:<9.099042438460942E-7> but was:<2.28079170483136E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:35.397 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
10:51:35.397 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:715 which is executed by 71 tests
-2056333858
10:51:35.607 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<4.629897202249784E-7> but was:<1.160543123579427E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:35.918 [pool-180-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (309 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<4.629897202249784E-7> but was:<1.160543123579427E-6>]
java.lang.AssertionError: expected:<4.629897202249784E-7> but was:<1.160543123579427E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:36.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
10:51:36.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:714 which is executed by 71 tests
-2056333858
10:51:36.445 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
10:51:36.445 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:713 which is executed by 71 tests
-2056333858
10:51:36.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.0909777477165476E-6> but was:<2.7346756694195443E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:36.971 [pool-184-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (292 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.0909777477165476E-6> but was:<2.7346756694195443E-6>]
java.lang.AssertionError: expected:<1.0909777477165476E-6> but was:<2.7346756694195443E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:37.289 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
10:51:37.289 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:708 which is executed by 71 tests
-2056333858
10:51:37.500 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<5.82895493658606E-7> but was:<1.4611023255596568E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:37.794 [pool-188-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (293 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<5.82895493658606E-7> but was:<1.4611023255596568E-6>]
java.lang.AssertionError: expected:<5.82895493658606E-7> but was:<1.4611023255596568E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:38.099 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.0021020974814984178> but was:<0.0052691769831545495>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:38.416 [pool-192-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (316 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0021020974814984178> but was:<0.0052691769831545495>]
java.lang.AssertionError: expected:<0.0021020974814984178> but was:<0.0052691769831545495>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:38.734 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
10:51:38.735 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:707 which is executed by 71 tests
-2056333858
10:51:38.943 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.271973106351306> but was:<0.6817354783194077>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:39.243 [pool-196-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (298 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.271973106351306> but was:<0.6817354783194077>]
java.lang.AssertionError: expected:<0.271973106351306> but was:<0.6817354783194077>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:39.556 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
10:51:39.556 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:706 which is executed by 71 tests
-2056333858
10:51:39.793 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.29867427412079306> but was:<0.7486653804160699>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:40.112 [pool-200-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (318 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.29867427412079306> but was:<0.7486653804160699>]
java.lang.AssertionError: expected:<0.29867427412079306> but was:<0.7486653804160699>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:40.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.70185391816841E-9> but was:<4.265915150572489E-9>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:40.722 [pool-204-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (308 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.70185391816841E-9> but was:<4.265915150572489E-9>]
java.lang.AssertionError: expected:<1.70185391816841E-9> but was:<4.265915150572489E-9>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:41.034 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
10:51:41.034 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:702 which is executed by 71 tests
-2056333858
10:51:41.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3780775834482054> but was:<0.9476999606754332>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:41.534 [pool-208-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (291 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3780775834482054> but was:<0.9476999606754332>]
java.lang.AssertionError: expected:<0.3780775834482054> but was:<0.9476999606754332>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:41.834 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
10:51:41.834 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:701 which is executed by 71 tests
-2056333858
10:51:42.046 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.09437224655326862> but was:<0.23655614155087107>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:42.337 [pool-212-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (289 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.09437224655326862> but was:<0.23655614155087107>]
java.lang.AssertionError: expected:<0.09437224655326862> but was:<0.23655614155087107>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:42.645 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<5.617052187046048E-9> but was:<1.4079861832127521E-8>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:42.942 [pool-216-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (296 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<5.617052187046048E-9> but was:<1.4079861832127521E-8>]
java.lang.AssertionError: expected:<5.617052187046048E-9> but was:<1.4079861832127521E-8>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:43.255 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
10:51:43.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:700 which is executed by 71 tests
-2056333858
10:51:43.464 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.8901796274720094E-4> but was:<9.75123424761483E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:43.756 [pool-220-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (291 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.8901796274720094E-4> but was:<9.75123424761483E-4>]
java.lang.AssertionError: expected:<3.8901796274720094E-4> but was:<9.75123424761483E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:44.059 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
10:51:44.060 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:699 which is executed by 71 tests
-2056333858
10:51:44.273 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.1270265088981768E-6> but was:<2.8250365134628364E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:44.570 [pool-224-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (295 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.1270265088981768E-6> but was:<2.8250365134628364E-6>]
java.lang.AssertionError: expected:<1.1270265088981768E-6> but was:<2.8250365134628364E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:44.867 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
10:51:44.867 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:687 which is executed by 71 tests
-2056333858
10:51:45.075 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.21074377372245862> but was:<0.5282563019151524>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:45.368 [pool-228-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (292 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.21074377372245862> but was:<0.5282563019151524>]
java.lang.AssertionError: expected:<0.21074377372245862> but was:<0.5282563019151524>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:45.675 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.23775195783619235> but was:<0.5959557798610772>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:45.970 [pool-232-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (294 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.23775195783619235> but was:<0.5959557798610772>]
java.lang.AssertionError: expected:<0.23775195783619235> but was:<0.5959557798610772>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:46.267 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
10:51:46.267 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:681 which is executed by 71 tests
-2056333858
10:51:46.475 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.02234927570036638> but was:<0.056021326388061926>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:46.789 [pool-236-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (312 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.02234927570036638> but was:<0.056021326388061926>]
java.lang.AssertionError: expected:<0.02234927570036638> but was:<0.056021326388061926>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:47.090 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
10:51:47.090 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:680 which is executed by 71 tests
-2056333858
10:51:47.297 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
10:51:47.297 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:679 which is executed by 71 tests
-2056333858
10:51:47.504 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
10:51:47.504 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:678 which is executed by 71 tests
-2056333858
10:51:47.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.03259607693586166> but was:<0.08170624808947825>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:48.052 [pool-240-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (339 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.03259607693586166> but was:<0.08170624808947825>]
java.lang.AssertionError: expected:<0.03259607693586166> but was:<0.08170624808947825>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:48.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
10:51:48.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:674 which is executed by 71 tests
-2056333858
10:51:48.562 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
10:51:48.562 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:618 which is executed by 71 tests
-2056333858
10:51:48.770 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.2162775239595004> but was:<0.5421273567240673>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:49.083 [pool-244-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (311 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.2162775239595004> but was:<0.5421273567240673>]
java.lang.AssertionError: expected:<0.2162775239595004> but was:<0.5421273567240673>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:49.384 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.001066427820061084> but was:<0.0026731381266182136>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:49.676 [pool-248-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (290 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.001066427820061084> but was:<0.0026731381266182136>]
java.lang.AssertionError: expected:<0.001066427820061084> but was:<0.0026731381266182136>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:49.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #93
10:51:49.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:611 which is executed by 71 tests
-2056333858
10:51:50.186 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.16199539142913058> but was:<0.4060622285161751>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:50.481 [pool-252-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (293 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.16199539142913058> but was:<0.4060622285161751>]
java.lang.AssertionError: expected:<0.16199539142913058> but was:<0.4060622285161751>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:50.743 [pool-251-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
EigenDecomposition.java:312: error: variable m might not have been initialized
                if (m != j) {
                    ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
10:51:50.744 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #94
10:51:50.744 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:608 which is executed by 71 tests
-2056333858
10:51:50.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #95
10:51:50.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:607 which is executed by 71 tests
-2056333858
10:51:51.158 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<5.670217063364099E-6> but was:<1.4213126414323609E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:51.481 [pool-254-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (320 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<5.670217063364099E-6> but was:<1.4213126414323609E-5>]
java.lang.AssertionError: expected:<5.670217063364099E-6> but was:<1.4213126414323609E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:51.780 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #96
10:51:51.780 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:602 which is executed by 71 tests
-2056333858
10:51:51.986 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.04537297349204498> but was:<0.11373317825924281>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:52.284 [pool-258-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (297 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.04537297349204498> but was:<0.11373317825924281>]
java.lang.AssertionError: expected:<0.04537297349204498> but was:<0.11373317825924281>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:52.589 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #97
10:51:52.589 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:601 which is executed by 71 tests
-2056333858
10:51:52.797 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.037783501056099435> but was:<0.0947091920617691>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:53.197 [pool-262-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (399 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.037783501056099435> but was:<0.0947091920617691>]
java.lang.AssertionError: expected:<0.037783501056099435> but was:<0.0947091920617691>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:53.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.2153629835957095E-9> but was:<3.046463218620898E-9>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:53.805 [pool-266-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (310 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.2153629835957095E-9> but was:<3.046463218620898E-9>]
java.lang.AssertionError: expected:<1.2153629835957095E-9> but was:<3.046463218620898E-9>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:54.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #98
10:51:54.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:598 which is executed by 71 tests
-2056333858
10:51:54.309 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.0234564830909674E-8> but was:<2.5654249583702232E-8>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:54.603 [pool-270-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (293 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.0234564830909674E-8> but was:<2.5654249583702232E-8>]
java.lang.AssertionError: expected:<1.0234564830909674E-8> but was:<2.5654249583702232E-8>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:54.908 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.20244416911913546> but was:<0.5074522783482049>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:55.201 [pool-274-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (292 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.20244416911913546> but was:<0.5074522783482049>]
java.lang.AssertionError: expected:<0.20244416911913546> but was:<0.5074522783482049>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:55.505 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #99
10:51:55.505 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:597 which is executed by 71 tests
-2056333858
10:51:55.710 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.27740906292648604> but was:<0.6953614007704203>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:56.022 [pool-278-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (310 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.27740906292648604> but was:<0.6953614007704203>]
java.lang.AssertionError: expected:<0.27740906292648604> but was:<0.6953614007704203>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:56.319 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #100
10:51:56.319 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:596 which is executed by 71 tests
-2056333858
10:51:56.526 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3797642440722471> but was:<0.9519277918853629>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:56.819 [pool-282-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (292 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3797642440722471> but was:<0.9519277918853629>]
java.lang.AssertionError: expected:<0.3797642440722471> but was:<0.9519277918853629>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:57.124 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.581881224845765E-4> but was:<3.965188205306313E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:57.415 [pool-286-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (290 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.581881224845765E-4> but was:<3.965188205306313E-4>]
java.lang.AssertionError: expected:<1.581881224845765E-4> but was:<3.965188205306313E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:57.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #101
10:51:57.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:591 which is executed by 71 tests
-2056333858
10:51:57.919 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.008228157373858106> but was:<0.020624931921426285>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:58.235 [pool-290-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (315 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.008228157373858106> but was:<0.020624931921426285>]
java.lang.AssertionError: expected:<0.008228157373858106> but was:<0.020624931921426285>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:58.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.31323730186027954> but was:<0.7851694775121023>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:58.827 [pool-294-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (293 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.31323730186027954> but was:<0.7851694775121023>]
java.lang.AssertionError: expected:<0.31323730186027954> but was:<0.7851694775121023>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:59.121 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #102
10:51:59.121 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:588 which is executed by 71 tests
-2056333858
10:51:59.328 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<9.719948367658563E-10> but was:<2.436429740632639E-9>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:51:59.633 [pool-298-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (304 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<9.719948367658563E-10> but was:<2.436429740632639E-9>]
java.lang.AssertionError: expected:<9.719948367658563E-10> but was:<2.436429740632639E-9>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:51:59.931 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.05453126911795842> but was:<0.13668962102258686>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:00.222 [pool-302-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (290 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.05453126911795842> but was:<0.13668962102258686>]
java.lang.AssertionError: expected:<0.05453126911795842> but was:<0.13668962102258686>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:00.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #103
10:52:00.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:587 which is executed by 71 tests
-2056333858
10:52:00.735 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.052069496061256215> but was:<0.13051887107293234>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:01.026 [pool-306-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (289 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.052069496061256215> but was:<0.13051887107293234>]
java.lang.AssertionError: expected:<0.052069496061256215> but was:<0.13051887107293234>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:01.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #104
10:52:01.322 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:586 which is executed by 71 tests
-2056333858
10:52:01.528 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #105
10:52:01.528 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:583 which is executed by 71 tests
-2056333858
10:52:01.738 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0027705004596297396> but was:<0.006944614786986087>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:02.029 [pool-310-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (289 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0027705004596297396> but was:<0.006944614786986087>]
java.lang.AssertionError: expected:<0.0027705004596297396> but was:<0.006944614786986087>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:02.330 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #106
10:52:02.330 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:582 which is executed by 71 tests
-2056333858
10:52:02.535 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.583306593668566E-9> but was:<3.968761075099324E-9>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:02.851 [pool-314-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (314 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.583306593668566E-9> but was:<3.968761075099324E-9>]
java.lang.AssertionError: expected:<1.583306593668566E-9> but was:<3.968761075099324E-9>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:03.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #107
10:52:03.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:578 which is executed by 71 tests
-2056333858
10:52:03.361 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0011097728878753691> but was:<0.002781788099167299>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:03.655 [pool-318-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (293 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0011097728878753691> but was:<0.002781788099167299>]
java.lang.AssertionError: expected:<0.0011097728878753691> but was:<0.002781788099167299>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:03.951 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #108
10:52:03.952 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:577 which is executed by 71 tests
-2056333858
10:52:04.168 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #109
10:52:04.168 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:576 which is executed by 71 tests
-2056333858
10:52:04.373 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.02277284706272605> but was:<0.057083062341276636>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:04.681 [pool-322-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (306 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.02277284706272605> but was:<0.057083062341276636>]
java.lang.AssertionError: expected:<0.02277284706272605> but was:<0.057083062341276636>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:04.976 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #110
10:52:04.976 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:575 which is executed by 71 tests
-2056333858
10:52:05.183 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.00942894293179661> but was:<0.0236348549527235>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:05.488 [pool-326-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (304 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.00942894293179661> but was:<0.0236348549527235>]
java.lang.AssertionError: expected:<0.00942894293179661> but was:<0.0236348549527235>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:05.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #111
10:52:05.787 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:574 which is executed by 71 tests
-2056333858
10:52:05.992 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #112
10:52:05.992 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.EigenDecomposition:573 which is executed by 71 tests
-2056333858
10:52:06.198 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #113
10:52:06.198 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:89 which is executed by 72 tests
-490309094
10:52:06.390 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #114
10:52:06.390 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:87 which is executed by 72 tests
-490309094
10:52:06.588 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.869886752583344E-4> but was:<4.687111004383352E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:06.882 [pool-330-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (291 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.869886752583344E-4> but was:<4.687111004383352E-4>]
java.lang.AssertionError: expected:<1.869886752583344E-4> but was:<4.687111004383352E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:07.131 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #115
10:52:07.131 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:86 which is executed by 72 tests
-490309094
10:52:07.323 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.26876418184369494> but was:<0.6736918974174735>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:07.639 [pool-334-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (315 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.26876418184369494> but was:<0.6736918974174735>]
java.lang.AssertionError: expected:<0.26876418184369494> but was:<0.6736918974174735>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:07.888 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.1601327783315181> but was:<0.4013933498610016>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:08.188 [pool-338-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.1601327783315181> but was:<0.4013933498610016>]
java.lang.AssertionError: expected:<0.1601327783315181> but was:<0.4013933498610016>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:08.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #116
10:52:08.436 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:440 which is executed by 72 tests
1308483921
10:52:08.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #117
10:52:08.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:131 which is executed by 73 tests
-490309094
10:52:08.843 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #118
10:52:08.843 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:127 which is executed by 73 tests
-490309094
10:52:09.045 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.32241729799334456> but was:<0.8081803153802464>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:09.337 [pool-342-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (291 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.32241729799334456> but was:<0.8081803153802464>]
java.lang.AssertionError: expected:<0.32241729799334456> but was:<0.8081803153802464>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:09.587 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #119
10:52:09.587 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:126 which is executed by 73 tests
-490309094
10:52:09.780 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.007849159425434713> but was:<0.01967492494788107>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:10.116 [pool-346-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (335 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.007849159425434713> but was:<0.01967492494788107>]
java.lang.AssertionError: expected:<0.007849159425434713> but was:<0.01967492494788107>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:10.368 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #120
10:52:10.368 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:103 which is executed by 73 tests
-490309094
10:52:10.561 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.11700909632886405> but was:<0.293298309246953>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:10.854 [pool-350-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (291 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.11700909632886405> but was:<0.293298309246953>]
java.lang.AssertionError: expected:<0.11700909632886405> but was:<0.293298309246953>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:11.102 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #121
10:52:11.102 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:100 which is executed by 73 tests
-490309094
10:52:11.295 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #122
10:52:11.295 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:99 which is executed by 73 tests
-490309094
10:52:11.496 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #123
10:52:11.497 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:98 which is executed by 73 tests
-490309094
10:52:11.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<7.316997614435759E-7> but was:<1.8340993105752251E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:11.981 [pool-354-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (290 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<7.316997614435759E-7> but was:<1.8340993105752251E-6>]
java.lang.AssertionError: expected:<7.316997614435759E-7> but was:<1.8340993105752251E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:12.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.010232294525191156> but was:<0.025648558771196137>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:12.542 [pool-358-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (311 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.010232294525191156> but was:<0.025648558771196137>]
java.lang.AssertionError: expected:<0.010232294525191156> but was:<0.025648558771196137>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:12.792 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #124
10:52:12.792 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:400 which is executed by 74 tests
1308483921
10:52:13.007 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.1256265348107327> but was:<0.3148990242004982>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:13.299 [pool-362-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (291 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.1256265348107327> but was:<0.3148990242004982>]
java.lang.AssertionError: expected:<0.1256265348107327> but was:<0.3148990242004982>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:13.676 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #125
10:52:13.676 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:399 which is executed by 74 tests
1308483921
10:52:13.909 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<2.562291433067708E-6> but was:<6.422712153972302E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:14.297 [pool-366-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (387 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<2.562291433067708E-6> but was:<6.422712153972302E-6>]
java.lang.AssertionError: expected:<2.562291433067708E-6> but was:<6.422712153972302E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:14.637 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #126
10:52:14.637 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:392 which is executed by 74 tests
1308483921
10:52:14.852 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<2.790026441582652E-9> but was:<6.993559165439193E-9>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:15.277 [pool-370-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (423 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<2.790026441582652E-9> but was:<6.993559165439193E-9>]
java.lang.AssertionError: expected:<2.790026441582652E-9> but was:<6.993559165439193E-9>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:15.608 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.005995579198401116> but was:<0.015028688341501704>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:15.924 [pool-374-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (315 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.005995579198401116> but was:<0.015028688341501704>]
java.lang.AssertionError: expected:<0.005995579198401116> but was:<0.015028688341501704>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:16.259 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #127
10:52:16.259 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:391 which is executed by 74 tests
1308483921
10:52:16.475 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #128
10:52:16.475 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:253 which is executed by 75 tests
-490309094
10:52:16.669 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #129
10:52:16.670 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:252 which is executed by 75 tests
-490309094
10:52:16.863 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.019711089460413667> but was:<0.049408374165254>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:17.157 [pool-378-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (292 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.019711089460413667> but was:<0.049408374165254>]
java.lang.AssertionError: expected:<0.019711089460413667> but was:<0.049408374165254>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:17.422 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #130
10:52:17.422 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:195 which is executed by 75 tests
-490309094
10:52:17.620 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.09957378118483895> but was:<0.24959445532983762>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:17.922 [pool-382-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (300 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.09957378118483895> but was:<0.24959445532983762>]
java.lang.AssertionError: expected:<0.09957378118483895> but was:<0.24959445532983762>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:18.172 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #131
10:52:18.172 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:194 which is executed by 75 tests
-490309094
10:52:18.365 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #132
10:52:18.365 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.TriDiagonalTransformer:193 which is executed by 75 tests
-490309094
10:52:18.559 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #133
10:52:18.559 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.MathArrays:749 which is executed by 83 tests
-1392754045
10:52:18.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #134
10:52:18.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.MathArrays:748 which is executed by 83 tests
-1392754045
10:52:18.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.03179221150930604> but was:<0.07969125628227564>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
10:52:19.276 [pool-386-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (291 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.03179221150930604> but was:<0.07969125628227564>]
java.lang.AssertionError: expected:<0.03179221150930604> but was:<0.07969125628227564>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

10:52:19.601 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #135
10:52:19.601 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.MathArrays:747 which is executed by 83 tests
-1392754045
10:52:19.814 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #136
10:52:19.814 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:601 which is executed by 84 tests
1857420685
10:52:20.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #137
10:52:20.021 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:578 which is executed by 84 tests
1857420685
10:52:20.219 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:52:29.324 [pool-390-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9097 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:52:29.747 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:52:38.870 [pool-394-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9114 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:52:39.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #138
10:52:39.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:570 which is executed by 84 tests
1857420685
10:52:39.545 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #139
10:52:39.545 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:568 which is executed by 84 tests
1857420685
10:52:39.747 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:52:48.858 [pool-398-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9106 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:52:49.297 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #140
10:52:49.297 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:564 which is executed by 84 tests
1857420685
10:52:49.498 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:52:58.519 [pool-402-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9016 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:52:58.919 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #141
10:52:58.919 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:563 which is executed by 84 tests
1857420685
10:52:59.116 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:53:08.134 [pool-406-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9013 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:53:08.546 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:53:17.678 [pool-410-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9124 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:53:18.097 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #142
10:53:18.098 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:562 which is executed by 84 tests
1857420685
10:53:18.295 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:53:27.374 [pool-414-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9075 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:53:27.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #143
10:53:27.784 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:561 which is executed by 84 tests
1857420685
10:53:27.981 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:53:36.990 [pool-418-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9004 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:53:37.402 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #144
10:53:37.402 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:559 which is executed by 84 tests
1857420685
10:53:37.600 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:53:46.680 [pool-422-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9074 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:53:47.078 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #145
10:53:47.078 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:555 which is executed by 84 tests
1857420685
10:53:47.275 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:53:56.323 [pool-426-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9044 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:53:56.729 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #146
10:53:56.729 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:554 which is executed by 84 tests
1857420685
10:53:56.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:54:06.012 [pool-430-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9081 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:54:06.402 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:54:15.455 [pool-434-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9048 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:54:15.843 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #147
10:54:15.843 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:551 which is executed by 84 tests
1857420685
10:54:16.042 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:54:25.213 [pool-438-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9165 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:54:25.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #148
10:54:25.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:550 which is executed by 84 tests
1857420685
10:54:25.807 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:54:34.951 [pool-442-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9138 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:54:35.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #149
10:54:35.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:549 which is executed by 84 tests
1857420685
10:54:35.544 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:54:44.642 [pool-446-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9094 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:54:45.161 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:54:54.457 [pool-450-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9292 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

10:54:54.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #150
10:54:54.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:546 which is executed by 84 tests
1857420685
10:54:55.052 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:55:04.221 [pool-454-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9165 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:55:04.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #151
10:55:04.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:545 which is executed by 84 tests
1857420685
10:55:04.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:55:13.878 [pool-458-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9011 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:55:14.278 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #152
10:55:14.278 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:544 which is executed by 84 tests
1857420685
10:55:14.475 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:55:23.439 [pool-462-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8960 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:55:23.827 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:55:32.921 [pool-466-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9090 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:55:33.309 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #153
10:55:33.309 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:541 which is executed by 84 tests
1857420685
10:55:33.506 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:55:42.537 [pool-470-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9027 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:55:42.939 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #154
10:55:42.939 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:540 which is executed by 84 tests
1857420685
10:55:43.136 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:55:52.123 [pool-474-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (8982 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:55:52.549 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:56:01.684 [pool-478-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9130 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:56:02.075 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #155
10:56:02.075 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:538 which is executed by 84 tests
1857420685
10:56:02.276 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:56:11.291 [pool-482-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9011 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:56:11.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #156
10:56:11.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:537 which is executed by 84 tests
1857420685
10:56:11.886 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:56:20.928 [pool-486-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9038 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:56:21.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #157
10:56:21.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:535 which is executed by 84 tests
1857420685
10:56:21.517 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #158
10:56:21.517 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:533 which is executed by 84 tests
1857420685
10:56:21.713 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #159
10:56:21.713 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:532 which is executed by 84 tests
1857420685
10:56:21.909 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #160
10:56:21.909 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:531 which is executed by 84 tests
1857420685
10:56:22.105 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #161
10:56:22.105 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:530 which is executed by 84 tests
1857420685
10:56:22.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #162
10:56:22.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:332 which is executed by 84 tests
1857420685
10:56:22.498 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #163
10:56:22.498 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:331 which is executed by 84 tests
1857420685
10:56:22.695 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:56:31.706 [pool-490-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9007 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:56:32.094 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #164
10:56:32.094 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:269 which is executed by 84 tests
1857420685
10:56:32.290 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #165
10:56:32.290 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:251 which is executed by 84 tests
1857420685
10:56:32.486 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #166
10:56:32.486 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1488 which is executed by 84 tests
68623
10:56:32.729 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #167
10:56:32.729 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1485 which is executed by 84 tests
68623
10:56:32.960 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:56:42.188 [pool-494-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9216 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:56:42.711 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #168
10:56:42.711 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1484 which is executed by 84 tests
68623
10:56:42.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:56:52.066 [pool-498-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9121 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:56:52.558 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #169
10:56:52.559 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1482 which is executed by 84 tests
68623
10:56:52.785 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:57:01.840 [pool-502-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9049 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:57:02.329 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:57:11.345 [pool-506-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9012 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:57:11.837 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #170
10:57:11.837 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1476 which is executed by 84 tests
68623
10:57:12.065 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:57:21.142 [pool-510-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9073 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:57:21.664 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:57:30.799 [pool-514-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9130 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:57:31.358 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #171
10:57:31.358 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1470 which is executed by 84 tests
68623
10:57:31.584 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:57:40.616 [pool-518-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9028 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:57:41.185 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:57:50.587 [pool-522-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9398 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:57:51.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #172
10:57:51.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1463 which is executed by 84 tests
68623
10:57:51.345 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:58:00.446 [pool-526-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9096 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:58:00.931 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:58:10.088 [pool-530-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9152 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:58:10.642 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #173
10:58:10.642 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1460 which is executed by 84 tests
68623
10:58:10.867 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:58:20.013 [pool-534-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9141 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
10:58:20.531 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #174
10:58:20.531 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1459 which is executed by 84 tests
68623
10:58:20.756 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
10:58:29.847 [pool-538-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9087 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

11:01:50.164 [pool-537-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
11:01:50.164 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
11:01:50.164 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #175
11:01:50.164 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1458 which is executed by 84 tests
68623
11:01:50.394 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #176
11:01:50.395 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1457 which is executed by 84 tests
68623
11:01:50.620 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:01:59.758 [pool-541-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9133 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:02:40.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #177
11:02:40.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1456 which is executed by 84 tests
68623
11:02:41.108 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #178
11:02:41.108 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1454 which is executed by 84 tests
68623
11:02:41.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:02:50.398 [pool-545-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9061 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:02:50.898 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:02:59.989 [pool-549-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9087 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:03:00.484 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #179
11:03:00.484 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1438 which is executed by 84 tests
68623
11:03:00.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:03:09.815 [pool-553-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9099 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:03:10.325 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #180
11:03:10.325 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1437 which is executed by 84 tests
68623
11:03:10.551 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:03:19.626 [pool-557-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9070 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:03:20.107 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #181
11:03:20.107 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1419 which is executed by 84 tests
68623
11:03:20.332 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:03:29.448 [pool-561-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9112 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:03:29.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #182
11:03:29.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1418 which is executed by 84 tests
68623
11:03:30.150 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #183
11:03:30.150 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:642 which is executed by 84 tests
68623
11:03:30.372 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #184
11:03:30.372 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:217 which is executed by 110 tests
1648821820
11:03:30.564 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #185
11:03:30.564 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:216 which is executed by 110 tests
1648821820
11:03:30.763 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:03:39.905 [pool-565-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9138 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:03:40.297 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #186
11:03:40.297 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:207 which is executed by 111 tests
1648821820
11:03:40.493 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #187
11:03:40.493 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:205 which is executed by 111 tests
1648821820
11:03:40.684 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:03:49.703 [pool-569-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9015 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:03:50.085 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #188
11:03:50.085 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:203 which is executed by 111 tests
1648821820
11:03:50.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:03:59.352 [pool-573-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9065 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:03:59.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #189
11:03:59.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:199 which is executed by 111 tests
1648821820
11:03:59.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:04:08.975 [pool-577-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9049 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:04:09.356 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #190
11:04:09.356 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:198 which is executed by 111 tests
1648821820
11:04:09.547 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:04:18.709 [pool-581-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9157 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:04:19.081 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #191
11:04:19.081 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:197 which is executed by 111 tests
1648821820
11:04:19.273 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:04:28.346 [pool-585-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9069 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:04:28.818 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:04:37.894 [pool-589-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9072 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:04:38.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #192
11:04:38.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:196 which is executed by 111 tests
1648821820
11:04:38.474 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:04:47.550 [pool-593-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9072 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:04:47.933 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #193
11:04:47.933 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:195 which is executed by 111 tests
1648821820
11:04:48.124 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:04:57.243 [pool-597-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9114 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:04:57.619 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #194
11:04:57.620 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:194 which is executed by 111 tests
1648821820
11:04:57.811 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #195
11:04:57.811 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:193 which is executed by 111 tests
1648821820
11:04:58.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #196
11:04:58.002 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:192 which is executed by 111 tests
1648821820
11:04:58.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #197
11:04:58.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:191 which is executed by 111 tests
1648821820
11:04:58.385 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:05:07.521 [pool-601-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9128 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:05:07.909 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #198
11:05:07.909 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:187 which is executed by 111 tests
1648821820
11:05:08.100 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:05:17.219 [pool-605-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9115 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:05:17.601 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #199
11:05:17.602 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:186 which is executed by 111 tests
1648821820
11:05:17.792 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:05:26.943 [pool-609-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9147 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:05:27.321 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:05:36.433 [pool-613-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9107 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:05:36.812 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #200
11:05:36.812 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:184 which is executed by 111 tests
1648821820
11:05:37.004 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:05:46.157 [pool-617-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9149 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:05:46.543 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #201
11:05:46.543 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:183 which is executed by 111 tests
1648821820
11:05:46.734 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:05:55.826 [pool-621-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9088 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:05:56.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #202
11:05:56.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:182 which is executed by 111 tests
1648821820
11:05:56.424 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:06:05.570 [pool-625-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9142 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:06:05.958 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:06:15.078 [pool-629-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9116 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:06:15.450 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #203
11:06:15.450 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:181 which is executed by 111 tests
1648821820
11:06:15.641 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:06:24.775 [pool-633-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9123 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:06:25.159 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #204
11:06:25.159 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:180 which is executed by 111 tests
1648821820
11:06:25.350 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:06:34.461 [pool-637-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9106 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:06:34.837 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #205
11:06:34.837 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:179 which is executed by 111 tests
1648821820
11:06:35.028 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #206
11:06:35.028 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:178 which is executed by 111 tests
1648821820
11:06:35.219 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #207
11:06:35.219 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:177 which is executed by 111 tests
1648821820
11:06:35.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #208
11:06:35.420 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:176 which is executed by 111 tests
1648821820
11:06:35.612 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:06:44.819 [pool-641-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9203 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:06:45.198 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #209
11:06:45.199 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:174 which is executed by 111 tests
1648821820
11:06:45.392 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #210
11:06:45.392 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:173 which is executed by 111 tests
1648821820
11:06:45.583 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #211
11:06:45.583 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:172 which is executed by 111 tests
1648821820
11:06:45.774 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:06:54.902 [pool-645-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9124 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:06:55.292 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #212
11:06:55.292 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:167 which is executed by 111 tests
1648821820
11:06:55.483 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:07:04.556 [pool-649-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9069 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:07:04.937 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:07:14.084 [pool-653-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9143 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:07:14.452 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #213
11:07:14.452 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1613 which is executed by 115 tests
1033054629
11:07:14.698 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.014291528519898898> but was:<0.035823549475673906>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:07:14.990 [pool-657-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (291 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.014291528519898898> but was:<0.035823549475673906>]
java.lang.AssertionError: expected:<0.014291528519898898> but was:<0.035823549475673906>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:07:15.827 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.0544526509863158E-4> but was:<2.643120829221913E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:07:16.137 [pool-661-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.0544526509863158E-4> but was:<2.643120829221913E-4>]
java.lang.AssertionError: expected:<1.0544526509863158E-4> but was:<2.643120829221913E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:07:16.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #214
11:07:16.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.ArrayRealVector:289 which is executed by 129 tests
-357391461
11:07:17.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #215
11:07:17.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:157 which is executed by 155 tests
816641250
11:07:17.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #216
11:07:17.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:153 which is executed by 155 tests
816641250
11:07:17.590 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<6.52374156933564E-7> but was:<1.6352595074082328E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:07:17.887 [pool-665-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (296 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<6.52374156933564E-7> but was:<1.6352595074082328E-6>]
java.lang.AssertionError: expected:<6.52374156933564E-7> but was:<1.6352595074082328E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:07:18.343 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #217
11:07:18.343 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:151 which is executed by 155 tests
816641250
11:07:18.568 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.10605428870549816> but was:<0.2658386787150808>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:07:18.862 [pool-669-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (292 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.10605428870549816> but was:<0.2658386787150808>]
java.lang.AssertionError: expected:<0.10605428870549816> but was:<0.2658386787150808>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:07:19.314 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #218
11:07:19.314 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:150 which is executed by 155 tests
816641250
11:07:19.526 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.2579564933459841> but was:<0.6466010398457072>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:07:19.840 [pool-673-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (313 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.2579564933459841> but was:<0.6466010398457072>]
java.lang.AssertionError: expected:<0.2579564933459841> but was:<0.6466010398457072>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:07:20.296 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #219
11:07:20.297 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:149 which is executed by 155 tests
816641250
11:07:20.509 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #220
11:07:20.509 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:148 which is executed by 155 tests
816641250
11:07:20.720 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<2.2328945578250952E-4> but was:<5.597036632914069E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:07:21.022 [pool-677-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (300 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<2.2328945578250952E-4> but was:<5.597036632914069E-4>]
java.lang.AssertionError: expected:<2.2328945578250952E-4> but was:<5.597036632914069E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:07:21.488 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #221
11:07:21.488 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:147 which is executed by 155 tests
816641250
11:07:21.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3281936179030907> but was:<0.82265940218933>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:07:22.012 [pool-681-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (312 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3281936179030907> but was:<0.82265940218933>]
java.lang.AssertionError: expected:<0.3281936179030907> but was:<0.82265940218933>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:07:22.484 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #222
11:07:22.484 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:146 which is executed by 155 tests
816641250
11:07:22.703 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #223
11:07:22.704 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:145 which is executed by 155 tests
816641250
11:07:22.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #224
11:07:22.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:144 which is executed by 155 tests
816641250
11:07:23.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #225
11:07:23.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:143 which is executed by 155 tests
816641250
11:07:23.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #226
11:07:23.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:141 which is executed by 155 tests
816641250
11:07:23.542 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.1378007575895975> but was:<0.34541527523965754>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:07:23.859 [pool-685-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (316 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.1378007575895975> but was:<0.34541527523965754>]
java.lang.AssertionError: expected:<0.1378007575895975> but was:<0.34541527523965754>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:07:24.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #227
11:07:24.317 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:155 which is executed by 157 tests
1648821820
11:07:24.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #228
11:07:24.510 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:154 which is executed by 157 tests
1648821820
11:07:24.701 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:07:33.791 [pool-689-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9083 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:07:34.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #229
11:07:34.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:151 which is executed by 157 tests
1648821820
11:07:34.369 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:07:43.519 [pool-693-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9146 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:07:43.891 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #230
11:07:43.891 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:150 which is executed by 157 tests
1648821820
11:07:44.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:07:53.387 [pool-697-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9301 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:07:53.826 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #231
11:07:53.826 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:147 which is executed by 157 tests
1648821820
11:07:54.017 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:08:03.094 [pool-701-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9071 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:08:03.471 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #232
11:08:03.471 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:146 which is executed by 157 tests
1648821820
11:08:03.662 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
11:08:12.724 [pool-705-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9058 ms)
<> Total tests run: 47
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:08:13.151 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #233
11:08:13.151 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:144 which is executed by 157 tests
1648821820
11:08:13.344 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #234
11:08:13.344 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.ArrayRealVector:726 which is executed by 181 tests
-357391461
11:08:13.554 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #235
11:08:13.554 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix$5:607 which is executed by 200 tests
816641250
11:08:13.765 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #236
11:08:13.765 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix$5:606 which is executed by 200 tests
816641250
11:08:13.976 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.008333721004119325> but was:<0.020889540701811753>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:14.314 [pool-709-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (337 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.008333721004119325> but was:<0.020889540701811753>]
java.lang.AssertionError: expected:<0.008333721004119325> but was:<0.020889540701811753>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:14.771 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #237
11:08:14.771 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:611 which is executed by 200 tests
816641250
11:08:14.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #238
11:08:14.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:601 which is executed by 200 tests
816641250
11:08:15.195 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<4.5586556552896775E-6> but was:<1.1426855159855616E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:15.492 [pool-713-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (296 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<4.5586556552896775E-6> but was:<1.1426855159855616E-5>]
java.lang.AssertionError: expected:<4.5586556552896775E-6> but was:<1.1426855159855616E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:15.956 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #239
11:08:15.957 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:600 which is executed by 200 tests
816641250
11:08:16.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #240
11:08:16.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:599 which is executed by 200 tests
816641250
11:08:16.380 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #241
11:08:16.380 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:598 which is executed by 200 tests
816641250
11:08:16.591 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #242
11:08:16.591 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:616 which is executed by 201 tests
816641250
11:08:16.801 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #243
11:08:16.801 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:419 which is executed by 201 tests
-1875222545
11:08:17.000 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #244
11:08:17.000 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:416 which is executed by 201 tests
-1875222545
11:08:17.210 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.16210176683088115> but was:<0.40632887210592833>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:17.535 [pool-717-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (324 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.16210176683088115> but was:<0.40632887210592833>]
java.lang.AssertionError: expected:<0.16210176683088115> but was:<0.40632887210592833>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:17.799 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #245
11:08:17.799 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:415 which is executed by 201 tests
-1875222545
11:08:17.998 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0025893060255176813> but was:<0.006490427695235038>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:18.360 [pool-721-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (361 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0025893060255176813> but was:<0.006490427695235038>]
java.lang.AssertionError: expected:<0.0025893060255176813> but was:<0.006490427695235038>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:18.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #246
11:08:18.623 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:414 which is executed by 201 tests
-1875222545
11:08:18.822 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #247
11:08:18.822 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:413 which is executed by 201 tests
-1875222545
11:08:19.020 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.4459719526885684E-5> but was:<3.6245141809325644E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:19.314 [pool-725-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (293 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.4459719526885684E-5> but was:<3.6245141809325644E-5>]
java.lang.AssertionError: expected:<1.4459719526885684E-5> but was:<3.6245141809325644E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:19.602 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #248
11:08:19.602 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:412 which is executed by 201 tests
-1875222545
11:08:19.800 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.39829693394212756> but was:<0.9983823563181727>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:20.098 [pool-729-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (297 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.39829693394212756> but was:<0.9983823563181727>]
java.lang.AssertionError: expected:<0.39829693394212756> but was:<0.9983823563181727>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:20.359 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #249
11:08:20.359 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:411 which is executed by 201 tests
-1875222545
11:08:20.557 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #250
11:08:20.557 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:410 which is executed by 201 tests
-1875222545
11:08:20.765 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #251
11:08:20.765 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.AbstractRealMatrix:873 which is executed by 202 tests
816641250
11:08:20.976 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #252
11:08:20.976 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor:34 which is executed by 202 tests
-69848058
11:08:21.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #253
11:08:21.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor:41 which is executed by 206 tests
-69848058
11:08:21.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #254
11:08:21.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.ArrayRealVector:450 which is executed by 236 tests
-357391461
11:08:21.555 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #255
11:08:21.555 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.BitsStreamGenerator:171 which is executed by 1126 tests
936233262
11:08:21.745 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #256
11:08:21.746 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.BitsStreamGenerator:170 which is executed by 1126 tests
936233262
11:08:21.935 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.AssertionError: expected:<7.634146284939444E-7> but was:<1.913596693049842E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:31.454 [pool-733-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9501 ms)
<> Total tests run: 52
<> Ignored tests: 1
<> Failed tests: 2
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1109)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<7.634146284939444E-7> but was:<1.913596693049842E-6>]
java.lang.AssertionError: expected:<7.634146284939444E-7> but was:<1.913596693049842E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
11:08:31.888 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #257
11:08:31.888 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:145 which is executed by 346 tests
-1875222545
11:08:32.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #258
11:08:32.089 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:3489 which is executed by 347 tests
1033054629
11:08:32.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #259
11:08:32.327 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:254 which is executed by 347 tests
-1875222545
11:08:32.525 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #260
11:08:32.525 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:611 which is executed by 347 tests
1308483921
11:08:32.738 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #261
11:08:32.738 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:607 which is executed by 347 tests
1308483921
11:08:32.949 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.005798781591671> but was:<0.014535389896092283>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:33.262 [pool-739-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (312 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.005798781591671> but was:<0.014535389896092283>]
java.lang.AssertionError: expected:<0.005798781591671> but was:<0.014535389896092283>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:33.571 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.07907253334904825> but was:<0.19820544783942703>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:33.867 [pool-743-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (295 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.07907253334904825> but was:<0.19820544783942703>]
java.lang.AssertionError: expected:<0.07907253334904825> but was:<0.19820544783942703>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:34.206 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #262
11:08:34.206 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:534 which is executed by 355 tests
-1875222545
11:08:34.417 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #263
11:08:34.417 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:532 which is executed by 355 tests
-1875222545
11:08:34.618 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.0254918575217326E-4> but was:<2.57052688546784E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:34.946 [pool-747-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (308 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.0254918575217326E-4> but was:<2.57052688546784E-4>]
java.lang.AssertionError: expected:<1.0254918575217326E-4> but was:<2.57052688546784E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:35.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #264
11:08:35.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:531 which is executed by 355 tests
-1875222545
11:08:35.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<6.923753522530004E-5> but was:<1.7355276346149692E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:35.729 [pool-751-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (315 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<6.923753522530004E-5> but was:<1.7355276346149692E-4>]
java.lang.AssertionError: expected:<6.923753522530004E-5> but was:<1.7355276346149692E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:36.051 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #265
11:08:36.051 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:529 which is executed by 355 tests
-1875222545
11:08:36.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #266
11:08:36.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:528 which is executed by 355 tests
-1875222545
11:08:36.448 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #267
11:08:36.449 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:134 which is executed by 384 tests
1308483921
11:08:36.658 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #268
11:08:36.658 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:130 which is executed by 384 tests
1308483921
11:08:36.878 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.02163562544959241> but was:<0.05423247049127438>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:37.190 [pool-755-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (311 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.02163562544959241> but was:<0.05423247049127438>]
java.lang.AssertionError: expected:<0.02163562544959241> but was:<0.05423247049127438>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:37.521 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.247699393268325E-5> but was:<3.1275185774063275E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:37.822 [pool-759-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (300 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.247699393268325E-5> but was:<3.1275185774063275E-5>]
java.lang.AssertionError: expected:<1.247699393268325E-5> but was:<3.1275185774063275E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:38.164 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #269
11:08:38.164 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:316 which is executed by 470 tests
-1875222545
11:08:38.363 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #270
11:08:38.363 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:315 which is executed by 470 tests
-1875222545
11:08:38.561 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.07376551905799551> but was:<0.18490273576360347>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:38.858 [pool-763-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (294 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.07376551905799551> but was:<0.18490273576360347>]
java.lang.AssertionError: expected:<0.07376551905799551> but was:<0.18490273576360347>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:39.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #271
11:08:39.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:314 which is executed by 470 tests
-1875222545
11:08:39.329 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.09415293258322502> but was:<0.23600640295253822>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:39.676 [pool-767-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (346 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.09415293258322502> but was:<0.23600640295253822>]
java.lang.AssertionError: expected:<0.09415293258322502> but was:<0.23600640295253822>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:39.941 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #272
11:08:39.941 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.Precision:272 which is executed by 494 tests
627790943
11:08:40.135 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #273
11:08:40.135 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:548 which is executed by 496 tests
-1875222545
11:08:40.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #274
11:08:40.335 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:547 which is executed by 496 tests
-1875222545
11:08:40.544 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.745049688765031E-10> but was:<9.387447439756453E-10>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:40.842 [pool-771-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (297 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.745049688765031E-10> but was:<9.387447439756453E-10>]
java.lang.AssertionError: expected:<3.745049688765031E-10> but was:<9.387447439756453E-10>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:41.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #275
11:08:41.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:300 which is executed by 496 tests
-1875222545
11:08:41.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #276
11:08:41.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:296 which is executed by 496 tests
-1875222545
11:08:41.500 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #277
11:08:41.500 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:294 which is executed by 496 tests
-1875222545
11:08:41.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.24822681295894825> but was:<0.6222123478844405>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:42.033 [pool-775-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (333 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.24822681295894825> but was:<0.6222123478844405>]
java.lang.AssertionError: expected:<0.24822681295894825> but was:<0.6222123478844405>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:42.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #278
11:08:42.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:291 which is executed by 496 tests
-1875222545
11:08:42.527 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<2.22194980868169E-5> but was:<5.569602215252466E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:42.863 [pool-779-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (335 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<2.22194980868169E-5> but was:<5.569602215252466E-5>]
java.lang.AssertionError: expected:<2.22194980868169E-5> but was:<5.569602215252466E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:43.134 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<7.307984311433125E-9> but was:<1.8318400105598033E-8>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:43.431 [pool-783-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (296 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<7.307984311433125E-9> but was:<1.8318400105598033E-8>]
java.lang.AssertionError: expected:<7.307984311433125E-9> but was:<1.8318400105598033E-8>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:43.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #279
11:08:43.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:290 which is executed by 496 tests
-1875222545
11:08:43.907 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.047727672389346026> but was:<0.11963553309346006>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:44.231 [pool-787-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (323 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.047727672389346026> but was:<0.11963553309346006>]
java.lang.AssertionError: expected:<0.047727672389346026> but was:<0.11963553309346006>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:44.501 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #280
11:08:44.501 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:289 which is executed by 496 tests
-1875222545
11:08:44.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<7.367754637858356E-4> but was:<0.0018468222095799442>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:44.995 [pool-791-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (295 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<7.367754637858356E-4> but was:<0.0018468222095799442>]
java.lang.AssertionError: expected:<7.367754637858356E-4> but was:<0.0018468222095799442>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:45.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #281
11:08:45.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:286 which is executed by 496 tests
-1875222545
11:08:45.468 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.0777577157405664E-6> but was:<7.714794512739024E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:45.785 [pool-795-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (316 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.0777577157405664E-6> but was:<7.714794512739024E-6>]
java.lang.AssertionError: expected:<3.0777577157405664E-6> but was:<7.714794512739024E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:46.045 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.002475245456721288> but was:<0.006204520248469504>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:46.345 [pool-799-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.002475245456721288> but was:<0.006204520248469504>]
java.lang.AssertionError: expected:<0.002475245456721288> but was:<0.006204520248469504>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:46.625 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #282
11:08:46.625 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:285 which is executed by 496 tests
-1875222545
11:08:46.825 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #283
11:08:46.825 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:281 which is executed by 496 tests
-1875222545
11:08:47.024 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.14943865409090204> but was:<0.37458715566705664>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:47.324 [pool-803-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (298 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.14943865409090204> but was:<0.37458715566705664>]
java.lang.AssertionError: expected:<0.14943865409090204> but was:<0.37458715566705664>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:47.611 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<7.131103361992781E-5> but was:<1.7875025316487292E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:47.969 [pool-807-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (357 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<7.131103361992781E-5> but was:<1.7875025316487292E-4>]
java.lang.AssertionError: expected:<7.131103361992781E-5> but was:<1.7875025316487292E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:48.240 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #284
11:08:48.240 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:280 which is executed by 496 tests
-1875222545
11:08:48.438 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #285
11:08:48.438 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:279 which is executed by 496 tests
-1875222545
11:08:48.636 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.003909178691926939> but was:<0.009798857839769092>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:48.936 [pool-811-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.003909178691926939> but was:<0.009798857839769092>]
java.lang.AssertionError: expected:<0.003909178691926939> but was:<0.009798857839769092>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:49.208 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #286
11:08:49.208 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:276 which is executed by 496 tests
-1875222545
11:08:49.406 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0013529907613075618> but was:<0.003391444897608057>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:49.725 [pool-815-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (318 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0013529907613075618> but was:<0.003391444897608057>]
java.lang.AssertionError: expected:<0.0013529907613075618> but was:<0.003391444897608057>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:50.001 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<6.485027197552752E-6> but was:<1.6255552535136764E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:50.341 [pool-819-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (339 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<6.485027197552752E-6> but was:<1.6255552535136764E-5>]
java.lang.AssertionError: expected:<6.485027197552752E-6> but was:<1.6255552535136764E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:50.612 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #287
11:08:50.612 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:273 which is executed by 496 tests
-1875222545
11:08:50.810 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.16772230132544072> but was:<0.4204174627885302>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:51.110 [pool-823-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.16772230132544072> but was:<0.4204174627885302>]
java.lang.AssertionError: expected:<0.16772230132544072> but was:<0.4204174627885302>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:51.371 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.1770847978743947E-9> but was:<2.9505140359902736E-9>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:51.707 [pool-827-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (335 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.1770847978743947E-9> but was:<2.9505140359902736E-9>]
java.lang.AssertionError: expected:<1.1770847978743947E-9> but was:<2.9505140359902736E-9>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:51.986 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #288
11:08:51.986 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:272 which is executed by 496 tests
-1875222545
11:08:52.184 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.4523381053680696E-9> but was:<8.65372830850162E-9>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:52.497 [pool-831-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (310 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.4523381053680696E-9> but was:<8.65372830850162E-9>]
java.lang.AssertionError: expected:<3.4523381053680696E-9> but was:<8.65372830850162E-9>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:52.770 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.01384700016048771> but was:<0.03470928212109849>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:53.071 [pool-835-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (300 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.01384700016048771> but was:<0.03470928212109849>]
java.lang.AssertionError: expected:<0.01384700016048771> but was:<0.03470928212109849>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:53.377 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #289
11:08:53.377 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:307 which is executed by 530 tests
-1875222545
11:08:53.578 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #290
11:08:53.578 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:306 which is executed by 530 tests
-1875222545
11:08:53.776 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.100375384179858E-5> but was:<7.771488599955182E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:54.116 [pool-839-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (339 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.100375384179858E-5> but was:<7.771488599955182E-5>]
java.lang.AssertionError: expected:<3.100375384179858E-5> but was:<7.771488599955182E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:54.379 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #291
11:08:54.379 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:339 which is executed by 611 tests
-1875222545
11:08:54.577 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #292
11:08:54.578 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.Array2DRowRealMatrix:345 which is executed by 612 tests
-1875222545
11:08:54.776 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #293
11:08:54.776 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1599 which is executed by 626 tests
1033054629
11:08:55.009 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #294
11:08:55.009 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1597 which is executed by 626 tests
1033054629
11:08:55.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #295
11:08:55.241 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1595 which is executed by 626 tests
1033054629
11:08:55.488 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.398468490498293> but was:<0.9988123848325553>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:55.803 [pool-843-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (313 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.398468490498293> but was:<0.9988123848325553>]
java.lang.AssertionError: expected:<0.398468490498293> but was:<0.9988123848325553>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:56.632 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #296
11:08:56.632 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1594 which is executed by 626 tests
1033054629
11:08:56.867 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.37988954463184216> but was:<0.9522418738108709>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:57.196 [pool-847-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (328 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.37988954463184216> but was:<0.9522418738108709>]
java.lang.AssertionError: expected:<0.37988954463184216> but was:<0.9522418738108709>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:57.997 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #297
11:08:57.997 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1593 which is executed by 626 tests
1033054629
11:08:58.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<4.25724638314621E-5> but was:<1.067133415606485E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:58.547 [pool-851-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (314 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<4.25724638314621E-5> but was:<1.067133415606485E-4>]
java.lang.AssertionError: expected:<4.25724638314621E-5> but was:<1.067133415606485E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:08:59.340 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #298
11:08:59.340 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1592 which is executed by 626 tests
1033054629
11:08:59.575 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.08609825721410946> but was:<0.21581632592933928>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:08:59.872 [pool-855-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (296 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.08609825721410946> but was:<0.21581632592933928>]
java.lang.AssertionError: expected:<0.08609825721410946> but was:<0.21581632592933928>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:00.690 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #299
11:09:00.690 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1591 which is executed by 626 tests
1033054629
11:09:00.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.1157145283335613> but was:<0.29005330850649474>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:01.227 [pool-859-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (300 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.1157145283335613> but was:<0.29005330850649474>]
java.lang.AssertionError: expected:<0.1157145283335613> but was:<0.29005330850649474>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:02.021 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #300
11:09:02.021 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1590 which is executed by 626 tests
1033054629
11:09:02.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #301
11:09:02.256 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1588 which is executed by 626 tests
1033054629
11:09:02.489 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.069063320097008E-4> but was:<2.679744345526052E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:02.796 [pool-863-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (305 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.069063320097008E-4> but was:<2.679744345526052E-4>]
java.lang.AssertionError: expected:<1.069063320097008E-4> but was:<2.679744345526052E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:03.617 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #302
11:09:03.617 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1587 which is executed by 626 tests
1033054629
11:09:03.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.010365659612161009> but was:<0.025982855469043394>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:04.173 [pool-867-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (321 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.010365659612161009> but was:<0.025982855469043394>]
java.lang.AssertionError: expected:<0.010365659612161009> but was:<0.025982855469043394>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:04.994 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #303
11:09:04.994 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1585 which is executed by 626 tests
1033054629
11:09:05.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #304
11:09:05.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1584 which is executed by 626 tests
1033054629
11:09:05.473 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #305
11:09:05.474 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1581 which is executed by 626 tests
1033054629
11:09:05.705 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.35954749108808726> but was:<0.9012519072340371>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:06.005 [pool-871-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (297 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.35954749108808726> but was:<0.9012519072340371>]
java.lang.AssertionError: expected:<0.35954749108808726> but was:<0.9012519072340371>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:06.804 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #306
11:09:06.804 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1580 which is executed by 626 tests
1033054629
11:09:07.039 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.040995525358729586> but was:<0.10276054299754375>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:07.378 [pool-875-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (338 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.040995525358729586> but was:<0.10276054299754375>]
java.lang.AssertionError: expected:<0.040995525358729586> but was:<0.10276054299754375>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:08.170 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #307
11:09:08.170 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1579 which is executed by 626 tests
1033054629
11:09:08.411 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #308
11:09:08.411 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1578 which is executed by 626 tests
1033054629
11:09:08.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #309
11:09:08.644 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1575 which is executed by 626 tests
1033054629
11:09:08.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #310
11:09:08.877 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1574 which is executed by 626 tests
1033054629
11:09:09.109 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #311
11:09:09.109 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1570 which is executed by 626 tests
1033054629
11:09:09.353 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0019439385901758855> but was:<0.004872731434281199>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:09.713 [pool-879-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (328 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0019439385901758855> but was:<0.004872731434281199>]
java.lang.AssertionError: expected:<0.0019439385901758855> but was:<0.004872731434281199>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:10.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.0749091019590352> but was:<0.18776927299773408>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:10.842 [pool-883-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (330 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0749091019590352> but was:<0.18776927299773408>]
java.lang.AssertionError: expected:<0.0749091019590352> but was:<0.18776927299773408>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:11.644 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #312
11:09:11.644 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1569 which is executed by 626 tests
1033054629
11:09:11.889 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #313
11:09:11.889 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1561 which is executed by 626 tests
1033054629
11:09:12.125 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #314
11:09:12.125 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1560 which is executed by 626 tests
1033054629
11:09:12.358 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.1429744396185883> but was:<0.3583837728974761>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:12.660 [pool-887-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (301 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.1429744396185883> but was:<0.3583837728974761>]
java.lang.AssertionError: expected:<0.1429744396185883> but was:<0.3583837728974761>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:13.410 [pool-886-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:872: error: variable yb might not have been initialized
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
                                  ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
11:09:13.410 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #315
11:09:13.411 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1559 which is executed by 626 tests
1033054629
11:09:13.646 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3954099853975525> but was:<0.991145849468936>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:13.943 [pool-889-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (296 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3954099853975525> but was:<0.991145849468936>]
java.lang.AssertionError: expected:<0.3954099853975525> but was:<0.991145849468936>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:14.689 [pool-888-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:854: error: variable ya might not have been initialized
            yb = y - ya;
                     ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
11:09:14.690 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #316
11:09:14.690 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1558 which is executed by 626 tests
1033054629
11:09:14.923 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #317
11:09:14.924 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1557 which is executed by 626 tests
1033054629
11:09:15.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.24646146750787004> but was:<0.6177872830622766>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:15.455 [pool-891-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (298 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.24646146750787004> but was:<0.6177872830622766>]
java.lang.AssertionError: expected:<0.24646146750787004> but was:<0.6177872830622766>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:16.241 [pool-890-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:869: error: variable ya might not have been initialized
        final double aa = lna * ya;
                                ^
FastMath.java:870: error: variable yb might not have been initialized
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
                                  ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
11:09:16.242 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.08586366919275117> but was:<0.21522830096211282>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:16.545 [pool-893-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (297 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.08586366919275117> but was:<0.21522830096211282>]
java.lang.AssertionError: expected:<0.08586366919275117> but was:<0.21522830096211282>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:17.347 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #318
11:09:17.347 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1540 which is executed by 626 tests
1033054629
11:09:17.582 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.26220711778285455> but was:<0.6572557752440041>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:17.955 [pool-897-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (372 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.26220711778285455> but was:<0.6572557752440041>]
java.lang.AssertionError: expected:<0.26220711778285455> but was:<0.6572557752440041>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:18.796 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<2.545831126306096E-5> but was:<6.381452283634545E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:19.114 [pool-901-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (317 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<2.545831126306096E-5> but was:<6.381452283634545E-5>]
java.lang.AssertionError: expected:<2.545831126306096E-5> but was:<6.381452283634545E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:19.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #319
11:09:19.905 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1526 which is executed by 626 tests
1033054629
11:09:20.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.12905265361896637> but was:<0.3234870304774618>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:20.438 [pool-905-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (298 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.12905265361896637> but was:<0.3234870304774618>]
java.lang.AssertionError: expected:<0.12905265361896637> but was:<0.3234870304774618>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:21.222 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.01794543731149235> but was:<0.04498254056560485>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:21.519 [pool-909-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (295 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.01794543731149235> but was:<0.04498254056560485>]
java.lang.AssertionError: expected:<0.01794543731149235> but was:<0.04498254056560485>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:22.310 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #320
11:09:22.310 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1502 which is executed by 626 tests
1033054629
11:09:22.544 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.10711457622350007> but was:<0.26849642538694274>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:22.843 [pool-913-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (297 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.10711457622350007> but was:<0.26849642538694274>]
java.lang.AssertionError: expected:<0.10711457622350007> but was:<0.26849642538694274>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:23.655 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.07256737361620769> but was:<0.18189943052209784>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:23.978 [pool-917-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (322 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.07256737361620769> but was:<0.18189943052209784>]
java.lang.AssertionError: expected:<0.07256737361620769> but was:<0.18189943052209784>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:24.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #321
11:09:24.775 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1490 which is executed by 626 tests
1033054629
11:09:25.008 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0782993048922017> but was:<0.19626725152674618>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:25.308 [pool-921-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0782993048922017> but was:<0.19626725152674618>]
java.lang.AssertionError: expected:<0.0782993048922017> but was:<0.19626725152674618>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:26.098 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<9.274921136422648E-7> but was:<2.32487795655297E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:26.393 [pool-925-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (294 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<9.274921136422648E-7> but was:<2.32487795655297E-6>]
java.lang.AssertionError: expected:<9.274921136422648E-7> but was:<2.32487795655297E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:27.188 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #322
11:09:27.188 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:457 which is executed by 627 tests
1308483921
11:09:27.402 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #323
11:09:27.402 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:456 which is executed by 627 tests
1308483921
11:09:27.612 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3972998796740807> but was:<0.995883111898545>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:27.935 [pool-929-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (322 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3972998796740807> but was:<0.995883111898545>]
java.lang.AssertionError: expected:<0.3972998796740807> but was:<0.995883111898545>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:28.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #324
11:09:28.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1479 which is executed by 627 tests
1033054629
11:09:28.491 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0017668119648261153> but was:<0.004428740826989493>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:28.792 [pool-933-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (300 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0017668119648261153> but was:<0.004428740826989493>]
java.lang.AssertionError: expected:<0.0017668119648261153> but was:<0.004428740826989493>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:29.584 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.2157004066033158> but was:<0.5406807380412747>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:29.880 [pool-937-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (295 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.2157004066033158> but was:<0.5406807380412747>]
java.lang.AssertionError: expected:<0.2157004066033158> but was:<0.5406807380412747>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:30.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #325
11:09:30.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:455 which is executed by 628 tests
1308483921
11:09:30.890 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.34848800104086314> but was:<0.873529876778665>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:31.190 [pool-941-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.34848800104086314> but was:<0.873529876778665>]
java.lang.AssertionError: expected:<0.34848800104086314> but was:<0.873529876778665>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:31.495 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #326
11:09:31.495 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1454 which is executed by 632 tests
1033054629
11:09:31.727 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3825702244754401> but was:<0.9589613417020668>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:32.042 [pool-945-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (314 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3825702244754401> but was:<0.9589613417020668>]
java.lang.AssertionError: expected:<0.3825702244754401> but was:<0.9589613417020668>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:32.833 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.01744002025025097> but was:<0.04371564786941629>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:33.154 [pool-949-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (320 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.01744002025025097> but was:<0.04371564786941629>]
java.lang.AssertionError: expected:<0.01744002025025097> but was:<0.04371564786941629>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:33.965 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #327
11:09:33.965 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1449 which is executed by 632 tests
1033054629
11:09:34.198 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.34943980331897034> but was:<0.8759156912808267>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:34.531 [pool-953-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (331 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.34943980331897034> but was:<0.8759156912808267>]
java.lang.AssertionError: expected:<0.34943980331897034> but was:<0.8759156912808267>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:35.327 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.1625291093567305> but was:<0.4074000609641745>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:35.649 [pool-957-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (321 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.1625291093567305> but was:<0.4074000609641745>]
java.lang.AssertionError: expected:<0.1625291093567305> but was:<0.4074000609641745>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:36.451 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #328
11:09:36.451 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1445 which is executed by 632 tests
1033054629
11:09:36.685 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.36798971351489973> but was:<0.9224134206698092>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:37.018 [pool-961-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (332 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.36798971351489973> but was:<0.9224134206698092>]
java.lang.AssertionError: expected:<0.36798971351489973> but was:<0.9224134206698092>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:37.826 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.4852841589495871E-9> but was:<3.72305526868456E-9>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:38.177 [pool-965-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (350 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.4852841589495871E-9> but was:<3.72305526868456E-9>]
java.lang.AssertionError: expected:<1.4852841589495871E-9> but was:<3.72305526868456E-9>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:38.981 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #329
11:09:38.981 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1443 which is executed by 632 tests
1033054629
11:09:39.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #330
11:09:39.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:473 which is executed by 660 tests
1308483921
11:09:39.425 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #331
11:09:39.425 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:488 which is executed by 661 tests
1308483921
11:09:39.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #332
11:09:39.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:484 which is executed by 661 tests
1308483921
11:09:39.860 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.34845595920435857> but was:<0.8734495598053116>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:40.173 [pool-969-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (311 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.34845595920435857> but was:<0.8734495598053116>]
java.lang.AssertionError: expected:<0.34845595920435857> but was:<0.8734495598053116>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:40.476 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<1.337033834494206E-7> but was:<3.351446813681482E-7>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:40.797 [pool-973-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (320 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.337033834494206E-7> but was:<3.351446813681482E-7>]
java.lang.AssertionError: expected:<1.337033834494206E-7> but was:<3.351446813681482E-7>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:41.109 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #333
11:09:41.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.linear.MatrixUtils:468 which is executed by 661 tests
1308483921
11:09:41.319 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<5.227122976594242E-7> but was:<1.310245424810448E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:41.617 [pool-977-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (297 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<5.227122976594242E-7> but was:<1.310245424810448E-6>]
java.lang.AssertionError: expected:<5.227122976594242E-7> but was:<1.310245424810448E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:41.932 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.033197230240316976> but was:<0.0832131159598138>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:42.235 [pool-981-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (302 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.033197230240316976> but was:<0.0832131159598138>]
java.lang.AssertionError: expected:<0.033197230240316976> but was:<0.0832131159598138>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:42.545 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #334
11:09:42.546 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:3421 which is executed by 674 tests
1033054629
11:09:42.781 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #335
11:09:42.781 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:156 which is executed by 680 tests
-593135567
11:09:42.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0011694728958898263> but was:<0.0029314338272520345>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:43.284 [pool-985-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (300 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0011694728958898263> but was:<0.0029314338272520345>]
java.lang.AssertionError: expected:<0.0011694728958898263> but was:<0.0029314338272520345>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:43.520 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #336
11:09:43.520 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:155 which is executed by 680 tests
-593135567
11:09:43.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<4.320382614768175E-5> but was:<1.082959321940212E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:44.008 [pool-989-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (298 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<4.320382614768175E-5> but was:<1.082959321940212E-4>]
java.lang.AssertionError: expected:<4.320382614768175E-5> but was:<1.082959321940212E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:44.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #337
11:09:44.258 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:899 which is executed by 702 tests
1033054629
11:09:44.501 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.17194529677211476> but was:<0.43100294257880134>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:44.819 [pool-993-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (316 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.17194529677211476> but was:<0.43100294257880134>]
java.lang.AssertionError: expected:<0.17194529677211476> but was:<0.43100294257880134>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:45.572 [pool-992-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:464: error: variable intPartB might not have been initialized
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
                                                  ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
11:09:45.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #338
11:09:45.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:898 which is executed by 702 tests
1033054629
11:09:45.820 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.13987604592744993> but was:<0.35061725166533037>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:46.119 [pool-995-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (297 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.13987604592744993> but was:<0.35061725166533037>]
java.lang.AssertionError: expected:<0.13987604592744993> but was:<0.35061725166533037>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:46.870 [pool-994-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:463: error: variable intPartA might not have been initialized
        double tempA = intPartA * fracPartA;
                       ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
11:09:46.870 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #339
11:09:46.870 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:890 which is executed by 708 tests
1033054629
11:09:47.103 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.26483188282740733> but was:<0.6638350855189432>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:47.438 [pool-997-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (334 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.26483188282740733> but was:<0.6638350855189432>]
java.lang.AssertionError: expected:<0.26483188282740733> but was:<0.6638350855189432>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:48.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.20722331245073788> but was:<0.5194318141517138>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:48.545 [pool-1001-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (317 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.20722331245073788> but was:<0.5194318141517138>]
java.lang.AssertionError: expected:<0.20722331245073788> but was:<0.5194318141517138>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:49.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #340
11:09:49.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:888 which is executed by 708 tests
1033054629
11:09:49.583 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.13915696143437406> but was:<0.34881477414313766>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:49.888 [pool-1005-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (304 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.13915696143437406> but was:<0.34881477414313766>]
java.lang.AssertionError: expected:<0.13915696143437406> but was:<0.34881477414313766>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:50.641 [pool-1004-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:444: error: variable intVal might not have been initialized
            if (intVal > 709) {
                ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
11:09:50.641 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #341
11:09:50.641 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1349 which is executed by 729 tests
1033054629
11:09:50.876 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3272471844395009> but was:<0.8202870453094389>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:51.182 [pool-1007-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (305 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3272471844395009> but was:<0.8202870453094389>]
java.lang.AssertionError: expected:<0.3272471844395009> but was:<0.8202870453094389>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:51.977 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #342
11:09:51.977 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1348 which is executed by 729 tests
1033054629
11:09:52.210 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.04276135741010996> but was:<0.10718682754578347>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:52.510 [pool-1011-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.04276135741010996> but was:<0.10718682754578347>]
java.lang.AssertionError: expected:<0.04276135741010996> but was:<0.10718682754578347>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:53.303 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #343
11:09:53.303 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1294 which is executed by 729 tests
1033054629
11:09:53.541 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #344
11:09:53.541 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1293 which is executed by 729 tests
1033054629
11:09:53.772 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.06002142909846979> but was:<0.15045141126198425>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:54.112 [pool-1015-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (339 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.06002142909846979> but was:<0.15045141126198425>]
java.lang.AssertionError: expected:<0.06002142909846979> but was:<0.15045141126198425>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:54.918 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #345
11:09:54.919 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1292 which is executed by 729 tests
1033054629
11:09:55.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3886909047615614> but was:<0.974303611967235>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:55.489 [pool-1019-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (336 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3886909047615614> but was:<0.974303611967235>]
java.lang.AssertionError: expected:<0.3886909047615614> but was:<0.974303611967235>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:56.298 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #346
11:09:56.298 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1284 which is executed by 729 tests
1033054629
11:09:56.531 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.14580077487951543> but was:<0.3654683447761026>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:56.875 [pool-1023-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (343 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.14580077487951543> but was:<0.3654683447761026>]
java.lang.AssertionError: expected:<0.14580077487951543> but was:<0.3654683447761026>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:57.671 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #347
11:09:57.671 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1283 which is executed by 729 tests
1033054629
11:09:57.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.37574275530830376> but was:<0.9418474144435516>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:58.261 [pool-1027-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (356 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.37574275530830376> but was:<0.9418474144435516>]
java.lang.AssertionError: expected:<0.37574275530830376> but was:<0.9418474144435516>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:09:59.054 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #348
11:09:59.054 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1279 which is executed by 729 tests
1033054629
11:09:59.310 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0021145680951039966> but was:<0.005300436175820292>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:09:59.633 [pool-1031-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (322 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0021145680951039966> but was:<0.005300436175820292>]
java.lang.AssertionError: expected:<0.0021145680951039966> but was:<0.005300436175820292>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:00.420 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #349
11:10:00.420 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1278 which is executed by 729 tests
1033054629
11:10:00.666 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.16259550536869244> but was:<0.4075664910850811>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:00.964 [pool-1035-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (296 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.16259550536869244> but was:<0.4075664910850811>]
java.lang.AssertionError: expected:<0.16259550536869244> but was:<0.4075664910850811>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:01.754 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #350
11:10:01.754 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1277 which is executed by 729 tests
1033054629
11:10:02.000 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0011082472379512584> but was:<0.0027779638619303344>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:02.301 [pool-1039-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0011082472379512584> but was:<0.0027779638619303344>]
java.lang.AssertionError: expected:<0.0011082472379512584> but was:<0.0027779638619303344>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:03.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #351
11:10:03.086 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1275 which is executed by 729 tests
1033054629
11:10:03.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.0196761829317662> but was:<0.049320876473577045>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:03.644 [pool-1043-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (310 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.0196761829317662> but was:<0.049320876473577045>]
java.lang.AssertionError: expected:<0.0196761829317662> but was:<0.049320876473577045>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:04.442 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #352
11:10:04.442 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1274 which is executed by 729 tests
1033054629
11:10:04.675 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.04709737973794791> but was:<0.1180556237121734>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:04.975 [pool-1047-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.04709737973794791> but was:<0.1180556237121734>]
java.lang.AssertionError: expected:<0.04709737973794791> but was:<0.1180556237121734>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:05.771 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #353
11:10:05.771 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1273 which is executed by 729 tests
1033054629
11:10:06.004 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #354
11:10:06.004 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1270 which is executed by 729 tests
1033054629
11:10:06.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.009506150009266608> but was:<0.023828384396111426>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:06.534 [pool-1051-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (297 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.009506150009266608> but was:<0.023828384396111426>]
java.lang.AssertionError: expected:<0.009506150009266608> but was:<0.023828384396111426>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:07.330 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #355
11:10:07.330 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1269 which is executed by 729 tests
1033054629
11:10:07.563 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.16668993026326387> but was:<0.41782969229416683>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:07.863 [pool-1055-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.16668993026326387> but was:<0.41782969229416683>]
java.lang.AssertionError: expected:<0.16668993026326387> but was:<0.41782969229416683>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:08.667 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #356
11:10:08.667 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1268 which is executed by 729 tests
1033054629
11:10:08.901 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<6.161069550789772E-5> but was:<1.5443511137977757E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:09.253 [pool-1059-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (350 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<6.161069550789772E-5> but was:<1.5443511137977757E-4>]
java.lang.AssertionError: expected:<6.161069550789772E-5> but was:<1.5443511137977757E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:10.074 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #357
11:10:10.074 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1266 which is executed by 729 tests
1033054629
11:10:10.307 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.1313962574259353> but was:<0.32936157404454297>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:10.634 [pool-1063-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (326 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.1313962574259353> but was:<0.32936157404454297>]
java.lang.AssertionError: expected:<0.1313962574259353> but was:<0.32936157404454297>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:11.458 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #358
11:10:11.458 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1265 which is executed by 729 tests
1033054629
11:10:11.693 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.5333105777258653E-4> but was:<3.843439647918448E-4>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:12.018 [pool-1067-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (324 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.5333105777258653E-4> but was:<3.843439647918448E-4>]
java.lang.AssertionError: expected:<1.5333105777258653E-4> but was:<3.843439647918448E-4>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:12.823 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #359
11:10:12.824 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1263 which is executed by 729 tests
1033054629
11:10:13.058 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.017995173019232494> but was:<0.04510720949688508>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:13.390 [pool-1071-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (331 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.017995173019232494> but was:<0.04510720949688508>]
java.lang.AssertionError: expected:<0.017995173019232494> but was:<0.04510720949688508>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:14.400 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #360
11:10:14.400 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1261 which is executed by 729 tests
1033054629
11:10:14.690 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #361
11:10:14.691 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1260 which is executed by 729 tests
1033054629
11:10:14.924 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #362
11:10:14.924 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1259 which is executed by 729 tests
1033054629
11:10:15.153 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #363
11:10:15.153 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1256 which is executed by 729 tests
1033054629
11:10:15.383 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.6051213393440398E-7> but was:<4.0234425334133507E-7>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:15.740 [pool-1075-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (355 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.6051213393440398E-7> but was:<4.0234425334133507E-7>]
java.lang.AssertionError: expected:<1.6051213393440398E-7> but was:<4.0234425334133507E-7>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:16.525 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #364
11:10:16.525 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1255 which is executed by 729 tests
1033054629
11:10:16.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.04358110671652524> but was:<0.10924163433535317>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:17.084 [pool-1079-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (326 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.04358110671652524> but was:<0.10924163433535317>]
java.lang.AssertionError: expected:<0.04358110671652524> but was:<0.10924163433535317>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:17.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #365
11:10:17.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1254 which is executed by 729 tests
1033054629
11:10:18.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #366
11:10:18.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1253 which is executed by 729 tests
1033054629
11:10:18.319 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #367
11:10:18.319 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1250 which is executed by 729 tests
1033054629
11:10:18.549 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #368
11:10:18.549 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1249 which is executed by 729 tests
1033054629
11:10:18.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #369
11:10:18.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1248 which is executed by 729 tests
1033054629
11:10:19.013 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #370
11:10:19.013 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1247 which is executed by 729 tests
1033054629
11:10:19.243 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #371
11:10:19.243 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1246 which is executed by 729 tests
1033054629
11:10:19.474 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #372
11:10:19.474 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:831 which is executed by 762 tests
1033054629
11:10:19.703 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #373
11:10:19.704 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:946 which is executed by 776 tests
1033054629
11:10:19.938 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.019799036253781797> but was:<0.04962882408417369>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:20.241 [pool-1083-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (302 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.019799036253781797> but was:<0.04962882408417369>]
java.lang.AssertionError: expected:<0.019799036253781797> but was:<0.04962882408417369>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:20.980 [pool-1082-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:476: error: variable result might not have been initialized
        return result;
               ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
11:10:20.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #374
11:10:20.981 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1179 which is executed by 822 tests
1033054629
11:10:21.216 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.058821632226736906> but was:<0.14744396649948477>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:21.534 [pool-1085-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (317 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.058821632226736906> but was:<0.14744396649948477>]
java.lang.AssertionError: expected:<0.058821632226736906> but was:<0.14744396649948477>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:22.311 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.18081512713059678> but was:<0.45323631014655275>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:22.643 [pool-1089-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (331 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.18081512713059678> but was:<0.45323631014655275>]
java.lang.AssertionError: expected:<0.18081512713059678> but was:<0.45323631014655275>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:23.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #375
11:10:23.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:886 which is executed by 829 tests
1033054629
11:10:23.671 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.3980122340576037> but was:<0.997668719537841>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:23.986 [pool-1093-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (314 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3980122340576037> but was:<0.997668719537841>]
java.lang.AssertionError: expected:<0.3980122340576037> but was:<0.997668719537841>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:24.762 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #376
11:10:24.763 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:884 which is executed by 829 tests
1033054629
11:10:25.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<1.7284582918179882E-6> but was:<4.33260242579137E-6>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:25.317 [pool-1097-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (306 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<1.7284582918179882E-6> but was:<4.33260242579137E-6>]
java.lang.AssertionError: expected:<1.7284582918179882E-6> but was:<4.33260242579137E-6>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:26.052 [pool-1096-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:464: error: variable intPartB might not have been initialized
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
                                                  ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
11:10:26.053 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #377
11:10:26.053 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:883 which is executed by 829 tests
1033054629
11:10:26.300 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.008802244370138258> but was:<0.022063954618400095>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:26.597 [pool-1099-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (295 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.008802244370138258> but was:<0.022063954618400095>]
java.lang.AssertionError: expected:<0.008802244370138258> but was:<0.022063954618400095>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:27.337 [pool-1098-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:463: error: variable intPartA might not have been initialized
        double tempA = intPartA * fracPartA;
                       ^
xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:99)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:67)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:203)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.dumpedToClassLoader(SpoonedFile.java:130)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:140)
	at fr.inria.lille.commons.spoon.SpoonedFile.processedAndDumpedToClassLoader(SpoonedFile.java:135)
	at fr.inria.lille.repair.nopol.synth.dynamoth.DynamothSynthesizer.findAngelicValuesAndBuildPatch(DynamothSynthesizer.java:69)
	at fr.inria.lille.repair.nopol.NoPol.runNopolProcessor(NoPol.java:295)
	at fr.inria.lille.repair.nopol.NoPol.access$000(NoPol.java:81)
	at fr.inria.lille.repair.nopol.NoPol$1.call(NoPol.java:260)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
11:10:27.337 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #378
11:10:27.337 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:881 which is executed by 829 tests
1033054629
11:10:27.570 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.39657999753861284> but was:<0.9940786349833794>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:27.893 [pool-1101-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (322 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.39657999753861284> but was:<0.9940786349833794>]
java.lang.AssertionError: expected:<0.39657999753861284> but was:<0.9940786349833794>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:28.673 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #379
11:10:28.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:871 which is executed by 829 tests
1033054629
11:10:28.905 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.18730350404876878> but was:<0.46950025918610583>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:29.218 [pool-1105-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (311 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.18730350404876878> but was:<0.46950025918610583>]
java.lang.AssertionError: expected:<0.18730350404876878> but was:<0.46950025918610583>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:29.994 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.36671645660787955> but was:<0.9192218389058031>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:30.294 [pool-1109-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.36671645660787955> but was:<0.9192218389058031>]
java.lang.AssertionError: expected:<0.36671645660787955> but was:<0.9192218389058031>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:31.083 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #380
11:10:31.083 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:861 which is executed by 829 tests
1033054629
11:10:31.314 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<0.06342090120298162> but was:<0.15897262415797295>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:31.643 [pool-1113-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (328 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.06342090120298162> but was:<0.15897262415797295>]
java.lang.AssertionError: expected:<0.06342090120298162> but was:<0.15897262415797295>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:32.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<2.6214214428401962E-5> but was:<6.570929108347228E-5>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:32.736 [pool-1117-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (316 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<2.6214214428401962E-5> but was:<6.570929108347228E-5>]
java.lang.AssertionError: expected:<2.6214214428401962E-5> but was:<6.570929108347228E-5>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:33.517 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #381
11:10:33.517 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:853 which is executed by 854 tests
1033054629
11:10:33.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<3.281991701857519E-10> but was:<8.226733196980373E-10>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:34.051 [pool-1121-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (301 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<3.281991701857519E-10> but was:<8.226733196980373E-10>]
java.lang.AssertionError: expected:<3.281991701857519E-10> but was:<8.226733196980373E-10>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

11:10:34.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<0.3946761443461167> but was:<0.9893063827403221>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
11:10:35.156 [pool-1125-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (299 ms)
<> Total tests run: 5
<> Ignored tests: 0
<> Failed tests: 1
~ testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)
[expected:<0.3946761443461167> but was:<0.9893063827403221>]
java.lang.AssertionError: expected:<0.3946761443461167> but was:<0.9893063827403221>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:494)
    at org.junit.Assert.assertEquals(Assert.java:592)
    at org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(MultivariateNormalDistributionTest.java:151)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

Name     StrictMath      FastMath          Math Runs=10000000 Java 1.8.0_181 (1.8.0_181-8u181-b13-2~deb9u1-b13) OpenJDK 64-Bit Server VM (25.181-b13)
log (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 8.07607231e-05 6.49192091e-06 8.0761e+02 1.0000e+00  0.00000000e+00
      Math 3.30592911e-05 7.68472451e-06 3.3059e+02 4.0935e-01 -4.77014320e+02
  FastMath 5.21562760e-05 1.49324618e-05 5.2156e+02 6.4581e-01 -2.86044471e+02
log10 (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 1.08624994e-04 2.95084891e-06 1.0862e+03 1.0000e+00  0.00000000e+00
      Math 3.28080244e-05 3.87592482e-06 3.2808e+02 3.0203e-01 -7.58169698e+02
  FastMath 1.26286321e-04 7.07130976e-06 1.2629e+03 1.1626e+00  1.76613264e+02
log1p (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 6.35843796e-05 5.74640767e-06 6.3584e+02 1.0000e+00  0.00000000e+00
      Math 6.33502071e-05 2.96782951e-06 6.3350e+02 9.9632e-01 -2.34172500e+00
  FastMath 1.28416893e-04 4.07845572e-06 1.2842e+03 2.0196e+00  6.48325131e+02
pow (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 2.72009678e-04 1.18411615e-06 2.7201e+03 1.0000e+00  0.00000000e+00
      Math 1.00702442e-04 2.20018859e-05 1.0070e+03 3.7022e-01 -1.71307236e+03
  FastMath 1.92582182e-04 8.45847161e-05 1.9258e+03 7.0800e-01 -7.94274967e+02
exp (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 7.67769254e-05 1.38292099e-06 7.6777e+02 1.0000e+00  0.00000000e+00
      Math 8.51117583e-05 1.20747409e-04 8.5112e+02 1.1086e+00  8.33483290e+01
  FastMath 3.37565940e-05 8.26152877e-07 3.3757e+02 4.3967e-01 -4.30203314e+02
sin (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 4.47807937e-05 5.57061168e-06 4.4781e+02 1.0000e+00  0.00000000e+00
      Math 4.54341358e-05 7.92996511e-07 4.5434e+02 1.0146e+00  6.53342100e+00
  FastMath 4.17289169e-05 6.50579381e-07 4.1729e+02 9.3185e-01 -3.05187680e+01
asin (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 5.52528449e-05 1.11742173e-06 5.5253e+02 1.0000e+00  0.00000000e+00
      Math 5.52373000e-05 9.17994724e-07 5.5237e+02 9.9972e-01 -1.55449000e-01
  FastMath 1.56238766e-04 2.94271465e-06 1.5624e+03 2.8277e+00  1.00985921e+03
cos (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 5.43697461e-05 1.27419381e-06 5.4370e+02 1.0000e+00  0.00000000e+00
      Math 4.53759780e-05 7.93576606e-07 4.5376e+02 8.3458e-01 -8.99376810e+01
  FastMath 4.63375078e-05 5.86977966e-07 4.6338e+02 8.5227e-01 -8.03223830e+01
acos (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 5.81228569e-05 1.22757179e-06 5.8123e+02 1.0000e+00  0.00000000e+00
      Math 5.80833269e-05 9.57167429e-07 5.8083e+02 9.9932e-01 -3.95300000e-01
  FastMath 1.69296898e-04 2.91369467e-06 1.6930e+03 2.9127e+00  1.11174041e+03
tan (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 6.65674250e-05 8.68788809e-07 6.6567e+02 1.0000e+00  0.00000000e+00
      Math 5.44367664e-05 8.27450821e-07 5.4437e+02 8.1777e-01 -1.21306586e+02
  FastMath 7.92273412e-05 2.63612151e-06 7.9227e+02 1.1902e+00  1.26599162e+02
atan (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 4.43315208e-05 1.10114698e-06 4.4332e+02 1.0000e+00  0.00000000e+00
      Math 4.43049867e-05 8.70406747e-07 4.4305e+02 9.9940e-01 -2.65341000e-01
  FastMath 8.26398130e-05 1.96801970e-06 8.2640e+02 1.8641e+00  3.83082922e+02
atan2 (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 1.17012910e-04 1.25322962e-06 1.1701e+03 1.0000e+00  0.00000000e+00
      Math 1.17120069e-04 2.40800162e-06 1.1712e+03 1.0009e+00  1.07159700e+00
  FastMath 1.11430188e-04 6.09505348e-06 1.1143e+03 9.5229e-01 -5.58272190e+01
hypot (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 5.50200776e-04 2.82363610e-06 5.5020e+03 1.0000e+00  0.00000000e+00
      Math 5.50945749e-04 3.15920487e-06 5.5095e+03 1.0014e+00  7.44972900e+00
  FastMath 3.20603048e-05 1.18578479e-05 3.2060e+02 5.8270e-02 -5.18140471e+03
cbrt (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 1.13911263e-04 8.74169009e-07 1.1391e+03 1.0000e+00  0.00000000e+00
      Math 1.14012997e-04 1.33953840e-06 1.1401e+03 1.0009e+00  1.01734100e+00
  FastMath 7.30004287e-05 1.46958376e-06 7.3000e+02 6.4085e-01 -4.09108344e+02
sqrt (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 1.50903208e-05 1.68788514e-06 1.5090e+02 1.0000e+00  0.00000000e+00
      Math 1.50004409e-05 8.26310741e-07 1.5000e+02 9.9404e-01 -8.98799000e-01
  FastMath 1.50296570e-05 9.25594578e-07 1.5030e+02 9.9598e-01 -6.06638000e-01
cosh (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 1.04621340e-04 2.69260661e-06 1.0462e+03 1.0000e+00  0.00000000e+00
      Math 1.04557477e-04 2.65586111e-06 1.0456e+03 9.9939e-01 -6.38631000e-01
  FastMath 7.27439714e-05 4.74668512e-06 7.2744e+02 6.9531e-01 -3.18773686e+02
sinh (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 1.23262685e-04 2.65673808e-06 1.2326e+03 1.0000e+00  0.00000000e+00
      Math 1.23213524e-04 2.65671895e-06 1.2321e+03 9.9960e-01 -4.91608000e-01
  FastMath 7.60997581e-05 4.23655559e-06 7.6100e+02 6.1738e-01 -4.71629268e+02
tanh (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 1.19739907e-04 2.70517504e-06 1.1974e+03 1.0000e+00  0.00000000e+00
      Math 1.19579137e-04 2.68067689e-06 1.1958e+03 9.9866e-01 -1.60770300e+00
  FastMath 1.06532506e-04 6.96887886e-06 1.0653e+03 8.8970e-01 -1.32074012e+02
expm1 (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 8.61813626e-05 1.11204779e-06 8.6181e+02 1.0000e+00  0.00000000e+00
      Math 8.61474413e-05 8.66567022e-07 8.6147e+02 9.9961e-01 -3.39213000e-01
  FastMath 5.54925885e-05 6.21972140e-06 5.5493e+02 6.4390e-01 -3.06887741e+02
abs (calls per timed block: 100000, timed blocks: 100, time unit: ms)
      name      time/call      std error total time      ratio      difference
StrictMath 1.21216064e-05 1.42751013e-06 1.2122e+02 1.0000e+00  0.00000000e+00
      Math 1.21446103e-05 1.00994422e-06 1.2145e+02 1.0019e+00  2.30039000e-01
  FastMath 1.21335146e-05 1.16932771e-06 1.2134e+02 1.0010e+00  1.19082000e-01
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.addExact(int,int)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.addExact(long,long)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.multiplyExact(int,int)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.multiplyExact(long,long)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.subtractExact(long,long)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.subtractExact(int,int)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.toIntExact(long)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.floorDiv(long,long)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.floorDiv(int,int)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.floorMod(int,int)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.floorMod(long,long)
Cannot find FastMath method corresponding to: public static float java.lang.StrictMath.nextDown(float)
Cannot find FastMath method corresponding to: public static double java.lang.StrictMath.nextDown(double)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.addExact(int,int)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.addExact(long,long)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.multiplyExact(int,int)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.multiplyExact(long,long)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.subtractExact(long,long)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.subtractExact(int,int)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.toIntExact(long)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.floorDiv(long,long)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.floorDiv(int,int)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.floorMod(int,int)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.floorMod(long,long)
Cannot find FastMath method corresponding to: public static float java.lang.StrictMath.nextDown(float)
Cannot find FastMath method corresponding to: public static double java.lang.StrictMath.nextDown(double)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.addExact(int,int)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.addExact(long,long)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.multiplyExact(int,int)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.multiplyExact(long,long)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.subtractExact(long,long)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.subtractExact(int,int)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.toIntExact(long)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.floorDiv(long,long)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.floorDiv(int,int)
Cannot find FastMath method corresponding to: public static int java.lang.StrictMath.floorMod(int,int)
Cannot find FastMath method corresponding to: public static long java.lang.StrictMath.floorMod(long,long)
Cannot find FastMath method corresponding to: public static float java.lang.StrictMath.nextDown(float)
Cannot find FastMath method corresponding to: public static double java.lang.StrictMath.nextDown(double)
11:12:23.417 [pool-1124-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math3.distribution.ChiSquaredDistributionTest#testIllegalArguments
11:12:23.430 [pool-1124-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest#testIncFirst
11:12:23.502 [pool-1124-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest#testMulBothRev
11:15:43.507 [pool-1124-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
11:19:03.509 [pool-1124-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
11:24:16.018 [pool-1124-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
11:24:16.040 [pool-1124-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math3.random.AbstractRandomGeneratorTest#testNextUniformUniformMaximalInterval
11:27:36.079 [pool-1124-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
11:30:56.101 [pool-1124-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
11:30:56.111 [pool-1124-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math3.random.BitsStreamGeneratorTest#testNexBytes
11:30:56.111 [pool-1124-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math3.stat.inference.GTestTest#testGTestSetsComparisonBadCounts
11:30:56.112 [pool-1124-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math3.distribution.PoissonDistributionTest#testNegativeMean
11:34:17.964 [pool-1124-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
11:34:17.977 [pool-1124-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math3.distribution.GammaDistributionTest#testConsistency
11:34:18.017 [pool-1124-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math3.distribution.UniformRealDistributionTest#testSampling
11:34:18.029 [pool-1124-thread-1] DEBUG f.i.l.r.n.s.d.DynamothSynthesizer - Ignore the test org.apache.commons.math3.random.BitsStreamGeneratorTest#testNextCauchy
11:37:00.670 [main] ERROR fr.inria.lille.repair.Main - Timeout: execution time > 60 MINUTES
java.util.concurrent.TimeoutException: null
	at java.util.concurrent.FutureTask.get(FutureTask.java:205) ~[na:1.8.0_181]
	at fr.inria.lille.repair.Main.main(Main.java:106) ~[nopol.jar:na]
TIMEOUT
Command exited with non-zero status 255
7076.95user 64.26system 1:00:10elapsed 197%CPU (0avgtext+0avgdata 4775948maxresident)k
51088inputs+12960outputs (4major+1598830minor)pagefaults 0swaps


Node: graphene-79.nancy.grid5000.fr



Date: Sat Dec  1 11:37:01 EST 2018

