{
  "repair_end": "2018-12-02 21:11:04.399952", 
  "repair_begin": "2018-12-02 20:00:24.233296", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1255, 
          "faulty": "double sum=0d;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1547/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:33.616719993 -0500\n@@ -1246,13 +1246,15 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         final int splitFactor = 0x8000001;\n+\t\tdouble sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n@@ -1266,7 +1268,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1547/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:33.620720163 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_316/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:01.337673245 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_316/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:01.337673245 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final double p=getProbabilityOfSuccess();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1305/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:35.143682417 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1305/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:35.147682587 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1362/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:03.292880203 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1362/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:03.292880203 -0500\n@@ -184,11 +184,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_814/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:17.832701637 -0500\n@@ -179,16 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int j = 1;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1698/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:47.251846728 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1262, 
          "faulty": "if (!Double.isNaN(values[i])) {\n  sum+=values[i];\n}", 
          "type": "InsertBefore", 
          "seed": "int result=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_243/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:58:25.580152833 -0500\n@@ -1259,7 +1259,8 @@\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n-             if (!Double.isNaN(values[i])) {\n+             int result = 1;\n+\t\t\tif (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_243/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:25.584153001 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "final double r=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final double m=getNumberOfSuccesses();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_981/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:42.512322559 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_981/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:42.516322728 -0500\n@@ -179,16 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double t = 0;\n+\t\tfinal double r = random.nextDouble();\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1056/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:20.649950822 -0500\n@@ -179,15 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double sum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_964/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:34.023959950 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1461/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:50.598891899 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1461/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:50.602892069 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_479/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:26.373341355 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        int max = Integer.MIN_VALUE;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -187,7 +188,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double sum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_636/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:48.496872034 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_636/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:48.500872207 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return getMean();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1419/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:30.654043923 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1419/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:30.658044093 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_903/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:01.710578875 -0500\n@@ -1246,7 +1246,11 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t\t}\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1256,7 +1260,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1275,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_903/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:01.714579046 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double sum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 157, 
          "faulty": "final double randomValue=random.nextDouble();", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double r=getNumberOfSuccesses();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_497/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:36.637783243 -0500\n@@ -154,7 +154,8 @@\n      * @return a random value.\n      */\n     public T sample() {\n-        final double randomValue = random.nextDouble();\n+        int min = Integer.MAX_VALUE;\n+\t\tfinal double randomValue = random.nextDouble();\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n@@ -179,15 +180,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_638/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:49.144899853 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_119/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:08.760918753 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double sum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "final double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_932/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:17.343247158 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_932/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:17.347247328 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                final double u2 = random.nextDouble();\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1271/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:18.598978147 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1270,7 +1271,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1271/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:18.602978317 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1258/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:12.254708030 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double qi = 0;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,9 +187,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double t = 0;\n+\t\tdouble v = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1182/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:29.120870696 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1182/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:29.124870866 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_756/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:49.219476211 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final double m=getNumberOfSuccesses();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1398/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:20.249601463 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1398/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:20.253601633 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double value = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_830/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:26.025052305 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_830/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:26.029052476 -0500\n@@ -159,8 +159,10 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n-                return singletons.get(i);\n+            double u2 = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +181,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double r=getNumberOfSuccesses();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_568/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:13.159354096 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1386/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:15.013378759 -0500\n@@ -1266,14 +1266,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1386/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:15.013378759 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1263, 
          "faulty": "sum+=values[i];", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1686/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:41.351596296 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1260,10 +1261,12 @@\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n-                 sum += values[i];\n+                 int newSize = 0;\n+\t\t\t\tsum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1686/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:41.355596465 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_142/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:22.781509061 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return FastMath.max(0,getSampleSize() + getNumberOfSuccesses() - getPopulationSize());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1365/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:04.676939082 -0500\n@@ -1270,10 +1270,12 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1365/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:04.676939082 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_231/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:19.067878687 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            int min = Integer.MAX_VALUE;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double sigma=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_452/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:11.312692661 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1338/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:50.800348700 -0500\n@@ -1256,21 +1256,24 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1338/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:50.804348870 -0500\n@@ -179,18 +179,11 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\tdouble qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_334/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:11.930130913 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1600/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:00.117845642 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double v = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +186,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1511/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:14.775919470 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1511/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:14.779919640 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1255, 
          "faulty": "double sum=0d;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1562/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:41.917072598 -0500\n@@ -1246,13 +1246,15 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         final int splitFactor = 0x8000001;\n+\t\tdouble sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n@@ -1266,7 +1268,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1562/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:41.917072598 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1573/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:47.397305382 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1573/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:47.401305550 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_372/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:31.994997248 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_355/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:23.814644141 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_908/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:03.770666956 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_908/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:03.774667127 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1554/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:37.224873275 -0500\n@@ -1263,7 +1263,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1554/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:37.228873445 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1064/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:24.410111281 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1053/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:19.073883560 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1053/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:19.077883732 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1437/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:39.090402635 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1437/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:39.090402635 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int k=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_826/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:23.296935539 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int k = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_826/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:23.300935710 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1012/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:58.529006558 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1012/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:58.529006558 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1144/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:09.092017019 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1144/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:09.092017019 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_418/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:54.107951126 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1068/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:26.362194579 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1068/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:26.366194751 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_833/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:27.645121642 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_833/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:27.649121813 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1257, 
          "faulty": "double[] out=new double[len];", 
          "type": "InsertBefore", 
          "seed": "final double small=1e-50;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1450/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:45.910692598 -0500\n@@ -1246,17 +1246,21 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n-         double[] out = new double[len];\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n+         final double small = 1e-50;\n+\t\tdouble[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1450/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:45.914692768 -0500\n@@ -184,13 +184,12 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "recomputeZ();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1284/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:25.579275308 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 2 * getDegreesOfFreedom();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double s=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1606/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:02.849961667 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1606/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:02.849961667 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double s = Double.NaN;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_433/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:02.780324977 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_433/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:02.784325151 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_961/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:32.647901161 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_961/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:32.651901331 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 157, 
          "faulty": "final double randomValue=random.nextDouble();", 
          "type": "InsertBefore", 
          "seed": "int a=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1705/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:51.460025332 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1705/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:51.464025500 -0500\n@@ -154,7 +154,8 @@\n      * @return a random value.\n      */\n     public T sample() {\n-        final double randomValue = random.nextDouble();\n+        int a = 0;\n+\t\tfinal double randomValue = random.nextDouble();\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_799/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:11.012409635 -0500\n@@ -179,16 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int j = 1;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "double value=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_272/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:39.520739671 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1519/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:19.008099310 -0500\n@@ -1273,7 +1273,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1519/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:19.012099478 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1621/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:10.386281693 -0500\n@@ -184,11 +184,9 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_664/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:01.049410789 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double v = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_783/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:02.188031745 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1272,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_783/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:02.188031745 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_448/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:09.952634060 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_448/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:09.956634234 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double probability = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_811/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:16.460642898 -0500\n@@ -179,16 +179,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double res = 1;\n+\t\tint j = 1;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1707/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:52.108052834 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,9 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double value=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1433/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:37.698343448 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double value = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "InsertBefore", 
          "seed": "int a=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_521/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:47.046231149 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_521/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:47.046231149 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,14 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n+        int a = 0;\n+\t\tif (sampleSize <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                     sampleSize);\n         }\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double r=1.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1472/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:55.343093565 -0500\n@@ -179,16 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double r = 1.0d;\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1082/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:34.630547358 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1082/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:34.634547529 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_729/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:36.098913941 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "final double facta=0.01745329052209854;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_526/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:48.854308938 -0500\n@@ -1273,7 +1273,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         final double facta = 0.01745329052209854;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_526/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:48.858309110 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_795/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:09.684352770 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_795/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:09.688352941 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1224/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:51.709833086 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double qi = 0;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_865/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:43.677807647 -0500\n@@ -1246,7 +1246,11 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t\t}\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1256,7 +1260,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1275,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_865/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:43.681807818 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1209/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:43.169469278 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1209/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:43.169469278 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_697/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:19.130186422 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_697/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:19.130186422 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double s=getStandardDeviation();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1255, 
          "faulty": "double sum=0d;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1111/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:51.779278827 -0500\n@@ -1252,7 +1252,8 @@\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         double lnzb = 0.0;\n+\t\tdouble sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1111/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:51.783278997 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_538/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:55.750605587 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_23/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:05.366249394 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "final double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1254/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:10.246622527 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1254/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:10.250622697 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        final double u2 = random.nextDouble();\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_472/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:22.473173405 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1528/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:24.112316188 -0500\n@@ -1270,10 +1270,12 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1528/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:24.112316188 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1504/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:11.343773619 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1504/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:11.347773789 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1319/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:41.971973022 -0500\n@@ -1266,14 +1266,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1319/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:41.971973022 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,15 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double max = Double.NEGATIVE_INFINITY;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_252/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:29.968337558 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1357/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:00.876777417 -0500\n@@ -1273,7 +1273,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1357/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:00.876777417 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double sum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1151/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:13.100187883 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1255, 
          "faulty": "double sum=0d;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1495/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:06.911585260 -0500\n@@ -1252,7 +1252,8 @@\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         final int splitFactor = 0x8000001;\n+\t\tdouble sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1495/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:06.915585430 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_819/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:20.512816366 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n@@ -1270,7 +1271,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_819/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:20.516816537 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_925/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:13.235071563 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_925/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:13.239071734 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_653/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:56.345208911 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_653/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:56.349209083 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double meanOfSquares=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_308/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:58:57.937526286 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_308/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:57.941526459 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1444/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:42.470546345 -0500\n@@ -1270,10 +1270,12 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1444/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:42.470546345 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1263/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:15.026826061 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1263/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:15.030826231 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_258/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:33.040466882 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1452/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:46.566720488 -0500\n@@ -179,17 +179,13 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1161/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:17.836389768 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1272,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1161/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:17.840389938 -0500\n@@ -186,11 +186,9 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\tdouble qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1693/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:44.679737558 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1693/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:44.683737730 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "double weightSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final List<Pair<T,Double>> samples=new ArrayList<Pair<T,Double>>(probabilities.length);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1689/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:42.687653006 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1689/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:42.691653175 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_955/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:29.815780156 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n@@ -1270,7 +1271,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_955/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:29.815780156 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_753/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:47.887419136 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_753/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:47.887419136 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        int min = Integer.MAX_VALUE;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_983/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:43.184351262 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_983/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:43.184351262 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_154/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:29.529793177 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "Replace", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_138/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:57:20.301404644 -0500\n@@ -1247,8 +1247,9 @@\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n          if (Double.isInfinite(normalizedSum)) {\n-             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n-         }\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_138/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:20.305404812 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double sum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1255, 
          "faulty": "double sum=0d;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_108/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:57:01.508613403 -0500\n@@ -1252,7 +1252,11 @@\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tdouble sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_108/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:01.512613571 -0500\n@@ -184,11 +184,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int max = Integer.MIN_VALUE;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1652/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:24.606885478 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1118/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:55.807450606 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1579/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:50.865452687 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1579/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:50.869452857 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_974/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:39.820207563 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_974/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:39.820207563 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_292/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:58:48.777130247 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_292/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:48.781130420 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1371/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:07.993080148 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1266,14 +1267,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1371/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:07.997080318 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +181,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_623/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:41.196558601 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_623/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:41.200558771 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_558/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:06.267057811 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_558/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:06.267057811 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1661/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:29.219081282 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1257, 
          "faulty": "double[] out=new double[len];", 
          "type": "InsertBefore", 
          "seed": "final double small=1e-50;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1417/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:29.986015516 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n-         double[] out = new double[len];\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n+         final double small = 1e-50;\n+\t\tdouble[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1273,7 +1276,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1417/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:29.986015516 -0500\n@@ -184,13 +184,11 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double min = Double.POSITIVE_INFINITY;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_48/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:23.367007397 -0500\n@@ -159,8 +159,10 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n-                return singletons.get(i);\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n+                int max = Integer.MIN_VALUE;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +188,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double[] hiPrec=new double[2];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1347/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:55.504548856 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double[] hiPrec = new double[2];\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n@@ -1270,10 +1271,12 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1347/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:55.508549027 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_409/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:50.011774499 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_409/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:50.015774673 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        long n = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double probability = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_894/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:56.842370707 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_894/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:56.846370878 -0500\n@@ -186,8 +186,9 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+        double t = 0;\n+\t\tfor (int i = 0; i < sampleSize; i++) {\n+            double sum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1439/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:39.762431208 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1439/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:39.766431378 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_863/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:43.005778899 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_863/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:43.009779070 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "InsertBefore", 
          "seed": "double meanOfSquares=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_702/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:21.962307874 -0500\n@@ -179,16 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double meanOfSquares = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double value = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_533/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:53.094491341 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_533/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:53.098491513 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1313/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:39.311859816 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1313/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:39.315859986 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_460/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:16.316908247 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1424/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:32.670129651 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_843/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:32.561332029 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_843/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:32.565332200 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,11 +187,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "final double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1207/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:42.485440137 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1207/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:42.485440137 -0500\n@@ -179,18 +179,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        final double u2 = random.nextDouble();\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double y=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1024/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:04.677269054 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1024/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:04.681269225 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +181,11 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double y = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1493/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:06.163553469 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1266,7 +1267,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1493/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:06.163553469 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double value=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_515/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:43.926096899 -0500\n@@ -179,16 +179,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double value = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "final double facta=0.01745329052209854;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_586/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:22.459753783 -0500\n@@ -1273,7 +1273,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         final double facta = 0.01745329052209854;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_586/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:22.463753955 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1045/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:15.161716593 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tdouble zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1266,7 +1269,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1045/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:15.165716765 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +181,13 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\tdouble qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1716/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:56.348232784 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,14 +1264,16 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1716/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:56.352232955 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double v = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1672/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:34.715314601 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1672/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:34.719314771 -0500\n@@ -184,11 +184,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1636/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:17.746594215 -0500\n@@ -1266,11 +1266,13 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1636/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:17.750594384 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_744/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:43.427228017 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_744/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:43.431228188 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_185/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:49.890650380 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_689/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:14.894004738 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double value=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1280/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:23.547188802 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double value = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double s=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1645/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:21.754764390 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double s = Double.NaN;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_733/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:38.030996753 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_733/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:38.034996924 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_470/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:21.829145669 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double rnd=1.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_198/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:58.186999649 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double rnd = 1.0d;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -187,7 +188,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            int min = Integer.MAX_VALUE;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int k=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_777/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:58.615878747 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int k = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_777/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:58.615878747 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1265/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:15.750856887 -0500\n@@ -1266,14 +1266,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1265/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:15.754857058 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "final double facta=0.01745329052209854;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double t=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_590/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:23.803811533 -0500\n@@ -1273,7 +1273,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         final double facta = 0.01745329052209854;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_590/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:23.807811706 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final double denominatorDF=getDenominatorDegreesOfFreedom();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1544/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:32.240661533 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1266,7 +1267,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1544/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:32.240661533 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "recomputeZ();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1663/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:29.995114226 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1663/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:29.995114226 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double y=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_886/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:53.342221021 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n@@ -1266,7 +1267,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_886/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:53.346221192 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,13 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double y = 0;\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int j = 1;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double value=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_657/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:58.313293375 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        int max = Integer.MIN_VALUE;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double value = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_387/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:40.435361444 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_488/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:31.073543723 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_897/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:58.346435025 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_897/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:58.350435195 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_288/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:47.381070549 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1624/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:11.762340124 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1624/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:11.766340293 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double v = 0;\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_735/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:38.735026927 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_735/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:38.739027098 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_804/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:13.616521132 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1272,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_804/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:13.616521132 -0500\n@@ -179,18 +179,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_277/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:41.492822686 -0500\n@@ -179,18 +179,13 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1674/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:35.383342958 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1674/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:35.387343128 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_396/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:44.451534693 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1310/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:37.907800060 -0500\n@@ -1266,14 +1266,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1310/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:37.911800230 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,15 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double max = Double.NEGATIVE_INFINITY;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 161, 
          "faulty": "sum+=probabilities[i];", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_806/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:14.348552475 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_806/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:14.352552646 -0500\n@@ -157,8 +157,10 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n-            sum += probabilities[i];\n+        int min = Integer.MAX_VALUE;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n+            double a = 0;\n+\t\t\tsum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n             }\n@@ -179,17 +181,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_669/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:03.921534029 -0500\n@@ -159,8 +159,10 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n-                return singletons.get(i);\n+            double u2 = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +181,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_874/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:47.501971231 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_874/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:47.501971231 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1630/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:14.390451716 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1630/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:14.394451885 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_349/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:20.662508044 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double value=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1391/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:17.229473015 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double value = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_760/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:51.119557618 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -180,15 +181,10 @@\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n         if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_849/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:35.625463142 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1272,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_849/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:35.629463313 -0500\n@@ -179,18 +179,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double y=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_936/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:19.455337427 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_936/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:19.459337598 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1263, 
          "faulty": "sum+=values[i];", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1728/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:11:02.544495733 -0500\n@@ -1260,10 +1260,12 @@\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n-                 sum += values[i];\n+                 int newSize = 0;\n+\t\t\t\tsum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1728/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:11:02.548495904 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1189/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:31.892988823 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1189/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:31.896988993 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "continue;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_499/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:37.293811479 -0500\n@@ -179,15 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            continue;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1229/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:54.473950820 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double qi = 0;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,9 +187,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double v = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1612/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:05.674081596 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1612/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:05.674081596 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_876/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:48.190000660 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_876/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:48.194000831 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,11 +188,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1641/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:19.818682190 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1641/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:19.818682190 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double qa=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_152/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:28.881765894 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double qa = 0;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double meanOfSquares=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_234/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:20.411935269 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_3/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:55:52.289698723 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "double weightSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final List<Pair<T,Double>> samples=new ArrayList<Pair<T,Double>>(probabilities.length);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1711/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:54.292145526 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1711/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:54.292145526 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double n=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_202/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:00.387092270 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        int min = Integer.MAX_VALUE;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1257, 
          "faulty": "double[] out=new double[len];", 
          "type": "InsertBefore", 
          "seed": "final double small=1e-50;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1410/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:26.517868036 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n-         double[] out = new double[len];\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n+         final double small = 1e-50;\n+\t\tdouble[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1410/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:26.525868376 -0500\n@@ -179,18 +179,15 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1376/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:10.817200277 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1376/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:10.821200447 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "double value=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_261/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:34.588532049 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_89/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:48.904082688 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_573/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:16.363491810 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_573/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:16.363491810 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_274/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:40.212768802 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1378/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:11.529230564 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1378/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:11.533230734 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,13 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        int min = Integer.MAX_VALUE;\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1604/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:02.101929902 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1272,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1604/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:02.101929902 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,13 +185,11 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qa=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_321/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:03.949786127 -0500\n@@ -179,15 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+        double qa = 0;\n+\t\tfor (int i = 0; i < sampleSize; i++) {\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_327/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:07.941958622 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,8 +187,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+        double v = 0;\n+\t\tfor (int i = 0; i < sampleSize; i++) {\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "double xb=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1290/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:28.963419361 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1273,7 +1274,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         double xb = 0.0;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1290/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:28.967419532 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final double m=getNumberOfSuccesses();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1328/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:46.048146485 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1270,7 +1271,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1328/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:46.052146655 -0500\n@@ -179,18 +179,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double value = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_501/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:37.933839026 -0500\n@@ -179,15 +179,11 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double qi = 0;\n+\t\t\tdouble sum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1296/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:31.675534803 -0500\n@@ -1270,10 +1270,12 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1296/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:31.675534803 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_430/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:01.456267909 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_430/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:01.460268080 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_177/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:44.946442230 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -187,7 +188,8 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            long n = 0;\n+\t\t\tint min = Integer.MAX_VALUE;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_541/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:57.074662532 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_541/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:57.078662704 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double[] vals = null;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +188,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1203/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:40.425352370 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1028/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:05.993325238 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double rnd=1.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1123/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:58.503565574 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1123/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:58.507565744 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double rnd = 1.0d;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "final double facta=0.01745329052209854;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double m=getNumberOfSuccesses();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_672/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:05.341594957 -0500\n@@ -1273,7 +1273,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         final double facta = 0.01745329052209854;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_672/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:05.341594957 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double res = 1;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1468/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:54.031037795 -0500\n@@ -184,11 +184,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1395/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:18.773538686 -0500\n@@ -1266,14 +1266,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1395/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:18.777538856 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double min = Double.POSITIVE_INFINITY;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_676/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:07.349681110 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1266,7 +1268,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_676/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:07.353681283 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_593/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:25.151869453 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sh=getShape();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1596/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:58.125761042 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1428/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:34.782219458 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1428/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:34.782219458 -0500\n@@ -184,11 +184,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double n=getSampleSize();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1586/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:53.541566348 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1586/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:53.545566518 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 161, 
          "faulty": "sum+=probabilities[i];", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 161, 
          "faulty": "sum+=probabilities[i];", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_821/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:21.248847872 -0500\n@@ -157,8 +157,11 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n-            sum += probabilities[i];\n+        int min = Integer.MAX_VALUE;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n+            double a = 0;\n+\t\t\tdouble probability = 0;\n+\t\t\tsum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n             }\n@@ -179,17 +182,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_245/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:26.228180112 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "final double u=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_365/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:29.258879157 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n@@ -1263,7 +1264,11 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_365/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:29.258879157 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        final double u = random.nextDouble();\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1480/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:00.071294538 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1480/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:00.071294538 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1330/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:46.772177295 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            long n = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1655/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:26.070947634 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,14 +1264,16 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1655/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:26.074947804 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double v = 0;\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_440/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:05.540443933 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double probability = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1238/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:01.106233291 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1270,7 +1271,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1238/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:01.106233291 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1721/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:58.528325302 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1270,7 +1271,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1721/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:58.532325473 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double sh=getShape();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1325/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:44.684088439 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1273,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1325/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:44.688088609 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double qi = 0;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -179,18 +180,11 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\tdouble qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_687/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:14.245976943 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1542/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:31.524631113 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1257, 
          "faulty": "double[] out=new double[len];", 
          "type": "InsertBefore", 
          "seed": "final double small=1e-50;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1384/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:14.289347965 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n-         double[] out = new double[len];\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n+         final double small = 1e-50;\n+\t\tdouble[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1384/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:14.289347965 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1270, 
          "faulty": "if (Double.isNaN(values[i])) {\n  out[i]=Double.NaN;\n}\n else {\n  out[i]=values[i] * normalizedSum / sum;\n}", 
          "type": "InsertBefore", 
          "seed": "boolean negative=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1293/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:30.291475892 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1267,7 +1268,8 @@\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n-             if (Double.isNaN(values[i])) {\n+             boolean negative = false;\n+\t\t\tif (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1293/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:30.291475892 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_411/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:50.691803825 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_411/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:50.691803825 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_949/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:26.383633504 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_949/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:26.387633675 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "double value=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_578/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:18.459581891 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_578/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:18.459581891 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1026/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:05.349297743 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1026/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:05.353297914 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1486/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:02.727407430 -0500\n@@ -1273,7 +1273,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1486/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:02.731407600 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_86/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:47.348017170 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        long n = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_46/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:22.358964949 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_913/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:05.886757428 -0500\n@@ -1246,7 +1246,11 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t\t}\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_913/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:05.890757600 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double sum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 157, 
          "faulty": "final double randomValue=random.nextDouble();", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_513/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:43.254067982 -0500\n@@ -154,8 +154,10 @@\n      * @return a random value.\n      */\n     public T sample() {\n-        final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        int min = Integer.MAX_VALUE;\n+\t\tfinal double randomValue = random.nextDouble();\n+        int max = Integer.MIN_VALUE;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,15 +181,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1018/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:01.833147631 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1018/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:01.837147802 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -186,11 +187,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 157, 
          "faulty": "final double randomValue=random.nextDouble();", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double r=getNumberOfSuccesses();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_504/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:39.233894978 -0500\n@@ -154,7 +154,8 @@\n      * @return a random value.\n      */\n     public T sample() {\n-        final double randomValue = random.nextDouble();\n+        int min = Integer.MAX_VALUE;\n+\t\tfinal double randomValue = random.nextDouble();\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1506/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:12.115806428 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1266,14 +1267,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1506/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:12.115806428 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_774/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:57.207818432 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_774/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:57.207818432 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double value=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_436/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:04.180385318 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n@@ -1273,7 +1274,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         double zb = 0.008336750013465571;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_436/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:04.184385492 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double probability = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "final double facta=57.2957763671875;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final UnivariateFunction toSolve=new UnivariateFunction(){\n  public double value(  final double x){\n    return cumulativeProbability(x) - p;\n  }\n}\n;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_726/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:34.642851529 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 final double facta = 57.2957763671875;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_726/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:34.646851701 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "double r=1.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1403/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:23.113723270 -0500\n@@ -1266,14 +1266,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1403/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:23.117723440 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1270, 
          "faulty": "if (Double.isNaN(values[i])) {\n  out[i]=Double.NaN;\n}\n else {\n  out[i]=values[i] * normalizedSum / sum;\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_240/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:58:24.024087329 -0500\n@@ -1267,7 +1267,8 @@\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n-             if (Double.isNaN(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_240/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:24.024087329 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1626/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:12.430368488 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1626/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:12.434368659 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_751/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:47.159387942 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_751/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:47.163388114 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1413/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:27.965929615 -0500\n@@ -1246,14 +1246,16 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1413/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:27.969929785 -0500\n@@ -184,11 +184,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_647/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:53.701095426 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_404/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:47.955685829 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_305/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:56.553466459 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,8 +187,9 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+        double v = 0;\n+\t\tfor (int i = 0; i < sampleSize; i++) {\n+            int min = Integer.MAX_VALUE;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_888/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:54.018249933 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_888/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:54.018249933 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_102/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:57.840458957 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "int quadrant=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_285/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:58:46.029013636 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         int quadrant = 0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_285/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:46.033013804 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1072/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:28.570288796 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1072/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:28.574288968 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1257, 
          "faulty": "double[] out=new double[len];", 
          "type": "InsertBefore", 
          "seed": "final double small=1e-50;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1470/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:54.703066360 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n-         double[] out = new double[len];\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n+         final double small = 1e-50;\n+\t\tdouble[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1470/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:54.707066530 -0500\n@@ -179,18 +179,15 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double y=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_835/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:28.313150231 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_835/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:28.317150402 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,13 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double y = 0;\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int j = 1;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double qi=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1315/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:39.975888075 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1315/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:39.979888245 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double qi = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1342/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:52.684428867 -0500\n@@ -1266,14 +1266,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1342/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:52.684428867 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double min = Double.POSITIVE_INFINITY;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1241/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:02.498292575 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1241/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:02.502292745 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int k=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_867/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:44.453840845 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1271,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int k = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_867/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:44.457841016 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1388/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:15.845414148 -0500\n@@ -1270,10 +1270,12 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1388/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:15.849414318 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1262, 
          "faulty": "if (!Double.isNaN(values[i])) {\n  sum+=values[i];\n}", 
          "type": "InsertBefore", 
          "seed": "double max=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_938/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:20.127366148 -0500\n@@ -1246,7 +1246,11 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t\t}\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1256,10 +1260,12 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n-             if (!Double.isNaN(values[i])) {\n+             double max = 0;\n+\t\t\tif (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n@@ -1270,7 +1276,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_938/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:20.131366319 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double y=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextGaussian();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_910/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:04.506698426 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n@@ -1266,7 +1267,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_910/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:04.510698597 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,14 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double y = 0;\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int j = 1;\n+\t\tfinal double n = random.nextGaussian();\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_869/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:45.129869763 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n@@ -1270,7 +1271,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_869/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:45.129869763 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1591/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:55.541651295 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1591/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:55.545651464 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1255, 
          "faulty": "double sum=0d;", 
          "type": "InsertBefore", 
          "seed": "final double facta=0.01745329052209854;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_659/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:59.057325304 -0500\n@@ -1252,7 +1252,8 @@\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         final double facta = 0.01745329052209854;\n+\t\tdouble sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_659/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:59.061325475 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_450/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:10.656664396 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_450/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:10.660664567 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1001/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:53.284782631 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n@@ -1266,7 +1267,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1001/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:53.284782631 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +181,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1713/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:54.956173708 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1713/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:54.960173876 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1455/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:47.938778816 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1455/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:47.942778987 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,9 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1483/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:01.359349284 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1266,14 +1267,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1483/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:01.363349454 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +181,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double sum = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1435/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:38.366371851 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1435/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:38.370372022 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double m=getNumberOfSuccesses();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_709/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:25.482458816 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            double weightSum = 0;\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1536/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:28.896519457 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1536/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:28.900519628 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,11 +187,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return getDegreesOfFreedom();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_400/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:45.835594391 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,11 +187,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1138/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:06.271896790 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1138/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:06.271896790 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_338/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:13.942217823 -0500\n@@ -179,15 +179,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1355/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:00.204748826 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1355/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:00.208748997 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1257, 
          "faulty": "double[] out=new double[len];", 
          "type": "InsertBefore", 
          "seed": "final double small=1e-50;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1463/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:51.270920466 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n-         double[] out = new double[len];\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n+         final double small = 1e-50;\n+\t\tdouble[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1273,7 +1276,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1463/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:51.274920636 -0500\n@@ -184,13 +184,11 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double min = Double.POSITIVE_INFINITY;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1498/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:08.327645441 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1498/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:08.327645441 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_367/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:29.962909544 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_661/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:59.705353113 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        int max = Integer.MIN_VALUE;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "throw new MathArithmeticException(LocalizedFormats.OVERFLOW);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_959/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:31.935870740 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_959/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:31.935870740 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double y=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_891/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:55.458311518 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1272,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_891/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:55.458311518 -0500\n@@ -179,18 +179,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1250/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:07.990526459 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1250/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:07.990526459 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1008/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:57.056943704 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_629/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:44.508700814 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,13 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_191/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:54.042825184 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -186,11 +187,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1334/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:48.796263425 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1334/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:48.800263595 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double qi = 0;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,11 +187,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double facta=57.2957763671875;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_905/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:02.382607608 -0500\n@@ -1246,7 +1246,11 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t\t}\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1255,8 +1259,10 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+         final double facta = 57.2957763671875;\n+\t\tfor (int i = 0; i < len; i++) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1276,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_905/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:02.386607779 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double rnd=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double meanOfSquares=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int k=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1211/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:43.837497737 -0500\n@@ -1263,14 +1263,16 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int k = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1211/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:43.841497907 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double rnd = 1.0d;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double meanOfSquares = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 157, 
          "faulty": "final double randomValue=random.nextDouble();", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1058/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:21.429984109 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1058/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:21.457985304 -0500\n@@ -154,7 +154,8 @@\n      * @return a random value.\n      */\n     public T sample() {\n-        final double randomValue = random.nextDouble();\n+        int j = 1;\n+\t\tfinal double randomValue = random.nextDouble();\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double meanOfSquares=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_218/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:10.287509059 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1564/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:42.581100806 -0500\n@@ -1270,10 +1270,12 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1564/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:42.585100974 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1303/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:34.431652112 -0500\n@@ -1246,14 +1246,16 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1303/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:34.435652283 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double y=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_841/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:31.873302587 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_841/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:31.873302587 -0500\n@@ -179,16 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double y = 0;\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int j = 1;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_944/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:24.375547695 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_944/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:24.375547695 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_713/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:27.482544571 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_808/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:15.020581245 -0500\n@@ -1246,7 +1246,11 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t\t}\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1256,7 +1260,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1275,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_808/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:15.024581418 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_741/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:42.071169905 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_741/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:42.071169905 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1490/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:04.727492437 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1266,14 +1267,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1490/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:04.727492437 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1094/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:41.862855881 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1266,7 +1268,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1094/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:41.866856051 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +181,13 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\tdouble qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "double a=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_313/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:59.909611525 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1173/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:24.276664255 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double rnd=1.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_122/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:10.612996733 -0500\n@@ -157,9 +157,11 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double rnd = 1.0d;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -186,10 +188,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1677/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:36.767401710 -0500\n@@ -1246,24 +1246,28 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1677/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:36.771401880 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,11 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_617/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:38.352436469 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_486/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:30.425515823 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1300/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:33.007591501 -0500\n@@ -1253,17 +1253,20 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1300/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:33.011591671 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_643/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:51.761012153 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        int max = Integer.MIN_VALUE;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -187,7 +188,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_768/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:54.555704825 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_768/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:54.559704996 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        int min = Integer.MAX_VALUE;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return 0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1501/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:09.795707831 -0500\n@@ -1270,10 +1270,12 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1501/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:09.795707831 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1043/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:14.329681081 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1043/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:14.333681252 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1583/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:52.237510963 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1521/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:20.796175287 -0500\n@@ -1256,7 +1256,9 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1266,7 +1268,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1521/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:20.800175458 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_290/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:58:48.093100667 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_290/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:48.097100840 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_264/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:36.080594857 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,11 +187,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double rnd=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double meanOfSquares=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1131/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:02.571739034 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1131/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:02.575739204 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double rnd = 1.0d;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double meanOfSquares = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double r=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_19/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:03.130155230 -0500\n@@ -184,11 +184,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int max = Integer.MIN_VALUE;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1010/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:57.864978205 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n@@ -1270,7 +1271,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1010/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:57.868978377 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1187/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:31.228960527 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1187/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:31.232960699 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1323/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:44.016060011 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1668/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:32.683228339 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,14 +1264,16 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1668/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:32.687228509 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double v = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_881/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:51.278132744 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_881/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:51.282132915 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_524/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:48.186280198 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        int max = Integer.MIN_VALUE;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_606/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:33.064209350 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_606/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:33.068209521 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_824/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:22.632907115 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1036/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:10.929535951 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1036/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:10.929535951 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1263, 
          "faulty": "sum+=values[i];", 
          "type": "Replace", 
          "seed": "sum+=values[i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 157, 
          "faulty": "final double randomValue=random.nextDouble();", 
          "type": "InsertBefore", 
          "seed": "int a=0;"
        }
      ], 
      "patch": "\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_267/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:37.240643690 -0500\n@@ -154,7 +154,8 @@\n      * @return a random value.\n      */\n     public T sample() {\n-        final double randomValue = random.nextDouble();\n+        int a = 0;\n+\t\tfinal double randomValue = random.nextDouble();\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_407/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:49.335745346 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n@@ -1273,7 +1274,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         double zb = 0.008336750013465571;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_407/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:49.339745520 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double probability = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_394/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:43.807506913 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_721/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:32.066741100 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_310/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:58.613555507 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1277/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:22.083126476 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1277/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:22.087126646 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double n=getSampleSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1650/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:23.958857966 -0500\n@@ -1270,10 +1270,13 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tint newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1650/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:23.962858136 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,16 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "double value=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final List<Pair<T,Double>> samples=new ArrayList<Pair<T,Double>>(probabilities.length);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_270/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:38.632702289 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1269/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:17.926949536 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1269/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:17.930949706 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double qi = 0;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -179,16 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double t = 0;\n+\t\tdouble v = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final double r=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_61/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:31.291341075 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "final double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double s=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1236/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:00.438204841 -0500\n@@ -179,16 +179,11 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        final double u2 = random.nextDouble();\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double s = Double.NaN;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1581/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:51.593483609 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "boolean negative=false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_554/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:03.714948082 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         boolean negative = false;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_554/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:03.718948255 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        int max = Integer.MIN_VALUE;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 157, 
          "faulty": "final double randomValue=random.nextDouble();", 
          "type": "InsertBefore", 
          "seed": "double p=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_247/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:58:27.116217495 -0500\n@@ -154,12 +154,14 @@\n      * @return a random value.\n      */\n     public T sample() {\n-        final double randomValue = random.nextDouble();\n+        double p = 0;\n+\t\tfinal double randomValue = random.nextDouble();\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -186,10 +188,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_547/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:59.718776245 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_547/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:59.722776417 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double[] vals = null;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +188,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_389/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:41.107390437 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_389/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:41.107390437 -0500\n@@ -179,15 +179,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_968/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:36.132050011 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_968/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:36.132050011 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +181,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1167/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:21.060527186 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double qi = 0;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_620/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:39.816499338 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_620/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:39.820499511 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double qa=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_129/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:14.809173406 -0500\n@@ -157,7 +157,8 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double qa = 0;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "break;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1719/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:57.864297122 -0500\n@@ -1263,7 +1263,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1719/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:57.868297293 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1380/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:12.297263233 -0500\n@@ -1253,10 +1253,13 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tdouble z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1380/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:12.297263233 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_704/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:22.690339093 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_704/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:22.690339093 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1422/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:32.006101415 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1422/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:32.010101585 -0500\n@@ -184,11 +184,9 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_466/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:19.877061594 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_466/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:19.881061768 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_772/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:56.527789304 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1266,7 +1267,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_772/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:56.531789474 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1407/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:25.169810709 -0500\n@@ -184,11 +184,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1155/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:15.192277064 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1155/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:15.196277233 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1039/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:12.277593492 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1141/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:07.627954603 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1141/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:07.627954603 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,15 +180,11 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double max = Double.NEGATIVE_INFINITY;\n+\t\t\tdouble sum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_595/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:25.923902622 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double qa=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_416/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:53.455923013 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_588/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:23.127782486 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_588/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:23.131782658 -0500\n@@ -179,18 +179,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_691/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:15.662037680 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_691/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:15.666037850 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_613/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:36.364351088 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_946/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:25.099578635 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_946/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:25.099578635 -0500\n@@ -155,12 +155,14 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,18 +181,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_159/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:57:32.229906855 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         int n = 1;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_159/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:57:32.229906855 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_438/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:04.892416005 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_438/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:04.892416005 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1049/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:17.093799055 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n@@ -1270,7 +1271,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1049/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:17.097799226 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_69/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:56:36.155545894 -0500\n@@ -1273,7 +1273,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int count = 0;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_69/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:36.159546062 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "double prodLowSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1647/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:22.582799545 -0500\n@@ -1263,14 +1263,16 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 double prodLowSum = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1647/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:22.582799545 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "final double facta=0.01745329052209854;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_627/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:43.856672820 -0500\n@@ -1266,14 +1266,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         final double facta = 0.01745329052209854;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_627/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:43.856672820 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_56/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:28.123207672 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1525/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:22.796260270 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,11 +185,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_543/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:57.746691435 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_543/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:57.750691607 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1109/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:05:51.059248120 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1109/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:51.063248290 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "final double facta=0.01745329052209854;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "return Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_597/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:26.591931321 -0500\n@@ -1273,7 +1273,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         final double facta = 0.01745329052209854;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_597/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:26.595931494 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 161, 
          "faulty": "sum+=probabilities[i];", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_764/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:53.175645705 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_764/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:53.179645876 -0500\n@@ -157,8 +157,10 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n-            sum += probabilities[i];\n+        int min = Integer.MAX_VALUE;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n+            double a = 0;\n+\t\t\tsum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n             }\n@@ -179,17 +181,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double lnzb=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double u=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_766/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:53.891676378 -0500\n@@ -1253,7 +1253,8 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double lnzb = 0.0;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_766/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:53.895676551 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double N=getPopulationSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_747/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:02:45.139301382 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_747/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:02:45.139301382 -0500\n@@ -159,8 +159,10 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n-                return singletons.get(i);\n+            double u2 = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +181,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_649/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:54.349123242 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1128/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:01.155678657 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_370/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:31.354969625 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_370/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:31.358969798 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1359/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:01.684811793 -0500\n@@ -1270,10 +1270,12 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1359/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:01.684811793 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 161, 
          "faulty": "sum+=probabilities[i];", 
          "type": "InsertBefore", 
          "seed": "double a=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 161, 
          "faulty": "sum+=probabilities[i];", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_883/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:51.930160630 -0500\n@@ -157,8 +157,11 @@\n         final double randomValue = random.nextDouble();\n         double sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n-            sum += probabilities[i];\n+        int min = Integer.MAX_VALUE;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n+            double a = 0;\n+\t\t\tdouble probability = 0;\n+\t\t\tsum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n             }\n@@ -179,17 +182,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double z=1.0 / 120.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1257, 
          "faulty": "double[] out=new double[len];", 
          "type": "InsertBefore", 
          "seed": "final double small=1e-50;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1513/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:15.447948027 -0500\n@@ -1246,17 +1246,21 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n-         double[] out = new double[len];\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n+         final double small = 1e-50;\n+\t\tdouble[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double z = 1.0 / 120.0;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1513/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:15.451948197 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,13 +185,12 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_871/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:45.901902788 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_871/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:45.905902959 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "int n=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1551/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:35.648806321 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n@@ -1273,7 +1275,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         int n = 1;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1551/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:35.652806491 -0500\n@@ -184,11 +184,8 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double probability = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1616/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:07.658165849 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -184,10 +185,10 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_83/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:56:45.951958388 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         final int splitFactor = 0x8000001;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_83/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:45.951958388 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1639/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:19.134653149 -0500\n@@ -1246,24 +1246,28 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1639/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:19.138653318 -0500\n@@ -186,11 +186,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_375/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:33.415058532 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_375/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:33.419058705 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "double zb=0.008336750013465571;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1185/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:30.508929845 -0500\n@@ -1253,10 +1253,12 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         double zb = 0.008336750013465571;\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1185/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:30.512930016 -0500\n@@ -155,9 +155,11 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble sum = 0;\n \n-        for (int i = 0; i < probabilities.length; i++) {\n+        double probability = 0;\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -179,18 +181,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double qr = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double rnd=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double meanOfSquares=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1159/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:17.172361463 -0500\n@@ -155,7 +155,9 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double mean = 0;\n+\t\tdouble rnd = 1.0d;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +181,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double meanOfSquares = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 2 * getDegreesOfFreedom();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1589/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:54.873622924 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1589/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:54.873622924 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_398/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:45.127563853 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_398/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:45.127563853 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,18 +180,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double probability = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "double dPrev=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_845/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:33.225360443 -0500\n@@ -1263,7 +1263,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         double dPrev = 0.0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_845/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:33.229360614 -0500\n@@ -179,16 +179,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double min = Double.POSITIVE_INFINITY;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "Replace", 
          "seed": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1569/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:45.401220595 -0500\n@@ -184,11 +184,9 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons\n+\t\t\t\t.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_976/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:40.500236613 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_976/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:40.504236782 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "final double facta=0.01745329052209854;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_582/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:01:20.431666637 -0500\n@@ -1266,14 +1266,16 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         final double facta = 0.01745329052209854;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_582/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:20.435666809 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 157, 
          "faulty": "final double randomValue=random.nextDouble();", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double r=getNumberOfSuccesses();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_506/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:39.881922867 -0500\n@@ -154,7 +154,8 @@\n      * @return a random value.\n      */\n     public T sample() {\n-        final double randomValue = random.nextDouble();\n+        int min = Integer.MAX_VALUE;\n+\t\tfinal double randomValue = random.nextDouble();\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double a=getAlpha();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_797/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:10.360381717 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1266,7 +1267,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_797/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:10.364381888 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,11 +187,8 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return getMean();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1457/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:08:48.606807215 -0500\n@@ -1266,7 +1266,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1457/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:08:48.606807215 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_610/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:34.992292161 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        int max = Integer.MIN_VALUE;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "return getMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_859/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:40.885688200 -0500\n@@ -1246,7 +1246,11 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t\t}\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1256,7 +1260,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n@@ -1270,7 +1275,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_859/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:40.885688200 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return FastMath.min(getNumberOfSuccesses(),getSampleSize());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 157, 
          "faulty": "final double randomValue=random.nextDouble();", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "int max=Integer.MIN_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_576/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:01:17.787553011 -0500\n@@ -154,8 +154,10 @@\n      * @return a random value.\n      */\n     public T sample() {\n-        final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        int min = Integer.MAX_VALUE;\n+\t\tfinal double randomValue = random.nextDouble();\n+        int max = Integer.MIN_VALUE;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -179,17 +181,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double sc=getScale();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_360/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:26.578763470 -0500\n@@ -1249,7 +1249,11 @@\n          if (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n-         if (Double.isNaN(normalizedSum)) {\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_360/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:26.582763642 -0500\n@@ -179,18 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1538/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:09:29.568548009 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1538/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:09:29.568548009 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int k=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_851/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:03:36.297491897 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int k = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_851/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:03:36.297491897 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1610/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:05.010053398 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1610/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:05.014053568 -0500\n@@ -179,17 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double v = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "int idx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "final int N=getNumberOfElements();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1682/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:10:39.327510381 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1263,7 +1264,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         int idx = 0;\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1682/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:10:39.331510550 -0500\n@@ -179,16 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double v = 0;\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double mean = 0;\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double v=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_509/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:00:41.233981052 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_509/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:00:41.237981225 -0500\n@@ -179,18 +179,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        int i = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double v = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_53/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:56:26.811152425 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            final double u = random.nextDouble();\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_990/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:46.968512887 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "double resultHigh=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "int i=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "double r=1.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_978/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:04:41.172265317 -0500\n@@ -1256,7 +1256,8 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             double resultHigh = 1;\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_978/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:04:41.176265488 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            double r = 1.0d;\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "return Double.POSITIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double pivot=40.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double max=Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "double b=0.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1298/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:07:32.339563067 -0500\n@@ -1246,7 +1246,8 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         double b = 0.0;\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n@@ -1266,7 +1267,8 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         int newSize = 0;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1298/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:07:32.343563237 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double qr = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -179,17 +180,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1020/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:05:02.477175127 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1273, 
          "faulty": "out[i]=values[i] * normalizedSum / sum;", 
          "type": "InsertBefore", 
          "seed": "int newSize=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sig=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "final double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1178/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 15:06:26.988779837 -0500\n@@ -1270,7 +1270,8 @@\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n-                 out[i] = values[i] * normalizedSum / sum;\n+                 int newSize = 0;\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n              }\n          }\n          return out;\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_1178/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 15:06:26.992780009 -0500\n@@ -179,18 +179,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        final double u2 = random.nextDouble();\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n-        return out;\n+        double t = 0;\n+\t\treturn out;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return false;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double pib=6.123233995736766E-17 * 2;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final int dim=getDimension();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:00:02.246638167 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_383/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 14:59:38.307269631 -0500\n@@ -1255,7 +1255,8 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         final double pib = 6.123233995736766E-17 * 2;\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:00:05.982638036 -0500\n+++ /tmp/GenProg_Defects4J_Math_8/patches_z3oe/Patch_383/patched/tmp/GenProg_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 14:59:38.311269804 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -186,10 +187,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }
  ]
}