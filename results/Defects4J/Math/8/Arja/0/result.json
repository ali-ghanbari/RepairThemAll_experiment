{
  "repair_end": "2018-12-01 13:52:16.692427", 
  "repair_begin": "2018-12-01 12:59:25.506019", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_281/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:38.912484969 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_142/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:40:42.888148406 -0500\n@@ -1253,7 +1253,11 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_142/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:40:42.888148406 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_165/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:40:52.000203248 -0500\n@@ -158,6 +158,12 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n+\t\t\tsum += probabilities[i];\n+\t\t\tif (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -184,11 +190,16 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_186/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:00.800256174 -0500\n@@ -184,11 +184,11 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_834/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:45:33.153904203 -0500\n@@ -179,15 +179,14 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1185/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:48:09.010961238 -0500\n@@ -1252,7 +1252,7 @@\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         double sum = 0;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1185/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:48:09.010961238 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1255, 
          "faulty": "double sum=0d;", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_148/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:40:45.020161241 -0500\n@@ -1273,7 +1273,14 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_148/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:40:45.020161241 -0500\n@@ -158,6 +158,12 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n+\t\t\tsum += probabilities[i];\n+\t\t\tif (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,9 +192,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_538/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:23.125107409 -0500\n@@ -184,10 +184,13 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_504/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:43:09.825028208 -0500\n@@ -1249,7 +1249,11 @@\n          if (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n-         if (Double.isNaN(normalizedSum)) {\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_504/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:09.829028231 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            break;\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_438/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:42:43.544871516 -0500\n@@ -1273,7 +1273,16 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isInfinite(values[i])) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n+\t\t\t}\n+\t\t\tif (!Double.isNaN(values[i])) {\n+\t\t\t\tsum += values[i];\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_438/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:43.544871516 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_318/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:54.736579771 -0500\n@@ -158,6 +158,12 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n+\t\t\tsum += probabilities[i];\n+\t\t\tif (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,10 +192,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_126/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:40:36.176107982 -0500\n@@ -158,9 +158,14 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n+\t\t\tsum += probabilities[i];\n+\t\t\tif (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n             }\n         }\n \n@@ -186,10 +191,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "Delete", 
          "seed": "return singletons.get(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_816/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:45:25.253850178 -0500\n@@ -184,11 +184,16 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_97/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:40:24.304036426 -0500\n@@ -158,6 +158,12 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n+\t\t\tsum += probabilities[i];\n+\t\t\tif (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,9 +192,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1237/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:48:30.915110287 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            ++i;\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_524/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:43:18.037077117 -0500\n@@ -1266,7 +1266,11 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_524/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:18.037077117 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_463/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:42:54.308935726 -0500\n@@ -1253,7 +1253,11 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_463/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:54.312935751 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_410/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:31.896801979 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_534/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:21.741099170 -0500\n@@ -158,10 +158,14 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n+\t\t\tsum += probabilities[i];\n+\t\t\tif (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n+            sum += probabilities[i];\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n-                return singletons.get(i);\n-            }\n         }\n \n         /* This should never happen, but it ensures we will return a correct\n@@ -186,10 +190,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "Replace", 
          "seed": "sum+=probabilities[i];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1711/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:52:00.776518340 -0500\n@@ -1247,6 +1247,10 @@\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n          if (Double.isInfinite(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t\t}\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1711/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:52:00.780518370 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1614/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:51:18.528225928 -0500\n@@ -1273,7 +1273,14 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1614/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:51:18.532225954 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_115/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:40:31.904082242 -0500\n@@ -158,6 +158,12 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n+\t\t\tsum += probabilities[i];\n+\t\t\tif (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,9 +192,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_242/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:41:23.400391928 -0500\n@@ -1264,6 +1264,10 @@\n              }\n          }\n          if (sum == 0) {\n+\t\t\tthrow new MathArithmeticException(\n+\t\t\t\t\tLocalizedFormats.ARRAY_SUMS_TO_ZERO);\n+\t\t}\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_242/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:23.400391928 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_443/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:42:45.652884094 -0500\n@@ -1256,7 +1256,12 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             if (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_443/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:45.652884094 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(values[i])) {\n  out[i]=Double.NaN;\n}\n else {\n  out[i]=values[i] * normalizedSum / sum;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_253/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:41:27.688417658 -0500\n@@ -1256,7 +1256,12 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             if (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_253/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:27.688417658 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(values[i])) {\n  out[i]=Double.NaN;\n}\n else {\n  out[i]=values[i] * normalizedSum / sum;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_476/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:42:59.044963964 -0500\n@@ -1267,13 +1267,24 @@\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_476/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:59.044963964 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1120/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:47:39.486758970 -0500\n@@ -1259,11 +1259,19 @@\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n-             if (!Double.isNaN(values[i])) {\n+             if (Double.isInfinite(values[i])) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n+\t\t\t}\n+\t\t\tif (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n          if (sum == 0) {\n+\t\t\tthrow new MathArithmeticException(\n+\t\t\t\t\tLocalizedFormats.ARRAY_SUMS_TO_ZERO);\n+\t\t}\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1120/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:47:39.486758970 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1262, 
          "faulty": "if (!Double.isNaN(values[i])) {\n  sum+=values[i];\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_200/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:06.568290844 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_468/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:55.756944362 -0500\n@@ -184,11 +184,16 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_949/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:46:23.862248320 -0500\n@@ -1255,7 +1255,11 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_949/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:46:23.862248320 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_951/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:46:24.354251637 -0500\n@@ -1266,7 +1266,11 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         if (sum == 0) {\n+\t\t\tthrow new MathArithmeticException(\n+\t\t\t\t\tLocalizedFormats.ARRAY_SUMS_TO_ZERO);\n+\t\t}\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_951/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:46:24.354251637 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_465/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:54.784938566 -0500\n@@ -179,17 +179,13 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_450/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:42:48.468900894 -0500\n@@ -1256,14 +1256,15 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n-                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n-             }\n-             if (!Double.isNaN(values[i])) {\n-                 sum += values[i];\n-             }\n-         }\n-         if (sum == 0) {\n+\t\t\tif (Double.isInfinite(values[i])) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n+\t\t\t}\n+\t\t\tif (!Double.isNaN(values[i])) {\n+\t\t\t\tsum += values[i];\n+\t\t\t}\n+\t\t}\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_450/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:48.468900894 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_255/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:41:28.200420730 -0500\n@@ -1264,6 +1264,10 @@\n              }\n          }\n          if (sum == 0) {\n+\t\t\tthrow new MathArithmeticException(\n+\t\t\t\t\tLocalizedFormats.ARRAY_SUMS_TO_ZERO);\n+\t\t}\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_255/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:28.200420730 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_259/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:29.476428385 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1679/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:51:47.020419115 -0500\n@@ -1249,7 +1249,11 @@\n          if (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n-         if (Double.isNaN(normalizedSum)) {\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1679/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:51:47.020419115 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_384/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:21.376739131 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_478/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:42:59.540966921 -0500\n@@ -1273,7 +1273,14 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_478/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:59.544966946 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_161/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:40:50.588194752 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            break;\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1198/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:48:14.310997381 -0500\n@@ -179,15 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            ++i;\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_653/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:44:11.841396975 -0500\n@@ -1249,7 +1249,11 @@\n          if (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n-         if (Double.isNaN(normalizedSum)) {\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_653/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:44:11.841396975 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_743/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:44:51.793633857 -0500\n@@ -1273,7 +1273,14 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_743/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:44:51.793633857 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_940/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:46:20.222223766 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new MathArithmeticException(LocalizedFormats.OVERFLOW);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_226/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:16.192348657 -0500\n@@ -158,6 +158,12 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n+\t\t\tsum += probabilities[i];\n+\t\t\tif (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,10 +192,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1692/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:51:52.656459826 -0500\n@@ -1249,7 +1249,11 @@\n          if (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n-         if (Double.isNaN(normalizedSum)) {\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1692/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:51:52.660459854 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_323/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:56.512590405 -0500\n@@ -186,8 +186,11 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\tfor (int i = 0; i < sampleSize; i++) {\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_964/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:46:29.202284301 -0500\n@@ -1273,7 +1273,16 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isInfinite(values[i])) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n+\t\t\t}\n+\t\t\tif (!Double.isNaN(values[i])) {\n+\t\t\t\tsum += values[i];\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_964/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:46:29.206284328 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_493/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:43:05.417001943 -0500\n@@ -1267,6 +1267,13 @@\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_493/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:05.421001968 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1222/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:48:24.775068591 -0500\n@@ -1260,7 +1260,11 @@\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n-                 sum += values[i];\n+                 if (Double.isInfinite(normalizedSum)) {\n+\t\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t\t\t}\n+\t\t\t\tsum += values[i];\n              }\n          }\n          if (sum == 0) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1222/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:48:24.779068618 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1263, 
          "faulty": "sum+=values[i];", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_379/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:19.412727392 -0500\n@@ -179,16 +179,16 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1230/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:48:28.207091904 -0500\n@@ -1249,7 +1249,11 @@\n          if (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n-         if (Double.isNaN(normalizedSum)) {\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n@@ -1267,6 +1271,13 @@\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1230/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:48:28.211091932 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1023/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:46:55.694462124 -0500\n@@ -1246,12 +1246,14 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n-             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n-         }\n          if (Double.isNaN(normalizedSum)) {\n-             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n-         }\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1023/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:46:55.694462124 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "Replace", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "Replace", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1258/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:48:39.551168822 -0500\n@@ -1249,7 +1249,11 @@\n          if (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n-         if (Double.isNaN(normalizedSum)) {\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1258/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:48:39.551168822 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_575/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:43:38.133196704 -0500\n@@ -1273,7 +1273,11 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_575/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:38.133196704 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_68/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:40:11.559959533 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1629/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:51:25.060268621 -0500\n@@ -1273,7 +1273,11 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1629/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:51:25.060268621 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_412/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:32.364804774 -0500\n@@ -179,15 +179,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_646/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:44:09.225381446 -0500\n@@ -1254,7 +1254,11 @@\n          }\n          double sum = 0d;\n          final int len = values.length;\n-         double[] out = new double[len];\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tdouble[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_646/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:44:09.225381446 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1257, 
          "faulty": "double[] out=new double[len];", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_402/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:42:29.136785495 -0500\n@@ -1253,7 +1253,11 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_402/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:29.136785495 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1442/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:50:00.823713807 -0500\n@@ -1249,7 +1249,11 @@\n          if (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n-         if (Double.isNaN(normalizedSum)) {\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1442/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:50:00.823713807 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_569/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:35.733182430 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_216/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:12.572326916 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1642/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:51:30.628304973 -0500\n@@ -1259,11 +1259,16 @@\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n-             if (!Double.isNaN(values[i])) {\n+             out[i] = values[i] * normalizedSum / sum;\n+\t\t\tif (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n          if (sum == 0) {\n+\t\t\tthrow new MathArithmeticException(\n+\t\t\t\t\tLocalizedFormats.ARRAY_SUMS_TO_ZERO);\n+\t\t}\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1642/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:51:30.628304973 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1262, 
          "faulty": "if (!Double.isNaN(values[i])) {\n  sum+=values[i];\n}", 
          "type": "InsertBefore", 
          "seed": "out[i]=values[i] * normalizedSum / sum;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_310/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:41:51.612561064 -0500\n@@ -1250,6 +1250,10 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_310/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:51.612561064 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_846/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:45:38.345939647 -0500\n@@ -1256,6 +1256,13 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_846/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:45:38.349939674 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_530/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:43:20.449091478 -0500\n@@ -1259,7 +1259,8 @@\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n-             if (!Double.isNaN(values[i])) {\n+             out[i] = Double.NaN;\n+\t\t\tif (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_530/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:20.453091503 -0500\n@@ -184,11 +184,11 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1262, 
          "faulty": "if (!Double.isNaN(values[i])) {\n  sum+=values[i];\n}", 
          "type": "InsertBefore", 
          "seed": "out[i]=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1381/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:49:33.791533674 -0500\n@@ -1252,7 +1252,11 @@\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tdouble sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1381/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:49:33.791533674 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1255, 
          "faulty": "double sum=0d;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_16/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:39:47.703815363 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1103/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:47:32.258709203 -0500\n@@ -1273,7 +1273,14 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1103/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:47:32.262709230 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1298/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:48:56.475283172 -0500\n@@ -1252,7 +1252,11 @@\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tdouble sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1298/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:48:56.475283172 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            break;\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1255, 
          "faulty": "double sum=0d;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_613/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:54.349293097 -0500\n@@ -158,7 +158,10 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n-            sum += probabilities[i];\n+            if (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t\tsum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n             }\n@@ -186,10 +189,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 161, 
          "faulty": "sum+=probabilities[i];", 
          "type": "InsertBefore", 
          "seed": "if (randomValue < sum) {\n  return singletons.get(i);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_936/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:46:18.794214127 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_518/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:43:15.801063803 -0500\n@@ -1253,7 +1253,11 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_518/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:15.801063803 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_989/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:46:40.954363324 -0500\n@@ -1246,7 +1246,11 @@\n       */\n      public static double[] normalizeArray(double[] values, double normalizedSum)\n          throws MathIllegalArgumentException, MathArithmeticException {\n-         if (Double.isInfinite(normalizedSum)) {\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t\t}\n+\t\tif (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_989/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:46:40.954363324 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1249, 
          "faulty": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_361/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:42:11.512680160 -0500\n@@ -1256,7 +1256,12 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             if (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_361/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:11.516680183 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(values[i])) {\n  out[i]=Double.NaN;\n}\n else {\n  out[i]=values[i] * normalizedSum / sum;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1352/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:49:20.719446171 -0500\n@@ -1255,7 +1255,11 @@\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n-         for (int i = 0; i < len; i++) {\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1352/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:49:20.723446197 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1258, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1281/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:48:49.235234313 -0500\n@@ -179,16 +179,17 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1067/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:47:15.162592095 -0500\n@@ -1252,7 +1252,7 @@\n          if (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n-         double sum = 0d;\n+         double sum = 0;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1067/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:47:15.162592095 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1255, 
          "faulty": "double sum=0d;", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_922/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:46:12.822173779 -0500\n@@ -158,6 +158,12 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n+\t\t\tsum += probabilities[i];\n+\t\t\tif (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -186,10 +192,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_484/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:43:01.516978701 -0500\n@@ -1250,6 +1250,10 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_484/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:01.520978724 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            break;\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1593/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:51:09.956169821 -0500\n@@ -1259,7 +1259,8 @@\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n-             if (!Double.isNaN(values[i])) {\n+             out[i] = values[i] * normalizedSum / sum;\n+\t\t\tif (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1593/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:51:09.956169821 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1262, 
          "faulty": "if (!Double.isNaN(values[i])) {\n  sum+=values[i];\n}", 
          "type": "InsertBefore", 
          "seed": "out[i]=values[i] * normalizedSum / sum;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_342/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:04.348637304 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_672/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:44:20.549448649 -0500\n@@ -1253,7 +1253,11 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_672/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:44:20.549448649 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_404/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:42:29.636788482 -0500\n@@ -1256,7 +1256,12 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             if (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_404/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:29.636788482 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(values[i])) {\n  out[i]=Double.NaN;\n}\n else {\n  out[i]=values[i] * normalizedSum / sum;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_203/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:41:07.508296492 -0500\n@@ -1253,10 +1253,18 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             if (Double.isNaN(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t\t}\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_203/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:07.508296492 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1368/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:49:27.931494480 -0500\n@@ -1273,7 +1273,16 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isInfinite(values[i])) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n+\t\t\t}\n+\t\t\tif (!Double.isNaN(values[i])) {\n+\t\t\t\tsum += values[i];\n+\t\t\t}\n+\t\t}\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1368/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:49:27.935494506 -0500\n@@ -179,17 +179,13 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1549/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:50:50.148039813 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_864/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:45:46.097992476 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "break;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1013/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:46:51.630434918 -0500\n@@ -1259,7 +1259,11 @@\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n-             if (!Double.isNaN(values[i])) {\n+             if (Double.isInfinite(values[i])) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n+\t\t\t}\n+\t\t\tif (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1013/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:46:51.630434918 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1262, 
          "faulty": "if (!Double.isNaN(values[i])) {\n  sum+=values[i];\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1393/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:49:38.627565979 -0500\n@@ -158,6 +158,12 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n+\t\t\tsum += probabilities[i];\n+\t\t\tif (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t}\n+\t\tfor (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n@@ -187,7 +193,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 160, 
          "faulty": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < probabilities.length; i++) {\n  sum+=probabilities[i];\n  if (randomValue < sum) {\n    return singletons.get(i);\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1270/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:48:44.667203440 -0500\n@@ -1250,13 +1250,22 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n          if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             if (Double.isNaN(values[i])) {\n+\t\t\t\tout[i] = Double.NaN;\n+\t\t\t} else {\n+\t\t\t\tout[i] = values[i] * normalizedSum / sum;\n+\t\t\t}\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1270/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:48:44.667203440 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(values[i])) {\n  out[i]=Double.NaN;\n}\n else {\n  out[i]=values[i] * normalizedSum / sum;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_350/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:07.260654727 -0500\n@@ -184,11 +184,11 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n-\n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_956/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:46:26.346265064 -0500\n@@ -1253,13 +1253,18 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n-             if (!Double.isNaN(values[i])) {\n+             out[i] = Double.NaN;\n+\t\t\tif (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_956/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:46:26.346265064 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1262, 
          "faulty": "if (!Double.isNaN(values[i])) {\n  sum+=values[i];\n}", 
          "type": "InsertBefore", 
          "seed": "out[i]=Double.NaN;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_481/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:00.484972549 -0500\n@@ -179,16 +179,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_609/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:43:52.881284375 -0500\n@@ -1254,7 +1254,11 @@\n          }\n          double sum = 0d;\n          final int len = values.length;\n-         double[] out = new double[len];\n+         if (Double.isNaN(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t}\n+\t\tdouble[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_609/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:52.885284398 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1257, 
          "faulty": "double[] out=new double[len];", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_436/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:42:43.044868531 -0500\n@@ -179,15 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            break;\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "break;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1296/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:48:55.947279612 -0500\n@@ -1259,7 +1259,11 @@\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n-             if (!Double.isNaN(values[i])) {\n+             if (Double.isInfinite(values[i])) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n+\t\t\t}\n+\t\t\tif (!Double.isNaN(values[i])) {\n                  sum += values[i];\n              }\n          }\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_1296/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:48:55.947279612 -0500\n@@ -186,9 +186,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n \n         return out;\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1262, 
          "faulty": "if (!Double.isNaN(values[i])) {\n  sum+=values[i];\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_782/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:45:09.845744469 -0500\n@@ -1260,10 +1260,18 @@\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n-                 sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         for (int i = 0; i < len; i++) {\n+\t\t\tif (Double.isInfinite(values[i])) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n+\t\t\t}\n+\t\t\tif (!Double.isNaN(values[i])) {\n+\t\t\t\tsum += values[i];\n+\t\t\t}\n+\t\t}\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_782/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:45:09.849744498 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1263, 
          "faulty": "sum+=values[i];", 
          "type": "Delete", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < len; i++) {\n  if (Double.isInfinite(values[i])) {\n    throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n  }\n  if (!Double.isNaN(values[i])) {\n    sum+=values[i];\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_561/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:32.749164680 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "throw new MathArithmeticException(LocalizedFormats.OVERFLOW);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_559/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:43:32.277161871 -0500\n@@ -1249,7 +1249,11 @@\n          if (Double.isInfinite(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n          }\n-         if (Double.isNaN(normalizedSum)) {\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tif (Double.isNaN(normalizedSum)) {\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_559/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:43:32.277161871 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1252, 
          "faulty": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_674/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:44:21.061451687 -0500\n@@ -1256,7 +1256,11 @@\n          final int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n-             if (Double.isInfinite(values[i])) {\n+             if (Double.isNaN(normalizedSum)) {\n+\t\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\t\tLocalizedFormats.NORMALIZE_NAN);\n+\t\t\t}\n+\t\t\tif (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n              }\n              if (!Double.isNaN(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_674/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:44:21.061451687 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1259, 
          "faulty": "if (Double.isInfinite(values[i])) {\n  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);\n}", 
          "type": "InsertBefore", 
          "seed": "if (Double.isNaN(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 06:59:08.724241483 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_219/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-01 07:41:13.428332057 -0500\n@@ -1253,7 +1253,11 @@\n              throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n          }\n          double sum = 0d;\n-         final int len = values.length;\n+         if (Double.isInfinite(normalizedSum)) {\n+\t\t\tthrow new MathIllegalArgumentException(\n+\t\t\t\t\tLocalizedFormats.NORMALIZE_INFINITE);\n+\t\t}\n+\t\tfinal int len = values.length;\n          double[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n\n\n--- /tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 06:59:12.332259545 -0500\n+++ /tmp/Arja_Defects4J_Math_8/patches_4ls0/Patch_219/patched/tmp/Arja_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-01 07:41:13.432332081 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1256, 
          "faulty": "final int len=values.length;", 
          "type": "InsertBefore", 
          "seed": "if (Double.isInfinite(normalizedSum)) {\n  throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "++i;"
        }
      ]
    }
  ]
}