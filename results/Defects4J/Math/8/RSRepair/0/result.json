{
  "repair_end": "2018-12-02 10:28:56.388043", 
  "repair_begin": "2018-12-02 09:42:58.337526", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_585/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:26:18.665869701 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            long n = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "int max=Integer.MIN_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double[] out=new double[sampleSize];"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_635/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:26:42.038033255 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int max = Integer.MIN_VALUE;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_548/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:25:59.485735292 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        long n = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "final double x=random.nextGaussian();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_541/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:25:57.081718432 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        final double x = random.nextGaussian();\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "long n=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "double upperBound=getSupportUpperBound();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_750/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:27:36.002409972 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        long n = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "int max=Integer.MIN_VALUE;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_846/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:28:21.282725155 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int max = Integer.MIN_VALUE;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double u=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_11/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:21:47.639950948 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double u = random.nextDouble();\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 161, 
          "faulty": "sum+=probabilities[i];", 
          "type": "InsertBefore", 
          "seed": "if (randomValue < sum) {\n  return singletons.get(i);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "double t=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_735/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:27:29.998368119 -0500\n@@ -158,7 +158,10 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n-            sum += probabilities[i];\n+            if (randomValue < sum) {\n+\t\t\t\treturn singletons.get(i);\n+\t\t\t}\n+\t\t\tsum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n             }\n@@ -186,10 +189,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 187, 
          "faulty": "final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double t=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_244/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:23:40.420754954 -0500\n@@ -184,10 +184,13 @@\n                     sampleSize);\n         }\n \n-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n+\t\tfinal T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_728/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:27:27.062347647 -0500\n@@ -187,7 +187,10 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            if (sampleSize <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t\t}\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final double randomValue=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_803/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:28:00.198578493 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 158, 
          "faulty": "double sum=0;", 
          "type": "InsertBefore", 
          "seed": "double res=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "int max=Integer.MIN_VALUE;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_102/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:30.816259831 -0500\n@@ -155,7 +155,8 @@\n      */\n     public T sample() {\n         final double randomValue = random.nextDouble();\n-        double sum = 0;\n+        double res = 1;\n+\t\tdouble sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n@@ -187,7 +188,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_23/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:21:52.775987766 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_14/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:21:48.879959838 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double p=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_760/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:27:39.966437596 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double p = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "return (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return Double.NEGATIVE_INFINITY;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_752/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:27:36.622414292 -0500\n@@ -179,17 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "int j=1;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_425/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:25:02.241333045 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            int j = 1;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "double p=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double sh=getShape();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_322/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:24:15.817005527 -0500\n@@ -179,15 +179,11 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        double p = 0;\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double qa=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_211/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:23:24.112639242 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double qa = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "double mean=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "InsertBefore", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_677/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:27:02.578176789 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1266, 
          "faulty": "if (sum == 0) {\n  throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n}", 
          "type": "InsertBefore", 
          "seed": "final double[] prodHigh=new double[len];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 03:42:40.995070624 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_725/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 04:27:26.090340869 -0500\n@@ -1263,7 +1263,8 @@\n                  sum += values[i];\n              }\n          }\n-         if (sum == 0) {\n+         final double[] prodHigh = new double[len];\n+\t\tif (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n          for (int i = 0; i < len; i++) {\n\n\n--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_725/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:27:26.090340869 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double u2 = random.nextDouble();\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_295/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:24:02.856913871 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double probability = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double weightSum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double res=1;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_630/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:26:40.210020472 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double weightSum = 0;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,9 +187,10 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final List<Pair<Double,T>> list=new ArrayList<Pair<Double,T>>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_539/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:25:56.601715065 -0500\n@@ -179,16 +179,12 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize < 0) {\n+\t\t\tthrow new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n+\t\t\t\t\tsampleSize);\n+\t\t}\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final double u=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_137/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:48.472385743 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            final double u = random.nextDouble();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "if (sampleSize < 0) {\n  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_81/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:21.584193903 -0500\n@@ -187,7 +187,10 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            if (sampleSize < 0) {\n+\t\t\t\tthrow new NotPositiveException(\n+\t\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t\t}\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "int min=Integer.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double value=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_7/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:21:45.891938411 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            int min = Integer.MAX_VALUE;\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -187,7 +188,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double value = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "int min=Integer.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_352/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:24:29.061099088 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int min = Integer.MAX_VALUE;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double qa=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_686/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:27:06.662205306 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double qa = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_72/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:17.268163059 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double probability = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double r=1.0d;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_143/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:50.520400333 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double r = 1.0d;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "final double sigma=FastMath.sqrt(getNumericalVariance());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "final double randomValue=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_27/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:21:54.303998715 -0500\n@@ -179,15 +179,9 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1257, 
          "faulty": "double[] out=new double[len];", 
          "type": "InsertBefore", 
          "seed": "final double facta=0.01745329052209854;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "double p=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 03:42:40.995070624 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_472/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 04:25:23.821484883 -0500\n@@ -1254,7 +1254,8 @@\n          }\n          double sum = 0d;\n          final int len = values.length;\n-         double[] out = new double[len];\n+         final double facta = 0.01745329052209854;\n+\t\tdouble[] out = new double[len];\n          for (int i = 0; i < len; i++) {\n              if (Double.isInfinite(values[i])) {\n                  throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n\n\n--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_472/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:25:23.825484912 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "long n=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_870/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:28:32.594803774 -0500\n@@ -179,7 +179,8 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n+        double qi = 0;\n+\t\tif (sampleSize <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                     sampleSize);\n         }\n@@ -187,7 +188,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            long n = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Replace", 
          "seed": "final List<Pair<T,Double>> samples=new ArrayList<Pair<T,Double>>(probabilities.length);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_281/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:23:56.852871374 -0500\n@@ -179,16 +179,15 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n+        final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(\n+\t\t\t\tprobabilities.length);\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        if (sampleSize <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n+\t\t}\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double t=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_442/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:25:09.837386519 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double t = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double weightSum=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_506/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:25:40.509602135 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double weightSum = 0;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 162, 
          "faulty": "if (randomValue < sum) {\n  return singletons.get(i);\n}", 
          "type": "InsertBefore", 
          "seed": "double qr=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_556/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:26:04.697771834 -0500\n@@ -159,7 +159,8 @@\n \n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n-            if (randomValue < sum) {\n+            double qr = 0;\n+\t\t\tif (randomValue < sum) {\n                 return singletons.get(i);\n             }\n         }\n@@ -187,7 +188,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double v=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_266/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:23:50.780828375 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double v = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Delete", 
          "seed": "return 1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double rnd=1.0d;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_152/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:54.416428082 -0500\n@@ -186,10 +186,6 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n-\n         return out;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 161, 
          "faulty": "sum+=probabilities[i];", 
          "type": "InsertBefore", 
          "seed": "double result=Double.NaN;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "final double u=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_748/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:27:35.514406570 -0500\n@@ -158,7 +158,8 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n-            sum += probabilities[i];\n+            double result = Double.NaN;\n+\t\t\tsum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n             }\n@@ -186,9 +187,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        final double u = random.nextDouble();\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final List<Pair<T,Double>> samples=new ArrayList<Pair<T,Double>>(probabilities.length);"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_84/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:22.552200819 -0500\n@@ -187,7 +187,8 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(\n+\t\t\t\t\tprobabilities.length);\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "final double r=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_240/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:23:39.012744971 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        final double r = random.nextDouble();\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double rnd=1.0d;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_407/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:24:53.777273423 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double rnd = 1.0d;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double result=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_274/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:23:53.692848999 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double result = Double.NaN;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 161, 
          "faulty": "sum+=probabilities[i];", 
          "type": "InsertBefore", 
          "seed": "double[] vals=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "int lower=getSupportLowerBound();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_16/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:21:49.359963280 -0500\n@@ -158,7 +158,8 @@\n         double sum = 0;\n \n         for (int i = 0; i < probabilities.length; i++) {\n-            sum += probabilities[i];\n+            double[] vals = null;\n+\t\t\tsum += probabilities[i];\n             if (randomValue < sum) {\n                 return singletons.get(i);\n             }\n@@ -187,7 +188,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double t=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_544/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:25:58.145725894 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                int j = 1;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,9 +187,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double t = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double[] vals=null;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_285/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:23:58.588883664 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double[] vals = null;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "int a=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_334/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:24:20.797040720 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        int a = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1276, 
          "faulty": "return out;", 
          "type": "InsertBefore", 
          "seed": "double result=1d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Delete", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 03:42:40.995070624 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_744/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 04:27:33.982395892 -0500\n@@ -1273,7 +1273,8 @@\n                  out[i] = values[i] * normalizedSum / sum;\n              }\n          }\n-         return out;\n+         double result = 1d;\n+\t\treturn out;\n      }\n \n      /** Build an array of elements.\n\n\n--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_744/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:27:33.986395920 -0500\n@@ -187,7 +187,6 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 163, 
          "faulty": "return singletons.get(i);", 
          "type": "InsertBefore", 
          "seed": "double r=1.0d;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double probability=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_94/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:27.108233359 -0500\n@@ -160,7 +160,8 @@\n         for (int i = 0; i < probabilities.length; i++) {\n             sum += probabilities[i];\n             if (randomValue < sum) {\n-                return singletons.get(i);\n+                double r = 1.0d;\n+\t\t\t\treturn singletons.get(i);\n             }\n         }\n \n@@ -186,9 +187,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double probability = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_432/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:25:05.313354674 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double min = Double.POSITIVE_INFINITY;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double min=Double.POSITIVE_INFINITY;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_69/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:15.980153852 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double min = Double.POSITIVE_INFINITY;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java", 
          "line": 1269, 
          "faulty": "for (int i=0; i < len; i++) {\n  if (Double.isNaN(values[i])) {\n    out[i]=Double.NaN;\n  }\n else {\n    out[i]=values[i] * normalizedSum / sum;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double[] special={Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY};"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "++i;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 03:42:40.995070624 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_397/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/util/MathArrays.java\t2018-12-02 04:24:49.661244414 -0500\n@@ -1266,7 +1266,9 @@\n          if (sum == 0) {\n              throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n          }\n-         for (int i = 0; i < len; i++) {\n+         final double[] special = { Double.NaN, Double.POSITIVE_INFINITY,\n+\t\t\t\tDouble.NEGATIVE_INFINITY };\n+\t\tfor (int i = 0; i < len; i++) {\n              if (Double.isNaN(values[i])) {\n                  out[i] = Double.NaN;\n              } else {\n\n\n--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_397/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:24:49.661244414 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            ++i;\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double qr=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_269/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:23:51.756835287 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double qr = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "final List<Pair<Double,T>> list=new ArrayList<Pair<Double,T>>();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_376/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:24:40.033176522 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        final List<Pair<Double, T>> list = new ArrayList<Pair<Double, T>>();\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "final double n=random.nextGaussian();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_345/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:24:26.249079232 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        final double n = random.nextGaussian();\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 189, 
          "faulty": "for (int i=0; i < sampleSize; i++) {\n  out[i]=sample();\n}", 
          "type": "Replace", 
          "seed": "double x=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_139/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:49.012389590 -0500\n@@ -186,9 +186,7 @@\n \n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n-        for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n-        }\n+        double x = 0;\n \n         return out;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "final double randomValue=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_53/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:22:08.412099729 -0500\n@@ -187,7 +187,7 @@\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            final double randomValue = random.nextDouble();\n         }\n \n         return out;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 182, 
          "faulty": "if (sampleSize <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);\n}", 
          "type": "Delete", 
          "seed": "double[] out=new double[sampleSize];"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java", 
          "line": 190, 
          "faulty": "out[i]=sample();", 
          "type": "Replace", 
          "seed": "double meanOfSquares=0;"
        }
      ], 
      "patch": "--- /tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 03:42:44.399092147 -0500\n+++ /tmp/RSRepair_Defects4J_Math_8/patches_i1q6/Patch_887/patched/tmp/RSRepair_Defects4J_Math_8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\t2018-12-02 04:28:40.386857902 -0500\n@@ -179,15 +179,10 @@\n      * positive.\n      */\n     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n-        if (sampleSize <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n-                    sampleSize);\n-        }\n-\n         final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n-            out[i] = sample();\n+            double meanOfSquares = 0;\n         }\n \n         return out;\n\n\n"
    }
  ]
}