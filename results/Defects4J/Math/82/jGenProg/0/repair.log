cd /tmp/jGenProg_Defects4J_Math_82;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../libs/jtestex7.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/astor.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-82 \
	-failing org.apache.commons.math.optimization.linear.SimplexSolverTest \
	-jvm4testexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-jvm4evosuitetestexecution /home/tdurieux/openjdk-1.7.0/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope local \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters x:x \
	-dependencies /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Math_82/target/classes/:/tmp/jGenProg_Defects4J_Math_82/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
2018-12-01 14:19:50,374 INFO main - command line arguments: [-mode  jgenprog  -location  .  -id  Math-82  -failing  org.apache.commons.math.optimization.linear.SimplexSolverTest  -jvm4testexecution  /home/tdurieux/openjdk-1.7.0/bin/  -jvm4evosuitetestexecution  /home/tdurieux/openjdk-1.7.0/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  local  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  x:x  -dependencies  /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Math_82/target/classes/:/tmp/jGenProg_Defects4J_Math_82/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar]
2018-12-01 14:19:50,377 INFO fr.inria.main.evolution.AstorMain - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:842) - Source folders: [/tmp/jGenProg_Defects4J_Math_82/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:861) - Source Test folders: [/tmp/jGenProg_Defects4J_Math_82/./src/test/java]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:75) - -Executing Gzoltar classpath: /tmp/jGenProg_Defects4J_Math_82/./output_astor/AstorMain-Math-82//bin//default from 448 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:149) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:169) - -gz-Adding classpath: [/tmp/jGenProg_Defects4J_Math_82/target/test-classes/, /tmp/jGenProg_Defects4J_Math_82/./output_astor/AstorMain-Math-82//bin//default, /tmp/jGenProg_Defects4J_Math_82/target/classes/, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:206) - Test failt: org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:218) - Gzoltar Test Result Total:2056, fails: 1, GZoltar suspicious 16279, with positive susp 177
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - nr test results 2056
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:271) - Gzoltar found: 154 with susp > 0.1, we consider: 154
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:689) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:781) - Creating model,  Code location from working folder: /tmp/jGenProg_Defects4J_Math_82/./output_astor/AstorMain-Math-82//src//default
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:65) - building model: /tmp/jGenProg_Defects4J_Math_82/./output_astor/AstorMain-Math-82//src//default, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:78) - Classpath for building SpoonModel [/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar, /tmp/jGenProg_Defects4J_Math_82/target/classes/, /tmp/jGenProg_Defects4J_Math_82/target/test-classes/, /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:693) - 
---- Initial suspicious size: 154
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:127) - Total suspicious from FL: 154,  144
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:136) - Total ModPoint created: 144
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 144, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 4
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /tmp/jGenProg_Defects4J_Math_82/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 23042
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math.optimization.linear.SimplexSolverTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:x= x
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-82
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0-u80-unofficial
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= jgenprog
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /home/tdurieux/openjdk-1.7.0/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/junit-4.11.jar:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/lib/cobertura-2.0.3.jar:/tmp/jGenProg_Defects4J_Math_82/target/classes/:/tmp/jGenProg_Defects4J_Math_82/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= local
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.processCreatedVariant(AstorCoreEngine.java:436) - -Found Solution, child variant #156
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:346) - Error variant :156 the model was not the same from the original after this generation
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.validateReversedOriginalVariant(AstorCoreEngine.java:364) - Undo Error: diff: 
/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -1,70 +1,28 @@
 public class ArrayRealVector implements java.io.Serializable , org.apache.commons.math.linear.RealVector {
-
-
 	private static final long serialVersionUID = -1097961340710804027L;
 
-
-	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = 
-	org.apache.commons.math.linear.RealVectorFormat.getInstance();
-
+	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();
 
 	protected double[] data;
 
-
-
-
-
-
-
-
-
-
 	public ArrayRealVector() {
 		data = new double[0];
 	}
 
-
-
-
-
 	public ArrayRealVector(int size) {
 		data = new double[size];
 	}
 
-
-
-
-
-
 	public ArrayRealVector(int size, double preset) {
 		data = new double[size];
 		java.util.Arrays.fill(data, preset);
 	}
 
-
-
-
-
 	public ArrayRealVector(double[] d) {
 		data = d.clone();
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public ArrayRealVector(double[] d, boolean copyArray) throws 
-	java.lang.IllegalArgumentException, java.lang.NullPointerException {
+	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
 		if (d == null) {
 			throw new java.lang.NullPointerException();
 		}
@@ -74,26 +32,14 @@
 		data = (copyArray) ? d.clone() : d;
 	}
 
-
-
-
-
-
-
 	public ArrayRealVector(double[] d, int pos, int size) {
 		if ((d.length) < (pos + size)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			"position {0} and size {1} don't fit to the size of the input array {2}", 
-			pos, size, d.length);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("position {0} and size {1} don't fit to the size of the input array {2}", pos, size, d.length);
 		}
 		data = new double[size];
 		java.lang.System.arraycopy(d, pos, data, 0, size);
 	}
 
-
-
-
-
 	public ArrayRealVector(java.lang.Double[] d) {
 		data = new double[d.length];
 		for (int i = 0; i < (d.length); i++) {
@@ -101,17 +47,9 @@
 		}
 	}
 
-
-
-
-
-
-
 	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
 		if ((d.length) < (pos + size)) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			"position {0} and size {1} don't fit to the size of the input array {2}", 
-			pos, size, d.length);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("position {0} and size {1} don't fit to the size of the input array {2}", pos, size, d.length);
 		}
 		data = new double[size];
 		for (int i = pos; i < (pos + size); i++) {
@@ -119,10 +57,6 @@
 		}
 	}
 
-
-
-
-
 	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
 		data = new double[v.getDimension()];
 		for (int i = 0; i < (data.length); ++i) {
@@ -130,75 +64,43 @@
 		}
 	}
 
-
-
-
-
 	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
 		data = v.data.clone();
 	}
 
-
-
-
-
-
 	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
 		data = (deep) ? v.data.clone() : v.data;
 	}
 
-
-
-
-
-
 	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
 		data = new double[(v1.data.length) + (v2.data.length)];
 		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
 		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
 	}
 
-
-
-
-
-
 	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
 		data = new double[(v1.data.length) + (v2.length)];
 		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
 		java.lang.System.arraycopy(v2, 0, data, v1.data.length, v2.length);
 	}
 
-
-
-
-
-
 	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
 		data = new double[(v1.length) + (v2.data.length)];
 		java.lang.System.arraycopy(v1, 0, data, 0, v1.length);
 		java.lang.System.arraycopy(v2.data, 0, data, v1.length, v2.data.length);
 	}
 
-
-
-
-
-
 	public ArrayRealVector(double[] v1, double[] v2) {
 		data = new double[(v1.length) + (v2.length)];
 		java.lang.System.arraycopy(v1, 0, data, 0, v1.length);
 		java.lang.System.arraycopy(v2, 0, data, v1.length, v2.length);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector copy() {
 		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
 	}
 
-
-	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
 		try {
 			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
 		} catch (java.lang.ClassCastException cce) {
@@ -211,9 +113,7 @@
 		}
 	}
 
-
-	public org.apache.commons.math.linear.RealVector add(double[] v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
 		checkVectorDimensions(v.length);
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -222,20 +122,11 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
-
-
-
-
-
-	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
 		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
 	}
 
-
-	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
 		try {
 			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
 		} catch (java.lang.ClassCastException cce) {
@@ -248,9 +139,7 @@
 		}
 	}
 
-
-	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
 		checkVectorDimensions(v.length);
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -259,18 +148,10 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
-
-
-
-
-
-	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
 		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapAdd(double d) {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -279,7 +160,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = (data[i]) + d;
@@ -287,7 +167,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapSubtract(double d) {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -296,7 +175,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = (data[i]) - d;
@@ -304,7 +182,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapMultiply(double d) {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -313,7 +190,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = (data[i]) * d;
@@ -321,7 +197,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapDivide(double d) {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -330,7 +205,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = (data[i]) / d;
@@ -338,7 +212,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapPow(double d) {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -347,7 +220,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.pow(data[i], d);
@@ -355,7 +227,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapExp() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -364,7 +235,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.exp(data[i]);
@@ -372,7 +242,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapExpm1() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -381,7 +250,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.expm1(data[i]);
@@ -389,7 +257,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapLog() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -398,7 +265,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.log(data[i]);
@@ -406,7 +272,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapLog10() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -415,7 +280,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.log10(data[i]);
@@ -423,7 +287,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapLog1p() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -432,7 +295,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.log1p(data[i]);
@@ -440,7 +302,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapCosh() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -449,7 +310,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.cosh(data[i]);
@@ -457,7 +317,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapSinh() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -466,7 +325,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.sinh(data[i]);
@@ -474,7 +332,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapTanh() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -483,7 +340,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.tanh(data[i]);
@@ -491,7 +347,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapCos() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -500,7 +355,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.cos(data[i]);
@@ -508,7 +362,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapSin() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -517,7 +370,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.sin(data[i]);
@@ -525,7 +377,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapTan() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -534,7 +385,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.tan(data[i]);
@@ -542,7 +392,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapAcos() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -551,7 +400,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.acos(data[i]);
@@ -559,7 +407,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapAsin() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -568,7 +415,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.asin(data[i]);
@@ -576,7 +422,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapAtan() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -585,7 +430,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.atan(data[i]);
@@ -593,7 +437,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapInv() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -602,7 +445,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = 1.0 / (data[i]);
@@ -610,7 +452,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapAbs() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -619,7 +460,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.abs(data[i]);
@@ -627,7 +467,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapSqrt() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -636,7 +475,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.sqrt(data[i]);
@@ -644,7 +482,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapCbrt() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -653,7 +490,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.cbrt(data[i]);
@@ -661,7 +497,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapCeil() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -670,7 +505,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.ceil(data[i]);
@@ -678,7 +512,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapFloor() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -687,7 +520,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.floor(data[i]);
@@ -695,7 +527,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapRint() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -704,7 +535,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.rint(data[i]);
@@ -712,7 +542,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapSignum() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -721,7 +550,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.signum(data[i]);
@@ -729,7 +557,6 @@
 		return this;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapUlp() {
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -738,7 +565,6 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
 		for (int i = 0; i < (data.length); i++) {
 			data[i] = java.lang.Math.ulp(data[i]);
@@ -746,9 +572,7 @@
 		return this;
 	}
 
-
-	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
 		try {
 			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
 		} catch (java.lang.ClassCastException cce) {
@@ -761,9 +585,7 @@
 		}
 	}
 
-
-	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
 		checkVectorDimensions(v.length);
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -772,20 +594,11 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
-
-
-
-
-
-	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
 		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
 	}
 
-
-	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
 		try {
 			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
 		} catch (java.lang.ClassCastException cce) {
@@ -798,9 +611,7 @@
 		}
 	}
 
-
-	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
 		checkVectorDimensions(v.length);
 		double[] out = new double[data.length];
 		for (int i = 0; i < (data.length); i++) {
@@ -809,34 +620,19 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
-
-
-
-
-
-	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
 		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
 	}
 
-
 	public double[] getData() {
 		return data.clone();
 	}
 
-
-
-
-
-
 	public double[] getDataRef() {
 		return data;
 	}
 
-
-	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
 		try {
 			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
 		} catch (java.lang.ClassCastException cce) {
@@ -849,9 +645,7 @@
 		}
 	}
 
-
-	public double dotProduct(double[] v) throws 
-	java.lang.IllegalArgumentException {
+	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
 		checkVectorDimensions(v.length);
 		double dot = 0;
 		for (int i = 0; i < (data.length); i++) {
@@ -860,18 +654,10 @@
 		return dot;
 	}
 
-
-
-
-
-
-
-	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
 		return dotProduct(v.data);
 	}
 
-
 	public double getNorm() {
 		double sum = 0;
 		for (double a : data) {
@@ -880,7 +666,6 @@
 		return java.lang.Math.sqrt(sum);
 	}
 
-
 	public double getL1Norm() {
 		double sum = 0;
 		for (double a : data) {
@@ -889,7 +674,6 @@
 		return sum;
 	}
 
-
 	public double getLInfNorm() {
 		double max = 0;
 		for (double a : data) {
@@ -898,9 +682,7 @@
 		return max;
 	}
 
-
-	public double getDistance(org.apache.commons.math.linear.RealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
 		try {
 			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
 		} catch (java.lang.ClassCastException cce) {
@@ -914,9 +696,7 @@
 		}
 	}
 
-
-	public double getDistance(double[] v) throws 
-	java.lang.IllegalArgumentException {
+	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
 		checkVectorDimensions(v.length);
 		double sum = 0;
 		for (int i = 0; i < (data.length); ++i) {
@@ -926,27 +706,11 @@
 		return java.lang.Math.sqrt(sum);
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
 		return getDistance(v.data);
 	}
 
-
-	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
 		try {
 			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
 		} catch (java.lang.ClassCastException cce) {
@@ -960,9 +724,7 @@
 		}
 	}
 
-
-	public double getL1Distance(double[] v) throws 
-	java.lang.IllegalArgumentException {
+	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
 		checkVectorDimensions(v.length);
 		double sum = 0;
 		for (int i = 0; i < (data.length); ++i) {
@@ -972,27 +734,11 @@
 		return sum;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
 		return getL1Distance(v.data);
 	}
 
-
-	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
 		try {
 			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
 		} catch (java.lang.ClassCastException cce) {
@@ -1006,9 +752,7 @@
 		}
 	}
 
-
-	public double getLInfDistance(double[] v) throws 
-	java.lang.IllegalArgumentException {
+	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
 		checkVectorDimensions(v.length);
 		double max = 0;
 		for (int i = 0; i < (data.length); ++i) {
@@ -1018,25 +762,10 @@
 		return max;
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
 		return getLInfDistance(v.data);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
 		final double norm = getNorm();
 		if (norm == 0) {
@@ -1045,7 +774,6 @@
 		return mapDivide(getNorm());
 	}
 
-
 	public void unitize() throws java.lang.ArithmeticException {
 		final double norm = getNorm();
 		if (norm == 0) {
@@ -1056,28 +784,19 @@
 		}
 	}
 
-
 	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
 		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
 	}
 
-
 	public org.apache.commons.math.linear.RealVector projection(double[] v) {
 		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
 	}
 
-
-
-
-
-
 	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
 		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
 	}
 
-
-	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
 		try {
 			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
 		} catch (java.lang.ClassCastException cce) {
@@ -1093,20 +812,11 @@
 		}
 	}
 
-
-
-
-
-
-
-	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
 		return outerProduct(v.data);
 	}
 
-
-	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws 
-	java.lang.IllegalArgumentException {
+	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
 		checkVectorDimensions(v.length);
 		final int m = data.length;
 		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
@@ -1118,17 +828,14 @@
 		return out;
 	}
 
-
 	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
 		return data[index];
 	}
 
-
 	public int getDimension() {
 		return data.length;
 	}
 
-
 	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
 		try {
 			return append(((org.apache.commons.math.linear.ArrayRealVector) (v)));
@@ -1137,16 +844,10 @@
 		}
 	}
 
-
-
-
-
-
 	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
 		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector append(double in) {
 		final double[] out = new double[(data.length) + 1];
 		java.lang.System.arraycopy(data, 0, out, 0, data.length);
@@ -1154,12 +855,10 @@
 		return new org.apache.commons.math.linear.ArrayRealVector(out);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector append(double[] in) {
 		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
 	}
 
-
 	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
 		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
 		try {
@@ -1171,7 +870,6 @@
 		return out;
 	}
 
-
 	public void setEntry(int index, double value) {
 		try {
 			data[index] = value;
@@ -1180,7 +878,6 @@
 		}
 	}
 
-
 	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
 		try {
 			try {
@@ -1196,7 +893,6 @@
 		}
 	}
 
-
 	public void setSubVector(int index, double[] v) {
 		try {
 			java.lang.System.arraycopy(v, 0, data, index, v.length);
@@ -1206,66 +902,33 @@
 		}
 	}
 
-
-
-
-
-
-
-
-
-	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws 
-	org.apache.commons.math.linear.MatrixIndexException {
+	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
 		setSubVector(index, v.data);
 	}
 
-
 	public void set(double value) {
 		java.util.Arrays.fill(data, value);
 	}
 
-
 	public double[] toArray() {
 		return data.clone();
 	}
 
-
 	@java.lang.Override
 	public java.lang.String toString() {
 		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
 	}
 
-
-
-
-
-
-
-	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws 
-	java.lang.IllegalArgumentException {
+	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
 		checkVectorDimensions(v.getDimension());
 	}
 
-
-
-
-
-
-
-
-	protected void checkVectorDimensions(int n) throws 
-	java.lang.IllegalArgumentException {
+	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
 		if ((data.length) != n) {
-			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
-			"vector length mismatch: got {0} but expected {1}", 
-			data.length, n);
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
 		}
 	}
 
-
-
-
-
 	public boolean isNaN() {
 		for (double v : data) {
 			if (java.lang.Double.isNaN(v)) {
@@ -1275,88 +938,45 @@
 		return false;
 	}
 
-
-
-
-
-
-
 	public boolean isInfinite() {
-
 		if (isNaN()) {
 			return false;
 		}
-
 		for (double v : data) {
 			if (java.lang.Double.isInfinite(v)) {
 				return true;
 			}
 		}
-
 		return false;
-
 	}
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
 	@java.lang.Override
 	public boolean equals(java.lang.Object other) {
-
 		if ((this) == other) {
 			return true;
 		}
-
 		if (other == null) {
 			return false;
 		}
-
 		try {
-
 			org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
 			if ((data.length) != (rhs.getDimension())) {
 				return false;
 			}
-
 			if (rhs.isNaN()) {
 				return this.isNaN();
 			}
-
 			for (int i = 0; i < (data.length); ++i) {
 				if ((data[i]) != (rhs.getEntry(i))) {
 					return false;
 				}
 			}
 			return true;
-
 		} catch (java.lang.ClassCastException ex) {
-
 			return false;
 		}
-
 	}
 
-
-
-
-
-
 	@java.lang.Override
 	public int hashCode() {
 		if (isNaN()) {
@@ -1365,18 +985,9 @@
 		return org.apache.commons.math.util.MathUtils.hash(data);
 	}
 
-
-
-
-
-
-	private void checkIndex(final int index) throws 
-	org.apache.commons.math.linear.MatrixIndexException {
+	private void checkIndex(final int index) throws org.apache.commons.math.linear.MatrixIndexException {
 		if ((index < 0) || (index >= (getDimension()))) {
-			throw new org.apache.commons.math.linear.MatrixIndexException(
-			"index {0} out of allowed range [{1}, {2}]", 
-			index, 0, ((getDimension()) - 1));
+			throw new org.apache.commons.math.linear.MatrixIndexException("index {0} out of allowed range [{1}, {2}]", index, 0, ((getDimension()) - 1));
 		}
 	}
-
 }
\ No newline at end of file

[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:168) - Time Repair Loop (s): 48.927
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - generationsexecuted: 78
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:234) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:184) - 
 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 156
 
time(sec)= 48
operation: RemoveOp
location= org.apache.commons.math.optimization.linear.SimplexSolver
line= 63
lineSuspiciousness= 0.267
lineSuspiciousness= 39
original statement= minValue = tableau.getEntry(0, i)
buggy kind= CtAssignmentImpl|CtBlockImpl
fixed statement= 
generation= 78
ingredientScope= -
validation=|true|0|2056|[]|
diffpatch=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -18,10 +18,9 @@
 		double minValue = 0;
 		java.lang.Integer minPos = null;
 		for (int i = tableau.getNumObjectiveFunctions(); i < ((tableau.getWidth()) - 1); i++) {
-			if ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0) {
-				minValue = tableau.getEntry(0, i);
+			if ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0)
 				minPos = i;
-			}
+
 		}
 		return minPos;
 	}


diffpatchoriginal=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -59,10 +59,10 @@
 		double minValue = 0;
 		java.lang.Integer minPos = null;
 		for (int i = tableau.getNumObjectiveFunctions(); i < ((tableau.getWidth()) - 1); i++) {
-			if ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0) {
-				minValue = tableau.getEntry(0, i);
+			if ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0)
+
 				minPos = i;
-			}
+
 		}
 		return minPos;
 	}



Astor Output:

General stats:
EXECUTION_IDENTIFIER=Math-82
TOTAL_TIME=48.927
NR_GENERATIONS=78
NR_RIGHT_COMPILATIONS=45
NR_FAILLING_COMPILATIONS=33
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND

Patch stats:

Patch 1
VARIANT_ID=156
TIME=48
VALIDATION=|true|0|2056|[]|
GENERATION=78
FOLDER_SOLUTION_CODE=/tmp/jGenProg_Defects4J_Math_82/./output_astor/AstorMain-Math-82//bin//variant-156
--Patch Hunk #1
OPERATOR=RemoveOp

LOCATION=org.apache.commons.math.optimization.linear.SimplexSolver

PATH=/tmp/jGenProg_Defects4J_Math_82/output_astor/AstorMain-Math-82/src/default/org/apache/commons/math/optimization/linear/SimplexSolver.java

MODIFIED_FILE_PATH=/tmp/jGenProg_Defects4J_Math_82/./output_astor/AstorMain-Math-82//src//variant-156_f/org/apache/commons/math/optimization/linear/SimplexSolver.java

LINE=63

SUSPICIOUNESS=0.267

MP_RANKING=39

ORIGINAL_CODE=minValue = tableau.getEntry(0, i)

BUGGY_CODE_TYPE=CtAssignmentImpl|CtBlockImpl

PATCH_HUNK_CODE=null

PATCH_HUNK_TYPE=null

INGREDIENT_SCOPE=-

INGREDIENT_PARENT=null

PATCH_DIFF_ORIG=/var/lib/oar/.batch_job_bashrc: line 5: /home/tdurieux/.bashrc: No such file or directory
--- org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -59,10 +59,10 @@
 		double minValue = 0;
 		java.lang.Integer minPos = null;
 		for (int i = tableau.getNumObjectiveFunctions(); i < ((tableau.getWidth()) - 1); i++) {
-			if ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0) {
-				minValue = tableau.getEntry(0, i);
+			if ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0)
+
 				minPos = i;
-			}
+
 		}
 		return minPos;
 	}



[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:103) - Storing ing JSON at /tmp/jGenProg_Defects4J_Math_82/./output_astor/AstorMain-Math-82//astor_output.json
[INFO ] fr.inria.astor.core.output.PatchJSONStandarOutput.produceOutput(PatchJSONStandarOutput.java:104) - astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":45,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Math-82","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":33,"NR_GENERATIONS":78,"TOTAL_TIME":48.927,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"156","VALIDATION":"|true|0|2056|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.linear.SimplexSolver","PATH":"\\\/tmp\\\/jGenProg_Defects4J_Math_82\\\/output_astor\\\/AstorMain-Math-82\\\/src\\\/default\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","INGREDIENT_SCOPE":"-","ORIGINAL_CODE":"minValue = tableau.getEntry(0, i)","BUGGY_CODE_TYPE":"CtAssignmentImpl|CtBlockImpl","OPERATOR":"RemoveOp","MODIFIED_FILE_PATH":"\\\/tmp\\\/jGenProg_Defects4J_Math_82\\\/.\\\/output_astor\\\/AstorMain-Math-82\\\/\\\/src\\\/\\\/variant-156_f\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","LINE":"63","SUSPICIOUNESS":"0.267","MP_RANKING":"39"}],"TIME":"48","GENERATION":"78","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/jGenProg_Defects4J_Math_82\\\/.\\\/output_astor\\\/AstorMain-Math-82\\\/\\\/bin\\\/\\\/variant-156","PATCH_DIFF_ORIG":"\\\/var\\\/lib\\\/oar\\\/.batch_job_bashrc: line 5: \\\/home\\\/tdurieux\\\/.bashrc: No such file or directory\\n--- org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n+++ org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n@@ -59,10 +59,10 @@\\n \\t\\tdouble minValue = 0;\\n \\t\\tjava.lang.Integer minPos = null;\\n \\t\\tfor (int i = tableau.getNumObjectiveFunctions(); i < ((tableau.getWidth()) - 1); i++) {\\n-\\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0) {\\n-\\t\\t\\t\\tminValue = tableau.getEntry(0, i);\\n+\\t\\t\\tif ((org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon)) < 0)\\n+\\n \\t\\t\\t\\tminPos = i;\\n-\\t\\t\\t}\\n+\\n \\t\\t}\\n \\t\\treturn minPos;\\n \\t}\\n\\n"}]}
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:200) - Time Total(s): 101.442
251.69user 5.54system 1:42.52elapsed 250%CPU (0avgtext+0avgdata 1582500maxresident)k
96232inputs+35432outputs (32major+973163minor)pagefaults 0swaps


Node: petitprince-3.luxembourg.grid5000.fr



Date: Sat Dec  1 14:21:32 EST 2018

