{
  "repair_end": "2018-12-02 19:52:56.526318", 
  "repair_begin": "2018-12-02 18:59:33.415526", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 175, 
          "faulty": "final Localizable pat=msgPatterns.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getLocalizedMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Delete", 
          "seed": "return tableau.getSolution();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_333/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:40:43.882529424 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_333/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:43.882529424 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_333/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:43.886529596 -0500\n@@ -172,13 +172,16 @@\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n-            final Localizable pat = msgPatterns.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final String path = LocalizedFormats.class.getName()\n+\t\t\t\t\t\t.replaceAll(\"\\\\.\", \"/\");\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 171, 
          "faulty": "final StringBuilder sb=new StringBuilder();", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_837/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:35.788032801 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_837/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:35.788032801 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -136,7 +125,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_837/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:35.792032968 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_837/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:35.792032968 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n@@ -168,7 +169,9 @@\n      */\n     private String buildMessage(Locale locale,\n                                 String separator) {\n-        final StringBuilder sb = new StringBuilder();\n+        final String path = LocalizedFormats.class\n+\t\t\t\t\t\t\t\t\t\t\t.getName().replaceAll(\"\\\\.\", \"/\");\n+\t\tfinal StringBuilder sb = new StringBuilder();\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_670/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:01.609531415 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_670/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:01.613531584 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_670/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:45:01.613531584 -0500\n@@ -134,7 +134,9 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\n+\t\t\t\t\"/\");\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_442/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:10.558252451 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_442/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:10.558252451 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_442/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:42:10.562252622 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_781/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:46:50.330120797 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_781/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:50.334120966 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -148,7 +141,8 @@\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_781/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:50.334120966 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_847/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:42.436312128 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_847/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:42.440312295 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -136,7 +125,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_847/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:42.440312295 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_390/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:41:24.668284639 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_390/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:24.676284982 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_390/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:24.676284982 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_390/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:41:24.680285154 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return getWidth() - 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_694/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:21.818386401 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_694/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:21.818386401 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_694/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:21.822386570 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 175, 
          "faulty": "final Localizable pat=msgPatterns.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_241/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:39:22.539009110 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_241/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:39:22.543009285 -0500\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_241/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:39:22.543009285 -0500\n@@ -172,13 +172,16 @@\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n-            final Localizable pat = msgPatterns.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final String path = LocalizedFormats.class.getName()\n+\t\t\t\t\t\t.replaceAll(\"\\\\.\", \"/\");\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1223/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:43.861094655 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1223/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:43.865094828 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +129,16 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1223/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:52:43.865094828 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() == 0) {\n  return null;\n}\n else if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 378, 
          "faulty": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1237/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:53.233500247 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1237/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:53.237500420 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +129,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1237/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:52:53.237500420 -0500\n@@ -375,7 +375,8 @@\n     /** {@inheritDoc} */\n     public String getLocalizedString(final Locale locale) {\n         try {\n-            final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tfinal String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n             ResourceBundle bundle =\n                     ResourceBundle.getBundle(\"assets/\" + path, locale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 175, 
          "faulty": "final Localizable pat=msgPatterns.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_406/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:37.104818644 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_406/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:37.108818816 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_406/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:41:37.112818987 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n@@ -172,13 +172,16 @@\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n-            final Localizable pat = msgPatterns.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final String path = LocalizedFormats.class.getName()\n+\t\t\t\t\t\t.replaceAll(\"\\\\.\", \"/\");\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "Set<Integer> columnsToDrop=new TreeSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_508/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:01.304420539 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_508/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:01.308420708 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "final SimplexTableau tableau=new SimplexTableau(getFunction(),getConstraints(),getGoalType(),restrictToNonNegative(),epsilon,maxUlps);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:35:45.645567498 -0500\n@@ -142,7 +142,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() == 0) {\n  return null;\n}\n else if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1157/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:48.706700930 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1157/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:48.710701103 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,12 +128,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                     }\n                 }\n                 return minRow;\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1157/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:48.710701103 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_889/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:10.717499529 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1180/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:03.907361865 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1180/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:03.907361865 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,15 +128,20 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1180/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:52:03.911362037 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_787/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:46:54.130280780 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_787/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:54.134280948 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -136,7 +129,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_787/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:54.134280948 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_787/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:46:54.138281117 -0500\n@@ -183,7 +183,9 @@\n             }\n         }\n \n-        return sb.toString();\n+        final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\n+\t\t\t\t\"/\");\n+\t\treturn sb.toString();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1209/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:33.576649214 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1209/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:33.576649214 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,13 +132,22 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1209/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:52:33.580649386 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_789/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:46:55.030318667 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_789/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:55.034318835 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -136,7 +129,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_789/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:55.034318835 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_789/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:46:55.038319003 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "this.maxIterations=maxIterations;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_916/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:29.182274086 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            this.maxIterations = maxIterations;\n+\t\t\tthrow new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_916/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:29.186274254 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -136,13 +125,13 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_916/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:48:29.186274254 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_856/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:48.988587347 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_856/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:48.992587515 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,15 +133,23 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 80, 
          "faulty": "return context.getMessage();", 
          "type": "Replace", 
          "seed": "return context.getMessage();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_258/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:39:35.699580571 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "int slackVar=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1221/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:42.957055516 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1221/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:42.961055689 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +128,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1221/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:52:42.961055689 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_978/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:49:30.120826663 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_978/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:49:30.120826663 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,13 +128,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_978/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:49:30.124826830 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_324/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:37.162239613 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_324/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:40:37.166239786 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_324/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:37.166239786 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getLocalizedMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "incrementIterationsCounter();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "Delete", 
          "seed": "initializeColumnLabels();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1151/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:45.182547561 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1151/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:45.182547561 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,18 +114,8 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n-            // 2. apply Bland's rule to prevent cycling:\n+            incrementIterationsCounter();\n+\t\t\t\t// 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n             // see http://www.stanford.edu/class/msande310/blandrule.pdf\n@@ -140,10 +129,33 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1151/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:45.186547735 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1151/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:51:45.186547735 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        int count = 0;\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 140, 
          "faulty": "for (Integer row : minRatioPositions) {\n  int i=tableau.getNumObjectiveFunctions();\n  for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n    if (row == tableau.getBasicRow(i)) {\n      if (i < minIndex) {\n        minIndex=i;\n        minRow=row;\n      }\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "int slackVar=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1074/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:42.027832137 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1074/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:42.031832303 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -137,17 +125,7 @@\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n-                }\n+                int slackVar = 0;\n                 return minRow;\n         }\n         return minRatioPositions.get(0);\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1074/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:50:42.031832303 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_327/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:39.238329162 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_327/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:40:39.242329335 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_685/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:17.062185262 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_685/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:17.062185262 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -148,7 +141,8 @@\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_685/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:17.066185431 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 141, 
          "faulty": "int i=tableau.getNumObjectiveFunctions();", 
          "type": "Replace", 
          "seed": "int i=tableau.getNumObjectiveFunctions();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "this.epsilon=epsilon;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1062/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:33.139460985 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +129,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n+                            int count = 0;\n+\t\t\t\t\t\t\tif (i < minIndex) {\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_796/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:04.786729262 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_796/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:04.790729430 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_796/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:04.790729430 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_824/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:23.043497127 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,15 +133,23 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "InsertBefore", 
          "seed": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_353/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:58.867175008 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_353/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:40:58.867175008 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_353/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:58.871175180 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "final double entry=getEntry(i,col);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_487/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:47.479830678 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_487/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:47.483830850 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_696/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:22.682422935 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_696/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:22.682422935 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_696/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:22.686423104 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_600/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:09.939340957 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "double minValue=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_882/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:06.001301609 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_882/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:06.005301778 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -136,11 +129,13 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n+                        double minValue = 0;\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n                                 minRow = row;\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_882/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:48:06.005301778 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_882/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:48:06.009301945 -0500\n@@ -183,7 +183,9 @@\n             }\n         }\n \n-        return sb.toString();\n+        final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\n+\t\t\t\t\"/\");\n+\t\treturn sb.toString();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 80, 
          "faulty": "return context.getMessage();", 
          "type": "Replace", 
          "seed": "return context.getMessage();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_289/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:06.616920100 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_859/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:50.856665800 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_859/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:50.860665968 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -136,13 +125,13 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_859/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:50.864666135 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_859/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:50.864666135 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Delete", 
          "seed": "return minRow;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "InsertBefore", 
          "seed": "this.throwable=throwable;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_699/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:24.466498368 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_699/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:24.470498537 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_699/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:24.470498537 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_699/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:45:24.474498705 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        this.throwable = throwable;\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "final SimplexTableau tableau=new SimplexTableau(getFunction(),getConstraints(),getGoalType(),restrictToNonNegative(),epsilon,maxUlps);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_65/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:36:47.576268079 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_65/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:36:47.580268253 -0500\n@@ -178,7 +178,8 @@\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final List<Object> list = new ArrayList<Object>();\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1128/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:28.089802940 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1128/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:28.093803114 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,13 +132,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1128/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:28.093803114 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1092/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:05.204803979 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1092/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:05.208804154 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,12 +128,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                     }\n                 }\n                 return minRow;\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1092/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:05.208804154 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_468/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:42:35.575322281 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_468/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:35.579322452 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_468/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:35.579322452 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer minRow=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_544/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:30.409660560 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_544/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:30.413660730 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1211/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:34.588693065 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1211/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:34.588693065 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +128,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1211/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:52:34.592693239 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 80, 
          "faulty": "return context.getMessage();", 
          "type": "Replace", 
          "seed": "return context.getMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 176, 
          "faulty": "final Object[] args=msgArguments.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_314/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:30.489951699 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_314/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:30.493951871 -0500\n@@ -173,7 +173,8 @@\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n-            final Object[] args = msgArguments.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1031/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:08.630437061 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1031/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:08.630437061 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,13 +133,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_296/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:17.397386229 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_296/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:40:17.397386229 -0500\n@@ -376,7 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle =\n                     ResourceBundle.getBundle(\"assets/\" + path, locale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_809/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:13.163081639 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_809/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:13.167081808 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -136,7 +129,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_809/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:13.167081808 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_809/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:13.171081976 -0500\n@@ -183,7 +183,9 @@\n             }\n         }\n \n-        return sb.toString();\n+        final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\n+\t\t\t\t\"/\");\n+\t\treturn sb.toString();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_873/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:59.457026911 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_873/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:59.457026911 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +134,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_873/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:59.461027078 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 117, 
          "faulty": "return -1;", 
          "type": "InsertBefore", 
          "seed": "if (x < y) {\n  return -1;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-02 12:59:13.008663027 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_904/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-02 13:48:22.597997951 -0500\n@@ -114,7 +114,10 @@\n         if (equals(x, y, maxUlps)) {\n             return 0;\n         } else if (x < y) {\n-            return -1;\n+            if (x < y) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+\t\t\treturn -1;\n         }\n         return 1;\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_904/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:22.597997951 -0500\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n@@ -140,13 +139,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_655/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:50.657067647 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_655/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:50.657067647 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_655/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:50.661067817 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 80, 
          "faulty": "return context.getMessage();", 
          "type": "Replace", 
          "seed": "return context.getMessage();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_307/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:40:24.829707317 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_307/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:24.833707490 -0500\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "int minIndex=tableau.getWidth();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1103/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:12.453120632 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1103/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:12.457120806 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +128,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1103/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:12.457120806 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_256/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:39:34.811542034 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_256/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:39:34.811542034 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "if (++iterations > maxIterations) {\n  throw new MaxCountExceededException(maxIterations);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_171/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:38:20.140288613 -0500\n@@ -125,7 +125,10 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            if (++iterations > maxIterations) {\n+\t\t\t\tthrow new MaxCountExceededException(maxIterations);\n+\t\t\t}\n+\t\t\tthrow new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_171/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:38:20.140288613 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_387/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:22.588195269 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_387/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:22.592195441 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1097/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:08.776960064 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1097/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:08.776960064 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,8 +134,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1097/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:08.780960238 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Replace", 
          "seed": "Integer minPos=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1164/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:53.134893570 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1164/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:53.134893570 -0500\n@@ -101,7 +101,7 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n+                    Integer minPos = null;\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,13 +133,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1164/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:53.138893744 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_813/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:16.259211854 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_813/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:16.263212023 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "InsertBefore", 
          "seed": "msgArguments=new ArrayList<Object[]>(len);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_955/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:49:07.083862333 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            setMaxIterations(DEFAULT_MAX_ITERATIONS);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_955/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:49:07.083862333 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_955/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:49:07.087862499 -0500\n@@ -183,7 +183,8 @@\n             }\n         }\n \n-        return sb.toString();\n+        msgArguments = new ArrayList<Object[]>(len);\n+\t\treturn sb.toString();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "final double entry=getEntry(i,col);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 141, 
          "faulty": "int i=tableau.getNumObjectiveFunctions();", 
          "type": "InsertBefore", 
          "seed": "tableau.dropPhase1Objective();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_575/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:52.394595649 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_575/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:52.398595819 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -138,13 +130,11 @@\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n+                    tableau.dropPhase1Objective();\n+\t\t\t\t\tint i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_839/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:36.924080537 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,15 +133,23 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "InsertBefore", 
          "seed": "minRow=row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Delete", 
          "seed": "initializeColumnLabels();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_511/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:03.120497984 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_511/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:03.124498154 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,8 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minRow = row;\n+\t\t\t\t\t\t\tminIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_511/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:03.124498154 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_449/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:42:15.410460107 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_449/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:15.414460279 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_449/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:15.414460279 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1053/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:26.867199017 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1053/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:26.871199184 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +128,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1053/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:50:26.871199184 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_783/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:46:51.230158690 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_783/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:51.230158690 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_783/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:51.234158858 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "final SimplexTableau tableau=new SimplexTableau(getFunction(),getConstraints(),getGoalType(),restrictToNonNegative(),epsilon,maxUlps);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_59/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:36:43.172076651 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_558/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:40.218077906 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() == 0) {\n  return null;\n}\n else if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Replace", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1174/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:59.379165075 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1174/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:59.379165075 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,12 +128,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                     }\n                 }\n                 return minRow;\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1174/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:59.383165250 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "return GEQ;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1118/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:21.189501978 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1118/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:21.189501978 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,8 +134,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1118/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:21.193502152 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 173, 
          "faulty": "final int len=msgPatterns.size();", 
          "type": "Replace", 
          "seed": "final int len=msgPatterns.size();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_642/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:42.524723111 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_642/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:42.524723111 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_642/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:42.528723280 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n@@ -387,8 +388,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_642/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:44:42.528723280 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_346/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:40:54.150971912 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_346/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:54.154972084 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_346/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:40:54.154972084 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Delete", 
          "seed": "if (!Precision.equals(tableau.getEntry(0,tableau.getRhsOffset()),0d,epsilon)) {\n  throw new NoFeasibleSolutionException();\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1019/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:00.554099486 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1019/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:00.554099486 -0500\n@@ -101,7 +101,7 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n+                    setMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,13 +129,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1019/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:50:00.558099653 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "Set<Integer> columnsToDrop=new TreeSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "solvePhase1(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_580/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:56.026750012 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -142,7 +131,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_580/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:56.030750181 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "InsertBefore", 
          "seed": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_715/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:37.627054589 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_715/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:37.631054756 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,9 +132,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n+                        minRatioPositions.add(i);\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n+                                if (i < minIndex) {\n+\t\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tminIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_715/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:37.631054756 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Replace", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Delete", 
          "seed": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_922/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:34.190484077 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            setMaxIterations(DEFAULT_MAX_ITERATIONS);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_922/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:34.190484077 -0500\n@@ -101,7 +101,7 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n+                    int artificialVar = 0;\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_591/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:04.635115716 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 80, 
          "faulty": "return context.getMessage();", 
          "type": "Replace", 
          "seed": "return context.getMessage();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_366/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:07.231535002 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_366/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:07.235535174 -0500\n@@ -376,7 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle =\n                     ResourceBundle.getBundle(\"assets/\" + path, locale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1228/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:46.517209632 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tthrow new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1228/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:46.521209805 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,10 +133,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 175, 
          "faulty": "final Localizable pat=msgPatterns.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getLocalizedMessage();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_320/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:40:34.238113457 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_320/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:34.242113629 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_320/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:34.242113629 -0500\n@@ -172,13 +172,16 @@\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n-            final Localizable pat = msgPatterns.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final String path = LocalizedFormats.class.getName()\n+\t\t\t\t\t\t.replaceAll(\"\\\\.\", \"/\");\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_690/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:19.846303008 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_690/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:19.846303008 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_802/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:09.458925829 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_802/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:09.462925997 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -136,7 +125,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_802/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:09.466926165 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_802/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:09.466926165 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "final double entry=getEntry(i,col);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_459/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:42:22.730773244 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_459/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:22.734773415 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_459/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:22.734773415 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "if (tableau.getNumArtificialVariables() == 0) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "Replace", 
          "seed": "for (int i=tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n  final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);\n  final double entry=tableau.getEntry(i,col);\n  if (Precision.compareTo(entry,0d,maxUlps) > 0) {\n    final double ratio=rhs / entry;\n    final int cmp=Double.compare(ratio,minRatio);\n    if (cmp == 0) {\n      minRatioPositions.add(i);\n    }\n else     if (cmp < 0) {\n      minRatio=ratio;\n      minRatioPositions=new ArrayList<Integer>();\n      minRatioPositions.add(i);\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_419/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:52.433476094 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_419/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:52.433476094 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 176, 
          "faulty": "final Object[] args=msgArguments.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_758/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:24.237021559 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_758/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:46:24.241021726 -0500\n@@ -173,7 +173,8 @@\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n-            final Object[] args = msgArguments.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_302/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:22.029586374 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_302/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:40:22.033586547 -0500\n@@ -376,7 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle =\n                     ResourceBundle.getBundle(\"assets/\" + path, locale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_302/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:22.033586547 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_607/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:15.211564766 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_607/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:15.215564937 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 140, 
          "faulty": "for (Integer row : minRatioPositions) {\n  int i=tableau.getNumObjectiveFunctions();\n  for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n    if (row == tableau.getBasicRow(i)) {\n      if (i < minIndex) {\n        minIndex=i;\n        minRow=row;\n      }\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "int slackVar=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1080/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:50.940204195 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1080/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:50.940204195 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -137,17 +125,7 @@\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n-                }\n+                int slackVar = 0;\n                 return minRow;\n         }\n         return minRatioPositions.get(0);\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1080/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:50:50.944204360 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1071/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:40.283759316 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1071/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:40.283759316 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,13 +133,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_752/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:46:15.156638710 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_752/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:15.156638710 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_752/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:15.160638880 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_863/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:53.040757517 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,15 +133,23 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_907/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:24.266067914 -0500\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n@@ -140,10 +139,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "double minValue=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(i,col);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1024/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:03.894239107 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double minValue = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1024/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:03.894239107 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,10 +133,18 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n+                                final double entry = tableau.getEntry(i, col);\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1121/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:22.841574053 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1121/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:22.841574053 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,13 +132,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1121/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:22.845574228 -0500\n@@ -387,9 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n-        return sourceFormat;\n+        final StringBuilder sb = new StringBuilder();\n+\t\treturn sourceFormat;\n \n     }\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "Set<Integer> columnsToDrop=new TreeSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_595/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:07.295228685 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_595/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:07.299228856 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_595/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:07.299228856 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_86/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:37:06.041069670 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_86/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:37:06.045069844 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        int count = 0;\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_86/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:37:06.045069844 -0500\n@@ -178,7 +178,8 @@\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final List<Object> list = new ArrayList<Object>();\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_845/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:41.552274989 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -136,11 +125,13 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n+                        minRatioPositions = new ArrayList<Integer>();\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n                                 minRow = row;\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_845/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:41.556275157 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_662/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:56.133299567 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_662/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:56.133299567 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_662/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:56.137299736 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_819/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:20.051371321 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -136,7 +125,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_819/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:20.051371321 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_598/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:09.063303762 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_598/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:09.067303931 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer minRow=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_549/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:34.477833692 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_549/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:34.481833862 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -141,10 +129,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_549/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:34.481833862 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_9/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:35:53.165896473 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_452/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:17.202536782 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_452/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:17.206536953 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "return GEQ;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_636/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:38.100535607 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_636/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:38.100535607 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_636/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:38.104535776 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n@@ -387,8 +388,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_636/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:44:38.104535776 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "if (getNumObjectiveFunctions() == 1) {\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_804/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:10.466968233 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_804/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:10.470968401 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -136,13 +129,13 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_804/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:10.474968569 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_804/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:10.474968569 -0500\n@@ -183,7 +183,9 @@\n             }\n         }\n \n-        return sb.toString();\n+        final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\n+\t\t\t\t\"/\");\n+\t\treturn sb.toString();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "final double entry=getEntry(i,col);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_437/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:07.634127273 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_437/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:07.634127273 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "throw new MaxCountExceededException(maxIterations);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_477/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:42:42.043598571 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_477/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:42.043598571 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_477/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:42.047598742 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_477/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:42:42.047598742 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "final double entry=tableau.getEntry(i,col);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_611/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:18.547706351 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getLocalizedMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "incrementIterationsCounter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1134/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:31.641957788 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1134/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:31.641957788 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,18 +114,8 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n-            // 2. apply Bland's rule to prevent cycling:\n+            incrementIterationsCounter();\n+\t\t\t\t// 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n             // see http://www.stanford.edu/class/msande310/blandrule.pdf\n@@ -140,10 +129,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1134/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:31.645957963 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1134/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:51:31.645957963 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        int count = 0;\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "final SimplexTableau tableau=new SimplexTableau(getFunction(),getConstraints(),getGoalType(),restrictToNonNegative(),epsilon,maxUlps);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_51/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:36:35.735753221 -0500\n@@ -142,7 +142,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_51/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:36:35.735753221 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        context = new HashMap<String, Object>();\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_359/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:02.547333430 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_359/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:02.551333602 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 175, 
          "faulty": "final Localizable pat=msgPatterns.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_254/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:39:33.927503668 -0500\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_254/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:39:33.927503668 -0500\n@@ -172,13 +172,16 @@\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n-            final Localizable pat = msgPatterns.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final String path = LocalizedFormats.class.getName()\n+\t\t\t\t\t\t.replaceAll(\"\\\\.\", \"/\");\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "return GEQ;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Delete", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1154/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:47.046628692 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1154/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:47.046628692 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,6 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1154/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:47.050628865 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer minRow=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_479/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:42:42.971638202 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_479/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:42.971638202 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_479/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:42.971638202 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_613/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:19.595750824 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_613/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:19.595750824 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_854/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:48.004546019 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_854/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:48.008546187 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -136,7 +129,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_854/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:48.008546187 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_854/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:48.012546354 -0500\n@@ -183,7 +183,9 @@\n             }\n         }\n \n-        return sb.toString();\n+        final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\n+\t\t\t\t\"/\");\n+\t\treturn sb.toString();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "return GEQ;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "final double entry=getEntry(i,col);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1192/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:17.567955030 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1192/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:17.571955203 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,12 +133,22 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                     }\n                 }\n                 return minRow;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "int artificialVar=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_447/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:14.510421595 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_447/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:14.510421595 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_902/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:21.581955334 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_902/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:21.585955502 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,6 +133,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_355/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:59.771213928 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_355/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:40:59.771213928 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_355/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:59.775214102 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1037/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:14.798694826 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1037/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:14.798694826 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +128,16 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1037/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:50:14.802694993 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_909/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:25.282110527 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_909/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:25.282110527 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -142,7 +130,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_909/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:48:25.286110695 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_821/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:21.043413033 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_821/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:21.047413202 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_372/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:11.751729439 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_372/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:11.751729439 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "tableau.dropPhase1Objective();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1099/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:09.757002876 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1099/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:09.761003051 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,18 +114,8 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n-            // 2. apply Bland's rule to prevent cycling:\n+            tableau.dropPhase1Objective();\n+\t\t\t\t// 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n             // see http://www.stanford.edu/class/msande310/blandrule.pdf\n@@ -140,15 +129,29 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1099/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:09.761003051 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_886/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:08.793418788 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_886/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:08.797418956 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -136,13 +124,13 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_886/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:48:08.797418956 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_886/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:48:08.801419123 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1198/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:21.136109842 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1198/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:21.140110016 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +129,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getLocalizedMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "incrementIterationsCounter();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1185/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:12.483734351 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1185/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:12.487734525 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,18 +114,8 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n-            // 2. apply Bland's rule to prevent cycling:\n+            incrementIterationsCounter();\n+\t\t\t\t// 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n             // see http://www.stanford.edu/class/msande310/blandrule.pdf\n@@ -140,10 +129,24 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1185/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:52:12.487734525 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1185/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:52:12.491734700 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        int count = 0;\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_560/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:41.262122314 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_560/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:41.266122484 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_914/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:28.286236512 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_914/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:28.290236679 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,10 +132,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_914/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:48:28.290236679 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return getWidth() - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 227, 
          "faulty": "doIteration(tableau);", 
          "type": "InsertBefore", 
          "seed": "double minValue=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_769/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:36.921556091 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,7 +134,8 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n+                            int artificialVar = 0;\n+\t\t\t\t\t\t\tif (i < minIndex) {\n                                 minIndex = i;\n                                 minRow = row;\n                             }\n@@ -224,7 +218,8 @@\n         tableau.dropPhase1Objective();\n \n         while (!tableau.isOptimal()) {\n-            doIteration(tableau);\n+            double minValue = 0;\n+\t\t\tdoIteration(tableau);\n         }\n         return tableau.getSolution();\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_769/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:36.921556091 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "Set<Integer> columnsToDrop=new TreeSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_566/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:45.094285289 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_566/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:45.098285459 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_631/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:34.452380957 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_631/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:34.452380957 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_631/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:34.456381125 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "final double entry=getEntry(i,col);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 141, 
          "faulty": "int i=tableau.getNumObjectiveFunctions();", 
          "type": "InsertBefore", 
          "seed": "tableau.dropPhase1Objective();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_542/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:29.421618504 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_542/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:29.425618674 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -138,13 +130,11 @@\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n+                    tableau.dropPhase1Objective();\n+\t\t\t\t\tint i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_542/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:29.425618674 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return getWidth() - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 227, 
          "faulty": "doIteration(tableau);", 
          "type": "InsertBefore", 
          "seed": "double minValue=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_739/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:01.584066151 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -224,7 +217,8 @@\n         tableau.dropPhase1Objective();\n \n         while (!tableau.isOptimal()) {\n-            doIteration(tableau);\n+            double minValue = 0;\n+\t\t\tdoIteration(tableau);\n         }\n         return tableau.getSolution();\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_739/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:01.588066321 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 171, 
          "faulty": "final StringBuilder sb=new StringBuilder();", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_377/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:15.435887858 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_377/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:15.439888030 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_377/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:41:15.443888202 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n@@ -168,7 +168,9 @@\n      */\n     private String buildMessage(Locale locale,\n                                 String separator) {\n-        final StringBuilder sb = new StringBuilder();\n+        final String path = LocalizedFormats.class\n+\t\t\t\t\t\t\t\t\t\t\t.getName().replaceAll(\"\\\\.\", \"/\");\n+\t\tfinal StringBuilder sb = new StringBuilder();\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "Replace", 
          "seed": "return GEQ;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1235/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:52.285459235 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1235/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:52.289459408 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,13 +128,22 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1235/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:52:52.289459408 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_677/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:11.693958179 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_677/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:11.697958348 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_677/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:11.697958348 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "Delete", 
          "seed": "incrementIterationsCounter();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_664/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:57.017336999 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_664/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:57.021337168 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_932/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:45.850972845 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_932/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:45.854973012 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,10 +133,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_317/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:32.414034743 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_317/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:40:32.418034915 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_317/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:32.422035088 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "throw new NoFeasibleSolutionException();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_973/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:49:26.440672661 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_973/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:49:26.440672661 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +129,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Delete", 
          "seed": "if (!Precision.equals(tableau.getEntry(0,tableau.getRhsOffset()),0d,epsilon)) {\n  throw new NoFeasibleSolutionException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "throw new UnboundedSolutionException();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1028/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:06.766359153 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1028/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:06.766359153 -0500\n@@ -101,7 +101,7 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n+                    setMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,13 +129,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1028/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:50:06.770359321 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "final SimplexTableau tableau=new SimplexTableau(getFunction(),getConstraints(),getGoalType(),restrictToNonNegative(),epsilon,maxUlps);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_94/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:37:12.597353915 -0500\n@@ -142,13 +142,13 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n+                Integer minPos = null;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_688/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:18.990266806 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_688/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:18.994266975 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_688/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:18.998267145 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_152/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:38:03.295550894 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_152/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:38:03.299551068 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        int count = 0;\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_927/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:43.170860521 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            setMaxIterations(DEFAULT_MAX_ITERATIONS);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_927/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:43.174860690 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "InsertBefore", 
          "seed": "minRow=row;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_497/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:42:53.272077888 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_497/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:53.276078060 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -144,6 +137,7 @@\n                             if (i < minIndex) {\n                                 minIndex = i;\n                                 minRow = row;\n+\t\t\t\t\t\t\t\tminRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_497/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:53.276078060 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() == 0) {\n  return null;\n}\n else if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 174, 
          "faulty": "for (int i=0; i < len; i++) {\n  final Localizable pat=msgPatterns.get(i);\n  final Object[] args=msgArguments.get(i);\n  final MessageFormat fmt=new MessageFormat(pat.getLocalizedString(locale),locale);\n  sb.append(fmt.format(args));\n  if (++count < len) {\n    sb.append(separator);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1203/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:24.592259748 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1203/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:24.596259920 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,12 +128,30 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                     }\n                 }\n                 return minRow;\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1203/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:52:24.596259920 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1203/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:52:24.600260095 -0500\n@@ -171,7 +171,9 @@\n         final StringBuilder sb = new StringBuilder();\n         int count = 0;\n         final int len = msgPatterns.size();\n-        for (int i = 0; i < len; i++) {\n+        final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\n+\t\t\t\t\"/\");\n+\t\tfor (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "final double entry=getEntry(i,col);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 141, 
          "faulty": "int i=tableau.getNumObjectiveFunctions();", 
          "type": "InsertBefore", 
          "seed": "tableau.dropPhase1Objective();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_517/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:06.928660349 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_517/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:06.928660349 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -138,13 +130,11 @@\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n+                    tableau.dropPhase1Objective();\n+\t\t\t\t\tint i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_517/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:06.932660518 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_876/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:01.309104659 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,10 +133,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "final double entry=getEntry(i,col);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 141, 
          "faulty": "int i=tableau.getNumObjectiveFunctions();", 
          "type": "InsertBefore", 
          "seed": "tableau.dropPhase1Objective();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "InsertBefore", 
          "seed": "int i=tableau.getNumObjectiveFunctions();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_563/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:43.198204657 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_563/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:43.198204657 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -138,13 +130,11 @@\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n+                    tableau.dropPhase1Objective();\n+\t\t\t\t\tint i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_563/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:43.202204827 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Delete", 
          "seed": "return minRow;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_645/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:44.316799048 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_645/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:44.320799217 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,6 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_645/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:44.320799217 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1046/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:21.470973599 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1046/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:21.474973766 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +129,16 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_930/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:44.930934287 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,13 +129,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 175, 
          "faulty": "final Localizable pat=msgPatterns.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_305/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:23.937668791 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_305/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:23.937668791 -0500\n@@ -172,13 +172,16 @@\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n-            final Localizable pat = msgPatterns.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final String path = LocalizedFormats.class.getName()\n+\t\t\t\t\t\t.replaceAll(\"\\\\.\", \"/\");\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 176, 
          "faulty": "final Object[] args=msgArguments.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 174, 
          "faulty": "for (int i=0; i < len; i++) {\n  final Localizable pat=msgPatterns.get(i);\n  final Object[] args=msgArguments.get(i);\n  final MessageFormat fmt=new MessageFormat(pat.getLocalizedString(locale),locale);\n  sb.append(fmt.format(args));\n  if (++count < len) {\n    sb.append(separator);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_749/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:46:13.192555879 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_749/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:13.196556047 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_749/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:13.196556047 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_749/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:46:13.196556047 -0500\n@@ -171,9 +171,11 @@\n         final StringBuilder sb = new StringBuilder();\n         int count = 0;\n         final int len = msgPatterns.size();\n-        for (int i = 0; i < len; i++) {\n+        context = new HashMap<String, Object>();\n+\t\tfor (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n-            final Object[] args = msgArguments.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getLocalizedMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1110/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:16.785309776 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1110/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:16.789309951 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +128,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1110/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:16.789309951 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1110/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:51:16.793310125 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        int count = 0;\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "if (tableau.getNumArtificialVariables() == 0) {\n  return;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_440/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:42:09.650213582 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_440/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:09.654213753 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_440/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:09.658213924 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            int count = 0;\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_627/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:31.860271053 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_627/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:31.864271224 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_627/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:31.864271224 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_525/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:18.425150256 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_525/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:18.429150427 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() == 0) {\n  return null;\n}\n else if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1113/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:18.541386422 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,12 +129,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                     }\n                 }\n                 return minRow;\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1108/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:15.909271536 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            setMaxIterations(DEFAULT_MAX_ITERATIONS);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1108/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:15.909271536 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,10 +132,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "if (tableau.getNumArtificialVariables() == 0) {\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_429/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:00.045802294 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_429/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:00.049802465 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_429/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:42:00.049802465 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_110/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:37:24.517870233 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_110/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:37:24.517870233 -0500\n@@ -178,7 +178,8 @@\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final List<Object> list = new ArrayList<Object>();\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "throw new NoFeasibleSolutionException();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_991/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:49:40.061242542 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_991/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:49:40.065242710 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +128,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_991/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:49:40.065242710 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 80, 
          "faulty": "return context.getMessage();", 
          "type": "Replace", 
          "seed": "return context.getMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_337/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:40:46.602646679 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n+\t\t\tthrow new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_337/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:46.602646679 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1041/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:17.946826366 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1041/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:17.946826366 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +128,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1041/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:50:17.950826531 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return LEQ;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_108/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:37:23.621831444 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_108/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:37:23.621831444 -0500\n@@ -178,7 +178,8 @@\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final List<Object> list = new ArrayList<Object>();\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 176, 
          "faulty": "final Object[] args=msgArguments.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_762/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:27.125143293 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_762/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:46:27.125143293 -0500\n@@ -173,7 +173,8 @@\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n-            final Object[] args = msgArguments.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_794/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:03.898691897 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,6 +133,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n@@ -148,7 +149,8 @@\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "InsertBefore", 
          "seed": "msgPatterns=new ArrayList<Localizable>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 172, 
          "faulty": "int count=0;", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_396/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:29.372486694 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_396/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:29.372486694 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_396/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:41:29.376486865 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n@@ -169,7 +169,8 @@\n     private String buildMessage(Locale locale,\n                                 String separator) {\n         final StringBuilder sb = new StringBuilder();\n-        int count = 0;\n+        final List<Object> list = new ArrayList<Object>();\n+\t\tint count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n@@ -183,7 +184,8 @@\n             }\n         }\n \n-        return sb.toString();\n+        msgPatterns = new ArrayList<Localizable>();\n+\t\treturn sb.toString();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "final SimplexTableau tableau=new SimplexTableau(getFunction(),getConstraints(),getGoalType(),restrictToNonNegative(),epsilon,maxUlps);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 128, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "InsertBefore", 
          "seed": "final int len=msgPatterns.size();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_100/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:37:17.361560345 -0500\n@@ -142,13 +142,13 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n+                Integer minPos = null;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_100/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:37:17.361560345 -0500\n@@ -125,7 +125,8 @@\n      * @return the message.\n      */\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        final int len = msgPatterns.size();\n+\t\treturn getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_79/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:37:00.316821338 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_79/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:37:00.316821338 -0500\n@@ -178,7 +178,8 @@\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final List<Object> list = new ArrayList<Object>();\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "double minValue=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1013/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:49:57.001950986 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double minValue = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1013/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:49:57.005951153 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,10 +133,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() == 0) {\n  return null;\n}\n else if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_934/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:46.711008885 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_934/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:46.715009054 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,8 +134,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_934/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:48:46.715009054 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "Set<Integer> columnsToDrop=new TreeSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_492/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:50.371954126 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_492/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:50.371954126 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_492/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:42:50.375954296 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_826/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:23.927534293 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_826/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:23.927534293 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_692/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:20.846345297 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_692/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:20.850345467 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,7 +132,8 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n+                        minRatioPositions.add(i);\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n                                 minRow = row;\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_692/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:20.850345467 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 80, 
          "faulty": "return context.getMessage();", 
          "type": "Replace", 
          "seed": "return context.getMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_284/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:39:57.668532820 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -148,7 +141,6 @@\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1132/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:30.741918558 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1132/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:30.745918733 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,15 +129,20 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "Set<Integer> columnsToDrop=new TreeSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_588/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:02.675032465 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_588/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:02.679032633 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_898/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:18.921843750 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            setMaxIterations(DEFAULT_MAX_ITERATIONS);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_898/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:18.921843750 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1225/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:44.725132060 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1225/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:44.725132060 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,15 +132,21 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1116/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:20.285462532 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1116/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:20.285462532 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,13 +133,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 173, 
          "faulty": "final int len=msgPatterns.size();", 
          "type": "InsertBefore", 
          "seed": "this.throwable=throwable;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_945/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:59.039525418 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_945/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:48:59.043525584 -0500\n@@ -170,7 +170,8 @@\n                                 String separator) {\n         final StringBuilder sb = new StringBuilder();\n         int count = 0;\n-        final int len = msgPatterns.size();\n+        this.throwable = throwable;\n+\t\tfinal int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() == 0) {\n  return null;\n}\n else if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_939/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:55.579380469 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_939/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:55.583380636 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,7 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n+                    minRatioPositions = new ArrayList<Integer>();\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,8 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_939/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:48:55.583380636 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_756/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:46:23.160976199 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_756/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:23.160976199 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +134,12 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            if (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n                         }\n                     }\n                 }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_831/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:31.923870414 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_831/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:31.927870581 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,6 +133,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n@@ -148,7 +149,8 @@\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_831/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:31.927870581 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 176, 
          "faulty": "final Object[] args=msgArguments.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_726/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:45.647393375 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_726/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:45.651393544 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_726/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:45.651393544 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_726/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:45:45.655393714 -0500\n@@ -173,7 +173,8 @@\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n-            final Object[] args = msgArguments.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_494/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:51.375996975 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 140, 
          "faulty": "for (Integer row : minRatioPositions) {\n  int i=tableau.getNumObjectiveFunctions();\n  for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n    if (row == tableau.getBasicRow(i)) {\n      if (i < minIndex) {\n        minIndex=i;\n        minRow=row;\n      }\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return LEQ;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1076/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:43.011873220 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1076/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:43.015873388 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -137,17 +125,6 @@\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n-                }\n                 return minRow;\n         }\n         return minRatioPositions.get(0);\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1076/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:50:43.015873388 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "final double entry=getEntry(i,col);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 141, 
          "faulty": "int i=tableau.getNumObjectiveFunctions();", 
          "type": "InsertBefore", 
          "seed": "tableau.dropPhase1Objective();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 128, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "InsertBefore", 
          "seed": "this.throwable=throwable;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_532/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:22.941342604 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_532/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:22.945342774 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -138,13 +130,11 @@\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n+                    tableau.dropPhase1Objective();\n+\t\t\t\t\tint i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_532/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:22.945342774 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_532/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:43:22.949342946 -0500\n@@ -125,7 +125,8 @@\n      * @return the message.\n      */\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        this.throwable = throwable;\n+\t\treturn getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "Delete", 
          "seed": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_382/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:18.896036600 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_382/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:18.900036773 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_235/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:39:17.962810219 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "Replace", 
          "seed": "doIteration(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_513/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:04.016536192 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_513/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:04.020536361 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_513/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java\t2018-12-02 13:43:04.020536361 -0500\n@@ -83,6 +83,6 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return context.getLocalizedMessage();\n+        return context.getMessage();\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "int zIndex=(getNumObjectiveFunctions() == 1) ? 0 : 1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_280/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:39:54.940414682 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "List<LinearConstraint> normalized=new ArrayList<LinearConstraint>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_503/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:42:57.684266130 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_503/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:57.688266302 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -148,7 +141,6 @@\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_503/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:57.688266302 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1085/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:54.492352456 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1085/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:54.496352623 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,12 +128,23 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+                        int count = 0;\n                     }\n                 }\n                 return minRow;\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1085/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:50:54.496352623 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getLocalizedMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "incrementIterationsCounter();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1172/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:58.459125081 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1172/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:58.459125081 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,18 +114,8 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n-            // 2. apply Bland's rule to prevent cycling:\n+            incrementIterationsCounter();\n+\t\t\t\t// 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n             // see http://www.stanford.edu/class/msande310/blandrule.pdf\n@@ -140,10 +129,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1172/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:51:58.463125255 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        int count = 0;\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_960/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:49:10.592009233 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +129,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_484/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:42:45.647752467 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_484/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:45.651752636 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_484/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:45.651752636 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Replace", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "InsertBefore", 
          "seed": "this.throwable=throwable;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1207/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:32.696611079 -0500\n@@ -101,7 +101,7 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n+                    Integer minPos = null;\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1207/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:52:32.700611251 -0500\n@@ -183,7 +183,8 @@\n             }\n         }\n \n-        return sb.toString();\n+        this.throwable = throwable;\n+\t\treturn sb.toString();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_538/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:26.845508839 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_538/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:26.849509009 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_538/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:26.849509009 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n@@ -387,8 +388,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_538/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:43:26.853509180 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Delete", 
          "seed": "return minRow;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 140, 
          "faulty": "for (Integer row : minRatioPositions) {\n  int i=tableau.getNumObjectiveFunctions();\n  for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n    if (row == tableau.getBasicRow(i)) {\n      if (i < minIndex) {\n        minIndex=i;\n        minRow=row;\n      }\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_673/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:08.677830564 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_673/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:08.681830733 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -137,17 +129,7 @@\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n-                }\n+                double sum = 0;\n                 return minRow;\n         }\n         return minRatioPositions.get(0);\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_673/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:08.681830733 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_892/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:12.549576405 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_892/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:12.553576574 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,10 +133,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_555/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:38.145989761 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_423/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:41:55.253596964 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_423/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:55.257597135 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_423/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:55.261597306 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_680/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:13.546036531 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_680/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:13.550036701 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_680/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:13.550036701 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1194/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:52:18.439992870 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1194/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:52:18.443993043 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +128,17 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1194/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:52:18.443993043 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "InsertBefore", 
          "seed": "minRow=row;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_553/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:37.145947216 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_553/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:37.149947386 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -144,6 +137,7 @@\n                             if (i < minIndex) {\n                                 minIndex = i;\n                                 minRow = row;\n+\t\t\t\t\t\t\t\tminRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_553/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:37.149947386 -0500\n@@ -376,8 +376,9 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            final StringBuilder sb = new StringBuilder();\n+\t\t\tResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_553/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:43:37.153947557 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_361/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:03.591378365 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_361/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:03.595378537 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_361/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:41:03.595378537 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 140, 
          "faulty": "for (Integer row : minRatioPositions) {\n  int i=tableau.getNumObjectiveFunctions();\n  for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n    if (row == tableau.getBasicRow(i)) {\n      if (i < minIndex) {\n        minIndex=i;\n        minRow=row;\n      }\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "InsertBefore", 
          "seed": "int i=tableau.getNumObjectiveFunctions();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "Integer row=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1170/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:57.539085083 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1170/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:57.539085083 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -137,17 +125,7 @@\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n-                }\n+                int slackVar = 0;\n                 return minRow;\n         }\n         return minRatioPositions.get(0);\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1170/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:57.543085257 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1006/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:49:52.449760655 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1006/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:49:52.449760655 -0500\n@@ -101,7 +101,7 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n+                    setMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,13 +129,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1006/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:49:52.453760822 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getMessage();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_482/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:44.751714209 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_482/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:44.755714380 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_482/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java\t2018-12-02 13:42:44.759714552 -0500\n@@ -83,6 +83,6 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return context.getLocalizedMessage();\n+        return context.getMessage();\n     }\n }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1058/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:50:30.523351727 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1058/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:50:30.527351894 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,15 +128,29 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1058/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:50:30.527351894 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 176, 
          "faulty": "final Object[] args=msgArguments.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "InsertBefore", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_778/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:48.486043153 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_778/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:46:48.490043321 -0500\n@@ -173,7 +173,8 @@\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n-            final Object[] args = msgArguments.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_867/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:54.824832430 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_867/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:54.824832430 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -148,7 +137,8 @@\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_867/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:54.828832599 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_490/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:49.375911613 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 171, 
          "faulty": "final StringBuilder sb=new StringBuilder();", 
          "type": "Replace", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Delete", 
          "seed": "if (Precision.equals(entry,1d,maxUlps) && (row == null)) {\n  row=i;\n}\n else if (!Precision.equals(entry,0d,maxUlps)) {\n  return null;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_807/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:12.235042605 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_807/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:12.239042773 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_807/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:12.239042773 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() == 0) {\n  return null;\n}\n else if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "int row=getNumObjectiveFunctions() + i;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_988/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:49:38.301168916 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_988/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:49:38.301168916 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,8 +134,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_988/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:49:38.305169083 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_747/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:46:12.280517413 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_747/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:12.284517581 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -136,7 +129,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_747/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:12.284517581 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_717/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:38.567094302 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_717/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:38.571094472 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -148,7 +141,6 @@\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_717/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:38.571094472 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "return minRatioPositions.get(0);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_398/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:30.272525344 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_398/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:30.276525514 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_861/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:52.072716867 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_861/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:52.076717034 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_861/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:52.076717034 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_647/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:44:45.200836505 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_647/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:45.200836505 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_942/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:57.243450180 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_942/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:57.243450180 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -142,13 +130,11 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n+                minRatioPositions = new ArrayList<Integer>();\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_942/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:48:57.247450349 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_834/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:33.831950601 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -136,7 +129,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n@@ -148,7 +142,8 @@\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_834/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:33.835950769 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_834/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:33.835950769 -0500\n@@ -183,7 +183,9 @@\n             }\n         }\n \n-        return sb.toString();\n+        final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\n+\t\t\t\t\"/\");\n+\t\treturn sb.toString();\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_865/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:53.924794639 -0500\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n@@ -140,13 +139,14 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tsetMaxIterations(DEFAULT_MAX_ITERATIONS);\n                 }\n                 return minRow;\n         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "final SimplexTableau tableau=new SimplexTableau(getFunction(),getConstraints(),getGoalType(),restrictToNonNegative(),epsilon,maxUlps);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "Integer minRow=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_23/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:36:04.858407370 -0500\n@@ -119,10 +119,7 @@\n                 for (Integer row : minRatioPositions) {\n                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                         int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n+                        Integer pivotCol = getPivotColumn(tableau);\n                     }\n                 }\n \n@@ -142,7 +139,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "InsertBefore", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_815/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:17.207251723 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_815/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:17.207251723 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -136,7 +125,8 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_815/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:17.211251891 -0500\n@@ -387,7 +387,8 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n+        final StringBuilder sb = new StringBuilder();\n+\t\t// either the locale is not supported or the resource is unknown\n         // don't translate and fall back to using the source format\n         return sourceFormat;\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_815/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:47:17.211251891 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "if (tableau.getNumArtificialVariables() == 0) {\n  return;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_409/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:41:38.880894861 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_409/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:41:38.880894861 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 175, 
          "faulty": "final Localizable pat=msgPatterns.get(i);", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 182, 
          "faulty": "sb.append(separator);", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getLocalizedMessage();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_349/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:40:56.043053401 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_349/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:40:56.047053572 -0500\n@@ -172,13 +172,16 @@\n         int count = 0;\n         final int len = msgPatterns.size();\n         for (int i = 0; i < len; i++) {\n-            final Localizable pat = msgPatterns.get(i);\n+            final List<Object> list = new ArrayList<Object>();\n+\t\t\tfinal Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n-                // Add a separator if there are other messages.\n+                final String path = LocalizedFormats.class.getName()\n+\t\t\t\t\t\t.replaceAll(\"\\\\.\", \"/\");\n+\t\t\t\t// Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n         }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "InsertBefore", 
          "seed": "final double entry=tableau.getEntry(i,col);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1011/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:49:56.069912019 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1011/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:49:56.069912019 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,10 +129,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return getWidth() - 1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 227, 
          "faulty": "doIteration(tableau);", 
          "type": "InsertBefore", 
          "seed": "double minValue=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_772/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:46:38.741632765 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_772/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:38.741632765 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -224,7 +217,8 @@\n         tableau.dropPhase1Objective();\n \n         while (!tableau.isOptimal()) {\n-            doIteration(tableau);\n+            double minValue = 0;\n+\t\t\tdoIteration(tableau);\n         }\n         return tableau.getSolution();\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_772/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:38.745632933 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "Integer minPos=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_17/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:35:59.902190897 -0500\n@@ -115,16 +115,7 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n+            Integer minPos = null;\n \n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "minIndex=i;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_472/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:42:38.387442415 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_472/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:42:38.387442415 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -141,10 +133,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            minIndex = i;\n                         }\n                     }\n                 }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_472/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:42:38.391442586 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 139, 
          "faulty": "int minIndex=tableau.getWidth();", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final List<Object> list=new ArrayList<Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_911/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:48:26.442159178 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_911/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:48:26.446159346 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -136,13 +125,13 @@\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n                 Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n+                int artificialVar = 0;\n+\t\t\t\tint minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_911/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:48:26.446159346 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final List<Object> list = new ArrayList<Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=0; i < getHeight(); i++) {\n  final double entry=getEntry(i,col);\n  if (Precision.equals(entry,1d,maxUlps) && (row == null)) {\n    row=i;\n  }\n else   if (!Precision.equals(entry,0d,maxUlps)) {\n    return null;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "return false;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_767/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:35.977516319 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -148,7 +141,8 @@\n                         }\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Delete", 
          "seed": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() == 0) {\n  return null;\n}\n else if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1160/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:50.470777683 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1160/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:50.470777683 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -140,12 +128,30 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                     }\n                 }\n                 return minRow;\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1160/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:50.474777857 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "throw new MaxCountExceededException(maxIterations);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_530/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:22.025303595 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_530/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:22.029303765 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_530/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:22.029303765 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_530/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:43:22.033303935 -0500\n@@ -134,7 +134,7 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 171, 
          "faulty": "final StringBuilder sb=new StringBuilder();", 
          "type": "Replace", 
          "seed": "final StringBuilder sb=new StringBuilder();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_744/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:46:10.416438787 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_744/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:46:10.416438787 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_744/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:46:10.420438957 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_536/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:43:25.845466263 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_536/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:43:25.845466263 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_536/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:43:25.849466433 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "minRatioPositions.add(i);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "InsertBefore", 
          "seed": "int slackVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "Replace", 
          "seed": "incrementIterationsCounter();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Replace", 
          "seed": "solvePhase1(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_711/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:45:34.822936105 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_711/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:45:34.822936105 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -140,15 +132,11 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+                        solvePhase1(tableau);\n                     }\n                 }\n-                return minRow;\n+                int slackVar = 0;\n+\t\t\t\treturn minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_711/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:45:34.826936274 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_828/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:47:24.871573981 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_828/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:47:24.875574149 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -117,13 +116,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +134,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_828/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:47:24.875574149 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "final double entry=tableau.getEntry(row,column);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "Set<Integer> columnsToDrop=new TreeSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "final int len=context.keySet().size();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_652/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:44:48.788988518 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n@@ -142,7 +135,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_652/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:44:48.792988687 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_652/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:44:48.796988857 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        final int len = context.keySet().size();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getLocalizedMessage();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "incrementIterationsCounter();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "return;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1139/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:51:35.046106133 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double sum = 0;\n+\t\t\tint count = 0;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1139/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:51:35.046106133 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,18 +114,8 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n-            // 2. apply Bland's rule to prevent cycling:\n+            incrementIterationsCounter();\n+\t\t\t\t// 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n             // see http://www.stanford.edu/class/msande310/blandrule.pdf\n@@ -140,10 +129,25 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n+\t\t\t\t\t\t\tif (i < minIndex) {\n+\t\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1139/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:51:35.050106307 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 12:59:12.588663042 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1139/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 13:51:35.050106307 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        int count = 0;\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 392, 
          "faulty": "return sourceFormat;", 
          "type": "Replace", 
          "seed": "return sourceFormat;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "Integer minPos=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "Set<Integer> basicRows=new HashSet<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "InsertBefore", 
          "seed": "return row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "Replace", 
          "seed": "return sb.toString();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "return doOptimize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "Replace", 
          "seed": "return buildMessage(locale,\": \");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "double minRatio=Double.MAX_VALUE;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "this.maxUlps=maxUlps;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 146, 
          "faulty": "minRow=row;", 
          "type": "Delete", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 121, 
          "faulty": "int column=i + tableau.getArtificialVariableOffset();", 
          "type": "InsertBefore", 
          "seed": "Integer pivotCol=getPivotColumn(tableau);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 12:59:12.980663028 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1015/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 13:49:57.885987946 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            double minRatio = Double.MAX_VALUE;\n         }\n     }\n \n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 12:59:16.592662902 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1015/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 13:49:57.885987946 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -115,17 +114,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -142,13 +130,11 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n                             }\n                         }\n                     }\n                 }\n-                return minRow;\n+                minRatioPositions = new ArrayList<Integer>();\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 12:59:12.944663030 -0500\n+++ /tmp/GenProg_Defects4J_Math_28/patches_c8c8/Patch_1015/patched/tmp/GenProg_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 13:49:57.889988112 -0500\n@@ -387,8 +387,6 @@\n             // do nothing here\n         }\n \n-        // either the locale is not supported or the resource is unknown\n-        // don't translate and fall back to using the source format\n         return sourceFormat;\n \n     }\n\n\n\n\n"
    }
  ]
}