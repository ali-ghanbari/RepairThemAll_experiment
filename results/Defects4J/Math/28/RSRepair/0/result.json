{
  "repair_end": "2018-12-02 09:43:48.951287", 
  "repair_begin": "2018-12-02 09:14:16.420170", 
  "patches": [
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:14:04.352259918 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_150/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:35:25.774109544 -0500\n@@ -177,7 +177,8 @@\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n-            if (++count < len) {\n+            this.throwable = throwable;\n+\t\t\tif (++count < len) {\n                 // Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_150/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:35:25.774109544 -0500\n@@ -142,7 +142,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "switch (this) {\ncase LEQ:\n  return GEQ;\ncase GEQ:\nreturn LEQ;\ndefault :\nreturn EQ;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 180, 
          "faulty": "if (++count < len) {\n  sb.append(separator);\n}", 
          "type": "InsertBefore", 
          "seed": "this.throwable=throwable;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_526/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:41:35.270452806 -0500\n@@ -142,7 +142,7 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n+                                minRatioPositions = new ArrayList<Integer>();\n                                 minRow = row;\n                             }\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Replace", 
          "seed": "minRatioPositions=new ArrayList<Integer>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_46/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:33:57.738007161 -0500\n@@ -120,7 +120,8 @@\n                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n+                        row = i;\n+\t\t\t\t\t\tif (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                             return row;\n                         }\n                     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "row=i;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_268/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:37:42.310221914 -0500\n@@ -120,9 +120,7 @@\n                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n+                        double minValue = 0;\n                     }\n                 }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Replace", 
          "seed": "double minValue=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_93/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:34:35.414056141 -0500\n@@ -148,7 +148,6 @@\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "return GEQ;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_606/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:42:55.050538142 -0500\n@@ -142,7 +142,7 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n+                                double sum = 0;\n                                 minRow = row;\n                             }\n                         }\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java\t2018-12-02 03:14:04.348259918 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_606/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java\t2018-12-02 03:42:55.054538146 -0500\n@@ -83,6 +83,6 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return context.getLocalizedMessage();\n+        return context.getMessage();\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java", 
          "line": 86, 
          "faulty": "return context.getLocalizedMessage();", 
          "type": "Replace", 
          "seed": "return context.getMessage();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_241/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:37:23.846205390 -0500\n@@ -115,16 +115,7 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n+            List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();\n \n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "List<LinearConstraint> normalized=new ArrayList<LinearConstraint>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:14:04.352259918 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_73/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:34:14.810029414 -0500\n@@ -171,7 +171,9 @@\n         final StringBuilder sb = new StringBuilder();\n         int count = 0;\n         final int len = msgPatterns.size();\n-        for (int i = 0; i < len; i++) {\n+        final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\n+\t\t\t\t\"/\");\n+\t\tfor (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_73/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:34:14.810029414 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 174, 
          "faulty": "for (int i=0; i < len; i++) {\n  final Localizable pat=msgPatterns.get(i);\n  final Object[] args=msgArguments.get(i);\n  final MessageFormat fmt=new MessageFormat(pat.getLocalizedString(locale),locale);\n  sb.append(fmt.format(args));\n  if (++count < len) {\n    sb.append(separator);\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer row=null;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_523/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:41:34.130451603 -0500\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-02 03:14:04.576259928 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_523/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/util/Precision.java\t2018-12-02 03:41:34.134451608 -0500\n@@ -114,7 +114,8 @@\n         if (equals(x, y, maxUlps)) {\n             return 0;\n         } else if (x < y) {\n-            return -1;\n+            final double facta = 0.01745329052209854;\n+\t\t\treturn -1;\n         }\n         return 1;\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/util/Precision.java", 
          "line": 117, 
          "faulty": "return -1;", 
          "type": "InsertBefore", 
          "seed": "final double facta=0.01745329052209854;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "int col=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_548/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:42:02.818482024 -0500\n@@ -139,16 +139,7 @@\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "minRow=row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "return EQ;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_158/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:35:35.182116447 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -148,7 +137,6 @@\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "doIteration(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "doIteration(tableau);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "Set<Integer> columnsToDrop=new TreeSet<Integer>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_599/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:42:51.850534679 -0500\n@@ -142,7 +142,7 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n+                                setMaxIterations(DEFAULT_MAX_ITERATIONS);\n                                 minRow = row;\n                             }\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Replace", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_126/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:35:02.494091070 -0500\n@@ -138,7 +138,8 @@\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n+                    minRow = row;\n+\t\t\t\t\tint i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 141, 
          "faulty": "int i=tableau.getNumObjectiveFunctions();", 
          "type": "InsertBefore", 
          "seed": "minRow=row;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_245/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:37:31.038211785 -0500\n@@ -148,7 +148,7 @@\n                         }\n                     }\n                 }\n-                return minRow;\n+                Integer minPos = null;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Replace", 
          "seed": "Integer minPos=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_236/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:37:21.710203501 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "InsertBefore", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_435/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:40:04.742359107 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 03:14:04.560259927 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_435/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 03:40:04.746359111 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "return doOptimize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "continue;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_437/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:40:05.318359690 -0500\n@@ -139,7 +139,8 @@\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n+                    minRow = row;\n+\t\t\t\t\tfor (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n@@ -148,7 +149,7 @@\n                         }\n                     }\n                 }\n-                return minRow;\n+                int i = tableau.getNumObjectiveFunctions();\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "minRow=row;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Replace", 
          "seed": "int i=tableau.getNumObjectiveFunctions();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_403/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:39:42.322336561 -0500\n@@ -148,7 +148,6 @@\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 03:14:04.560259927 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_403/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 03:39:42.326336564 -0500\n@@ -125,7 +125,6 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Delete", 
          "seed": "return doOptimize();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "List<LinearConstraint> normalized=new ArrayList<LinearConstraint>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_508/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:41:15.434431953 -0500\n@@ -115,16 +115,7 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n+            int count = 0;\n \n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_450/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:40:12.562367040 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n@@ -142,7 +131,8 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n+                                int count = 0;\n+\t\t\t\t\t\t\t\tminIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "InsertBefore", 
          "seed": "int count=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "while (!tableau.isOptimal()) {\n  doIteration(tableau);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_57/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:34:01.482012051 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "Integer minRow=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_326/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:38:28.806264967 -0500\n@@ -140,12 +140,10 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+                        if (i < minIndex) {\n+\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t}\n                     }\n                 }\n                 return minRow;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Replace", 
          "seed": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:14:04.352259918 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_454/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:40:14.134368638 -0500\n@@ -144,7 +144,8 @@\n      * @return the localized message.\n      */\n     public String getMessage(final Locale locale) {\n-        return buildMessage(locale, \": \");\n+        context = new HashMap<String, Object>();\n+\t\treturn buildMessage(locale, \": \");\n     }\n \n     /**\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_454/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:40:14.138368643 -0500\n@@ -121,7 +121,7 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n+                            int count = 0;\n                         }\n                     }\n                 }\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 03:14:04.560259927 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_454/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 03:40:14.138368643 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            setMaxIterations(DEFAULT_MAX_ITERATIONS);\n+\t\t\tthrow new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "setMaxIterations(DEFAULT_MAX_ITERATIONS);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "InsertBefore", 
          "seed": "context=new HashMap<String,Object>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "int count=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_90/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:34:28.786047558 -0500\n@@ -117,13 +117,7 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n+                    List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Replace", 
          "seed": "List<LinearConstraint> normalized=new ArrayList<LinearConstraint>();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_206/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:36:38.570166461 -0500\n@@ -140,7 +140,11 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n+                        if (i < minIndex) {\n+\t\t\t\t\t\t\tminIndex = i;\n+\t\t\t\t\t\t\tminRow = row;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n                                 minRow = row;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_648/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:43:21.446566814 -0500\n@@ -117,13 +117,6 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 03:14:04.560259927 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_648/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 03:43:21.450566818 -0500\n@@ -125,7 +125,7 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            throw new UnboundedSolutionException();\n         }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "Replace", 
          "seed": "throw new UnboundedSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Delete", 
          "seed": "List<Integer> minRatioPositions=new ArrayList<Integer>();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 122, 
          "faulty": "final double entry=tableau.getEntry(row,column);", 
          "type": "Replace", 
          "seed": "return tableau.getSolution();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_114/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:34:51.818077326 -0500\n@@ -142,7 +142,7 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n+                                Integer minPos = null;\n                                 minRow = row;\n                             }\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Replace", 
          "seed": "Integer minPos=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:14:04.352259918 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_17/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:33:42.829987644 -0500\n@@ -177,7 +177,8 @@\n             final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n-            if (++count < len) {\n+            msgArguments.add(args);\n+\t\t\tif (++count < len) {\n                 // Add a separator if there are other messages.\n                 sb.append(separator);\n             }\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_17/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:33:42.833987650 -0500\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 180, 
          "faulty": "if (++count < len) {\n  sb.append(separator);\n}", 
          "type": "InsertBefore", 
          "seed": "msgArguments.add(args);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "initializeColumnLabels();"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_48/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:33:58.286007877 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 147, 
          "faulty": "return buildMessage(locale,\": \");", 
          "type": "Replace", 
          "seed": "return buildMessage(locale,\": \");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "return getWidth() - 1;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_250/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:37:33.326213830 -0500\n@@ -120,9 +120,6 @@\n                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n                     }\n                 }\n \n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 03:14:04.540259926 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_250/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 03:37:33.330213834 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Delete", 
          "seed": "if (Precision.equals(entry,1d,maxUlps) && (row == null)) {\n  row=i;\n}\n else if (!Precision.equals(entry,0d,maxUlps)) {\n  return null;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_8/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:33:27.121966989 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -141,10 +140,6 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n                         }\n                     }\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "return LEQ;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Delete", 
          "seed": "int minIndex=tableau.getWidth();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_302/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:38:16.346253241 -0500\n@@ -117,13 +117,7 @@\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n                 for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n+                    double sum = 0;\n                 }\n \n             // 2. apply Bland's rule to prevent cycling:\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 120, 
          "faulty": "for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n  int column=i + tableau.getArtificialVariableOffset();\n  final double entry=tableau.getEntry(row,column);\n  if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n    return row;\n  }\n}", 
          "type": "Replace", 
          "seed": "double sum=0;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_6/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:33:26.529966208 -0500\n@@ -121,7 +121,6 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n                         }\n                     }\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "throw new UnboundedSolutionException();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:14:04.352259918 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_134/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:35:11.806099571 -0500\n@@ -134,7 +134,8 @@\n      * @return the localized message.\n      */\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        final int len = context.keySet().size();\n+\t\treturn getMessage(Locale.getDefault());\n     }\n \n     /**\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_134/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:35:11.806099571 -0500\n@@ -142,7 +142,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "throw new NoFeasibleSolutionException();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 137, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "InsertBefore", 
          "seed": "final int len=context.keySet().size();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_645/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:43:20.346565615 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 03:14:04.540259926 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_645/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java\t2018-12-02 03:43:20.346565615 -0500\n@@ -376,8 +376,8 @@\n     public String getLocalizedString(final Locale locale) {\n         try {\n             final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\", \"/\");\n-            ResourceBundle bundle =\n-                    ResourceBundle.getBundle(\"assets/\" + path, locale);\n+            ResourceBundle bundle = ResourceBundle.getBundle(\"assets/\" + path,\n+\t\t\t\t\tlocale);\n             if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                 // the value of the resource is the translated format\n                 return bundle.getString(toString());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java", 
          "line": 379, 
          "faulty": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);", 
          "type": "Replace", 
          "seed": "ResourceBundle bundle=ResourceBundle.getBundle(\"assets/\" + path,locale);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "int column=i + tableau.getArtificialVariableOffset();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:14:04.352259918 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_169/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:35:46.278124773 -0500\n@@ -174,7 +174,8 @@\n         for (int i = 0; i < len; i++) {\n             final Localizable pat = msgPatterns.get(i);\n             final Object[] args = msgArguments.get(i);\n-            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n+            msgPatterns.add(pat);\n+\t\t\tfinal MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),\n                                                         locale);\n             sb.append(fmt.format(args));\n             if (++count < len) {\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_169/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:35:46.278124773 -0500\n@@ -148,7 +148,6 @@\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 177, 
          "faulty": "final MessageFormat fmt=new MessageFormat(pat.getLocalizedString(locale),locale);", 
          "type": "InsertBefore", 
          "seed": "msgPatterns.add(pat);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_27/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:33:47.753994100 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -140,7 +139,9 @@\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n+                        final double rhs = tableau.getEntry(i,\n+\t\t\t\t\t\t\t\ttableau.getWidth() - 1);\n+\t\t\t\t\t\tif (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n                                 minIndex = i;\n                                 minRow = row;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "final double rhs=tableau.getEntry(i,tableau.getWidth() - 1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "if (cmp < 0) {\n  minRatio=ratio;\n  minRatioPositions=new ArrayList<Integer>();\n  minRatioPositions.add(i);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_383/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:39:26.614320947 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -139,14 +138,6 @@\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n                     int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n                 }\n                 return minRow;\n         }\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 03:14:04.560259927 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_383/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java\t2018-12-02 03:39:26.614320947 -0500\n@@ -125,7 +125,8 @@\n     protected void incrementIterationsCounter()\n         throws MaxCountExceededException {\n         if (++iterations > maxIterations) {\n-            throw new MaxCountExceededException(maxIterations);\n+            int artificialVar = 0;\n+\t\t\tthrow new MaxCountExceededException(maxIterations);\n         }\n     }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 142, 
          "faulty": "for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n  if (row == tableau.getBasicRow(i)) {\n    if (i < minIndex) {\n      minIndex=i;\n      minRow=row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "if (!Precision.equals(tableau.getEntry(0,tableau.getRhsOffset()),0d,epsilon)) {\n  throw new NoFeasibleSolutionException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 143, 
          "faulty": "if (row == tableau.getBasicRow(i)) {\n  if (i < minIndex) {\n    minIndex=i;\n    minRow=row;\n  }\n}", 
          "type": "Replace", 
          "seed": "continue;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java", 
          "line": 128, 
          "faulty": "throw new MaxCountExceededException(maxIterations);", 
          "type": "InsertBefore", 
          "seed": "int artificialVar=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "minRatio=ratio;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_67/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:34:11.918025652 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_620/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:43:02.314546012 -0500\n@@ -121,7 +121,7 @@\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n+                            Integer minPos = null;\n                         }\n                     }\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Replace", 
          "seed": "Integer minPos=null;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_41/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:33:55.294003967 -0500\n@@ -120,9 +120,6 @@\n                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                         int column = i + tableau.getArtificialVariableOffset();\n                         final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n                     }\n                 }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 123, 
          "faulty": "if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n  return row;\n}", 
          "type": "Delete", 
          "seed": "continue;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:14:04.352259918 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_200/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java\t2018-12-02 03:36:30.222159554 -0500\n@@ -183,7 +183,9 @@\n             }\n         }\n \n-        return sb.toString();\n+        final String path = LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\n+\t\t\t\t\"/\");\n+\t\treturn sb.toString();\n     }\n \n     /**\n\n\n--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_200/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:36:30.226159557 -0500\n@@ -148,7 +148,6 @@\n                         }\n                     }\n                 }\n-                return minRow;\n         }\n         return minRatioPositions.get(0);\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java", 
          "line": 186, 
          "faulty": "return sb.toString();", 
          "type": "InsertBefore", 
          "seed": "final String path=LocalizedFormats.class.getName().replaceAll(\"\\\\.\",\"/\");"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 151, 
          "faulty": "return minRow;", 
          "type": "Delete", 
          "seed": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_55/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:34:00.902011294 -0500\n@@ -115,17 +115,6 @@\n         } else if (minRatioPositions.size() > 1) {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n             //\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 119, 
          "faulty": "for (Integer row : minRatioPositions) {\n  for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n    int column=i + tableau.getArtificialVariableOffset();\n    final double entry=tableau.getEntry(row,column);\n    if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n      return row;\n    }\n  }\n}", 
          "type": "Delete", 
          "seed": "if (minRatioPositions.size() == 0) {\n  return null;\n}\n else if (minRatioPositions.size() > 1) {\n  for (  Integer row : minRatioPositions) {\n    for (int i=0; i < tableau.getNumArtificialVariables(); i++) {\n      int column=i + tableau.getArtificialVariableOffset();\n      final double entry=tableau.getEntry(row,column);\n      if (Precision.equals(entry,1d,maxUlps) && row.equals(tableau.getBasicRow(column))) {\n        return row;\n      }\n    }\n  }\n  Integer minRow=null;\n  int minIndex=tableau.getWidth();\n  for (  Integer row : minRatioPositions) {\n    int i=tableau.getNumObjectiveFunctions();\n    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n      if (row == tableau.getBasicRow(i)) {\n        if (i < minIndex) {\n          minIndex=i;\n          minRow=row;\n        }\n      }\n    }\n  }\n  return minRow;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 124, 
          "faulty": "return row;", 
          "type": "Delete", 
          "seed": "if (getNumObjectiveFunctions() == 1) {\n  return;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_1/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:33:18.201955214 -0500\n@@ -142,7 +142,6 @@\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n-                                minIndex = i;\n                                 minRow = row;\n                             }\n                         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 145, 
          "faulty": "minIndex=i;", 
          "type": "Delete", 
          "seed": "minRatioPositions.add(i);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_630/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:43:12.806557407 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n@@ -138,7 +137,8 @@\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n+                    doIteration(tableau);\n+\t\t\t\t\tint i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n                             if (i < minIndex) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "final double entry=tableau.getEntry(i,col);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 141, 
          "faulty": "int i=tableau.getNumObjectiveFunctions();", 
          "type": "InsertBefore", 
          "seed": "doIteration(tableau);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_259/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:37:37.738217790 -0500\n@@ -141,10 +141,7 @@\n                     int i = tableau.getNumObjectiveFunctions();\n                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                         if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+                            return row;\n                         }\n                     }\n                 }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 144, 
          "faulty": "if (i < minIndex) {\n  minIndex=i;\n  minRow=row;\n}", 
          "type": "Replace", 
          "seed": "return row;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:14:08.408260105 -0500\n+++ /tmp/RSRepair_Defects4J_Math_28/patches_ob2o/Patch_52/patched/tmp/RSRepair_Defects4J_Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\t2018-12-02 03:33:59.818009878 -0500\n@@ -101,7 +101,6 @@\n                 // do not use a ulp/epsilon check\n                 final int cmp = Double.compare(ratio, minRatio);\n                 if (cmp == 0) {\n-                    minRatioPositions.add(i);\n                 } else if (cmp < 0) {\n                     minRatio = ratio;\n                     minRatioPositions = new ArrayList<Integer>();\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java", 
          "line": 104, 
          "faulty": "minRatioPositions.add(i);", 
          "type": "Delete", 
          "seed": "incrementIterationsCounter();"
        }
      ]
    }
  ]
}