cd /tmp/Nopol_Defects4J_Math_22;
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 5 \
	--source src/main/java/ \
	--classpath "target/classes/:target/test-classes/:/tmp/Nopol_Defects4J_Math_22/target/classes/:/tmp/Nopol_Defects4J_Math_22/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
23:58:55.432 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/main/java]
23:58:55.440 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Math_22/target/classes/, file:/tmp/Nopol_Defects4J_Math_22/target/test-classes/, file:/tmp/Nopol_Defects4J_Math_22/target/classes/, file:/tmp/Nopol_Defects4J_Math_22/target/test-classes/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
23:58:55.441 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
23:58:55.441 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.TransformerMapTest, org.apache.commons.math3.util.TransformerMapTest]
23:58:55.445 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/main/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.RetryRunnerTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.FunctionUtilsTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DSCompilerTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.GaussianTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.HarmonicOscillatorTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogisticTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.LogitTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SigmoidTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SincTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.SqrtTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.function.StepFunctionTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.RombergIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreParametricTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.integration.gauss.LegendreTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BisectionSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.BrentSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.IllinoisSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.LaguerreSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolver2Test, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.MullerSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.NewtonSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.PegasusSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.RiddersSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.SecantSolverTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFieldTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexFormatTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.ComplexUtilsTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.FrenchComplexFormatTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.complex.RootsOfUnityTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpDecTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpMathTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.dfp.DfpTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractIntegerDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.AbstractRealDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BetaDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.BinomialDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.CauchyDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ChiSquaredDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.ExponentialDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.FDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.GammaDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.HypergeometricDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.LogNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.MultivariateNormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.NormalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PascalDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.PoissonDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.TriangularDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformIntegerDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.UniformRealDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.WeibullDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.distribution.ZipfDistributionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.DimensionMismatchExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.MaxCountExceededExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.OutOfRangeExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ArgUtilsTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.ExceptionContextTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.exception.util.LocalizedFormatsTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.filter.KalmanFilterTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFieldTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionFormatTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.BigFractionTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFieldTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionFormatTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.fraction.FractionTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryChromosomeTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.BinaryMutationTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.ChromosomeTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.CycleCrossoverTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.ElitisticListPopulationTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FitnessCachingTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedElapsedTimeTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.FixedGenerationCountTest, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.ListPopulationTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.NPointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OnePointCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.OrderedCrossoverTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyMutationTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.RandomKeyTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.TournamentSelectionTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.genetics.UniformCrossoverTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.FrenchVector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.LineTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PlaneTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.RotationTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.SubLineTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormatTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.LineTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.euclidean.twod.SubLineTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.Array2DRowRealMatrixTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayFieldVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.ArrayRealVectorTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BiDiagonalTransformerTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockFieldMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.BlockRealMatrixTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskyDecompositionTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.CholeskySolverTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.ConjugateGradientTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenDecompositionTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.EigenSolverTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUDecompositionTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldLUSolverTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FieldMatrixImplTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.FrenchRealVectorFormatTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.HessenbergTransformerTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUDecompositionTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.LUSolverTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.MatrixUtilsTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.OpenMapRealMatrixTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRDecompositionTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.QRSolverTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealMatrixFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorFormatTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.RealVectorTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SchurTransformerTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueDecompositionTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SingularValueSolverTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldMatrixTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseFieldVectorTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealMatrixTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SparseRealVectorTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.SymmLQTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.TriDiagonalTransformerTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableArrayRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.linear.UnmodifiableOpenMapRealVectorTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.ContinuousOutputModelTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.FirstOrderConverterTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.JacobianMatricesTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.EventStateTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.OverlappingEventsTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.events.ReappearingEventTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillIntegratorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputOverlapTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.ode.sampling.StepNormalizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.DifferentiableMultivariateVectorMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.PointVectorValuePairTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.CMAESOptimizerTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.PowellOptimizerTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.CurveFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.GaussianFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.HarmonicFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.fitting.PolynomialFitterTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.MinpackTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexSolverTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.linear.SimplexTableauTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BracketFinderTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.BrentOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.AbstractRandomGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.BitsStreamGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.EmpiricalDistributionTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.GaussianRandomGeneratorTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.ISAACTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.MersenneTwisterTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomAdaptorTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomDataTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.RandomGeneratorAbstractTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.StableRandomGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.UniformRandomGeneratorTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.ValueServerTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well1024aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937aTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well19937cTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497aTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well44497bTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.random.Well512aTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.BetaTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.ErfTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.special.GammaTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.CertifiedDataTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.FrequencyTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.StatUtilsTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.CovarianceTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.correlation.StorelessCovarianceTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LewTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.data.LotteryTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.InteractionTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.KurtosisTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.MeanTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.SkewnessTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MaxTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MedianTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.MinTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.rank.PercentileTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.ProductTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumLogTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumSqTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.descriptive.summary.SumTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.ChiSquareTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.MannWhitneyUTestTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.OneWayAnovaTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TTestTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.TestUtilsTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.ranking.NaturalRankingTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.stat.regression.SimpleRegressionTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastCosineTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastFourierTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastHadamardTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.transform.FastSineTransformerTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.ArithmeticUtilsTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealFieldTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.BigRealTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.ContinuedFractionTest, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.Decimal64Test, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.DefaultTransformerTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathStrictComparisonTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTest, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.FastMathTestPerformance, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.IncrementorTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathArraysTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MathUtilsTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.MultidimensionalCounterTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToDoubleHashMapTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.OpenIntToFieldTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PairTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.PrecisionTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.ResizableDoubleArrayTest, org.apache.commons.math3.util.TransformerMapTest, org.apache.commons.math3.util.TransformerMapTest], complianceLevel=5, outputFolder=., json=true}
23:58:55.446 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 8
23:58:55.460 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 223 MB
23:58:55.460 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
23:58:55.460 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 241 MB
23:58:55.461 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
23:58:55.462 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
23:58:55.462 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
00:10:40.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
00:10:40.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.UniformRealDistribution:184 which is executed by 1 tests
-2021749513
00:10:40.846 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
00:10:40.846 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.FDistribution:275 which is executed by 1 tests
-479761941
00:10:41.120 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
00:10:41.120 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.UniformRealDistribution:112 which is executed by 4 tests
-2021749513
00:10:41.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
00:10:41.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.UniformRealDistribution:109 which is executed by 4 tests
-2021749513
00:10:41.660 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:10:41.834 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (141 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:10:43.112 [pool-5-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (10 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:10:43.123 [pool-6-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:10:43.129 [pool-3-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:10:43.129 [pool-3-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:10:43.129 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.distribution.UniformRealDistribution:109.
00:10:43.130 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:10:43.232 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (94 ms)
<> Total tests run: 14
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:10:43.727 [pool-9-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (8 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:10:43.731 [pool-10-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:10:43.732 [pool-7-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:10:43.732 [pool-7-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:10:43.732 [pool-7-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.distribution.UniformRealDistribution:109.
00:10:43.733 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
00:10:43.733 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.UniformRealDistribution:174 which is executed by 4 tests
-2021749513
00:10:43.989 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
00:10:43.990 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.FDistribution:136 which is executed by 4 tests
-479761941
00:10:44.237 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
00:10:44.238 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.FDistribution:134 which is executed by 4 tests
-479761941
00:10:44.487 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
00:10:44.488 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.FDistribution:133 which is executed by 4 tests
-479761941
00:10:44.736 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
00:10:44.737 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.FDistribution:132 which is executed by 4 tests
-479761941
00:10:44.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
00:10:44.985 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.FDistribution:131 which is executed by 4 tests
-479761941
00:10:45.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
00:10:45.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.FDistribution:130 which is executed by 4 tests
-479761941
00:10:45.480 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
00:10:45.480 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.FDistribution:129 which is executed by 4 tests
-479761941
00:10:45.726 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
00:10:45.726 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Beta:170 which is executed by 11 tests
2066961
00:10:45.969 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
00:10:45.969 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:367 which is executed by 11 tests
00:10:45.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:367
00:10:45.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
00:10:45.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:366 which is executed by 11 tests
00:10:45.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:366
00:10:45.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
00:10:45.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:365 which is executed by 11 tests
00:10:45.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:365
00:10:45.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
00:10:45.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:364 which is executed by 11 tests
00:10:45.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:364
00:10:45.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
00:10:45.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:351 which is executed by 11 tests
00:10:45.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:351
00:10:45.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
00:10:45.979 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:350 which is executed by 11 tests
00:10:45.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:350
00:10:45.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
00:10:45.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:349 which is executed by 11 tests
00:10:45.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:349
00:10:45.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
00:10:45.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:348 which is executed by 11 tests
00:10:45.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:348
00:10:45.980 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
00:10:45.981 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.FDistribution:258 which is executed by 18 tests
-479761941
00:10:46.229 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
00:10:46.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:116 which is executed by 130 tests
00:10:46.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:116
00:10:46.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
00:10:46.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:111 which is executed by 130 tests
00:10:46.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:111
00:10:46.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
00:10:46.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:465 which is executed by 163 tests
00:10:46.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:465
00:10:46.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
00:10:46.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:464 which is executed by 163 tests
00:10:46.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:464
00:10:46.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
00:10:46.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:145 which is executed by 176 tests
00:10:46.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:145
00:10:46.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
00:10:46.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:144 which is executed by 176 tests
00:10:46.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:144
00:10:46.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
00:10:46.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:143 which is executed by 176 tests
00:10:46.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:143
00:10:46.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
00:10:46.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:142 which is executed by 176 tests
00:10:46.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:142
00:10:46.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
00:10:46.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:141 which is executed by 176 tests
00:10:46.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:141
00:10:46.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
00:10:46.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:140 which is executed by 176 tests
00:10:46.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:140
00:10:46.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
00:10:46.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:139 which is executed by 176 tests
00:10:46.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:139
00:10:46.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
00:10:46.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:132 which is executed by 176 tests
00:10:46.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:132
00:10:46.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
00:10:46.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:131 which is executed by 176 tests
00:10:46.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:131
00:10:46.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
00:10:46.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:130 which is executed by 176 tests
00:10:46.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:130
00:10:46.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
00:10:46.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:129 which is executed by 176 tests
00:10:46.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:129
00:10:46.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
00:10:46.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:128 which is executed by 176 tests
00:10:46.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:128
00:10:46.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
00:10:46.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:127 which is executed by 176 tests
00:10:46.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:127
00:10:46.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
00:10:46.237 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:126 which is executed by 176 tests
00:10:46.237 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math3.distribution.RealDistributionAbstractTest:126
00:10:46.237 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
00:10:46.237 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1107 which is executed by 47 tests
1033054629
00:10:46.572 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:10:46.738 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (158 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:10:48.843 [pool-13-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (26 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:10:48.854 [pool-14-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:10:48.855 [pool-11-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:10:48.855 [pool-11-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:10:48.855 [pool-11-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1107.
00:10:48.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
00:10:48.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:601 which is executed by 81 tests
1857420685
00:10:49.120 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
00:10:49.120 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:578 which is executed by 81 tests
1857420685
00:10:49.384 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:11:05.175 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15780 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.NullPointerException
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:349)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:96)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:11:06.451 [pool-17-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:349)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:96)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:11:06.703 [pool-18-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (248 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:11:06.704 [pool-15-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): null]
00:11:06.704 [pool-15-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:11:06.704 [pool-15-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:578.
00:11:06.705 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:11:21.993 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15279 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.NullPointerException
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:349)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:96)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:11:22.414 [pool-21-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:349)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:96)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:11:22.702 [pool-22-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (285 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:11:22.703 [pool-19-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): null]
00:11:22.704 [pool-19-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:11:22.704 [pool-19-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:578.
00:11:22.704 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
00:11:22.705 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:570 which is executed by 81 tests
1857420685
00:11:22.961 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
00:11:22.961 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:568 which is executed by 81 tests
1857420685
00:11:23.221 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:11:38.412 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15181 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:11:39.081 [pool-25-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (242 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:11:39.087 [pool-26-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:11:39.088 [pool-23-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:11:39.088 [pool-23-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:11:39.088 [pool-23-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:568.
00:11:39.091 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
00:11:39.091 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:564 which is executed by 81 tests
1857420685
00:11:39.349 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:11:54.584 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15225 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:11:55.265 [pool-29-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (244 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:11:55.283 [pool-30-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:11:55.284 [pool-27-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:11:55.285 [pool-27-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:11:55.285 [pool-27-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:564.
00:11:55.287 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
00:11:55.287 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:563 which is executed by 81 tests
1857420685
00:11:55.544 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:12:10.799 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15246 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:12:11.535 [pool-33-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (317 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:12:11.591 [pool-34-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (52 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:12:11.592 [pool-31-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:12:11.592 [pool-31-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:12:11.592 [pool-31-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:563.
00:12:11.592 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:12:26.804 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15202 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:12:27.573 [pool-37-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (382 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:12:27.627 [pool-38-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (52 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:12:27.629 [pool-35-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:12:27.629 [pool-35-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:12:27.629 [pool-35-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:563.
00:12:27.632 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
00:12:27.633 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:562 which is executed by 81 tests
1857420685
00:12:27.886 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:12:43.156 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15261 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:12:43.844 [pool-41-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (296 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:12:43.892 [pool-42-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (46 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:12:43.893 [pool-39-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:12:43.893 [pool-39-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:12:43.893 [pool-39-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:562.
00:12:43.894 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
00:12:43.894 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:561 which is executed by 81 tests
1857420685
00:12:44.147 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:12:59.493 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15337 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:13:00.101 [pool-45-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (236 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:13:00.105 [pool-46-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:13:00.106 [pool-43-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:13:00.106 [pool-43-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:13:00.106 [pool-43-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:561.
00:13:00.106 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
00:13:00.106 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:559 which is executed by 81 tests
1857420685
00:13:00.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:13:15.635 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15266 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:13:16.258 [pool-49-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (255 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:13:16.262 [pool-50-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:13:16.262 [pool-47-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:13:16.262 [pool-47-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:13:16.262 [pool-47-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:559.
00:13:16.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
00:13:16.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:555 which is executed by 81 tests
1857420685
00:13:16.514 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:13:31.678 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15156 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:337)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
00:13:32.439 [pool-53-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (384 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:337)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:13:32.453 [pool-54-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:13:32.454 [pool-51-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): String index out of range: 0]
00:13:32.455 [pool-51-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:13:32.455 [pool-51-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:555.
00:13:32.455 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
00:13:32.455 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:554 which is executed by 81 tests
1857420685
00:13:32.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:13:48.008 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15291 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:343)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
00:13:48.692 [pool-57-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (307 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:343)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:13:48.706 [pool-58-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:13:48.707 [pool-55-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): String index out of range: 0]
00:13:48.707 [pool-55-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:13:48.707 [pool-55-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:554.
00:13:48.708 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:14:03.947 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15231 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:343)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
00:14:04.658 [pool-61-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (341 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:343)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:14:04.672 [pool-62-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:14:04.672 [pool-59-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): String index out of range: 0]
00:14:04.673 [pool-59-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:14:04.673 [pool-59-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:554.
00:14:04.673 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
00:14:04.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:551 which is executed by 81 tests
1857420685
00:14:04.940 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:14:20.237 [pool-64-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15289 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:14:20.852 [pool-65-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (256 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:14:20.856 [pool-66-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:14:20.857 [pool-63-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:14:20.857 [pool-63-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:14:20.857 [pool-63-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:551.
00:14:20.858 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
00:14:20.858 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:550 which is executed by 81 tests
1857420685
00:14:21.112 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:14:36.370 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15250 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:337)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
00:14:36.985 [pool-69-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (255 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:337)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:14:36.997 [pool-70-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:14:36.998 [pool-67-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): String index out of range: 0]
00:14:36.998 [pool-67-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:14:36.998 [pool-67-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:550.
00:14:36.999 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
00:14:36.999 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:549 which is executed by 81 tests
1857420685
00:14:37.252 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:14:52.482 [pool-72-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15221 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:340)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
00:14:53.080 [pool-73-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (241 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:340)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:14:53.095 [pool-74-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:14:53.095 [pool-71-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): String index out of range: 0]
00:14:53.096 [pool-71-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:14:53.096 [pool-71-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:549.
00:14:53.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:15:08.209 [pool-76-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15105 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:340)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
00:15:08.847 [pool-77-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (282 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:340)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:340)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
00:15:08.855 [pool-78-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:340)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)

00:15:08.856 [pool-75-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): String index out of range: 0]
00:15:08.856 [pool-75-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): String index out of range: 0]
00:15:08.856 [pool-75-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:549.
00:15:08.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
00:15:08.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:546 which is executed by 81 tests
1857420685
00:15:09.108 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:15:24.319 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15202 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:15:24.987 [pool-81-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (312 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:15:24.991 [pool-82-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:15:24.991 [pool-79-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:15:24.992 [pool-79-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:15:24.992 [pool-79-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:546.
00:15:24.992 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
00:15:24.992 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:545 which is executed by 81 tests
1857420685
00:15:25.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:15:40.484 [pool-84-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15231 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:15:41.068 [pool-85-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (234 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:15:41.072 [pool-86-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:15:41.073 [pool-83-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:15:41.073 [pool-83-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:15:41.074 [pool-83-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:545.
00:15:41.074 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
00:15:41.074 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:544 which is executed by 81 tests
1857420685
00:15:41.325 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:15:56.664 [pool-88-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15332 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:15:57.269 [pool-89-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (258 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:15:57.277 [pool-90-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:15:57.278 [pool-87-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:15:57.278 [pool-87-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:15:57.278 [pool-87-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:544.
00:15:57.279 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:16:12.559 [pool-92-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15272 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:16:13.145 [pool-93-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (237 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:16:13.150 [pool-94-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:16:13.151 [pool-91-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:16:13.151 [pool-91-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:16:13.151 [pool-91-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:544.
00:16:13.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
00:16:13.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:541 which is executed by 81 tests
1857420685
00:16:13.402 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:16:28.632 [pool-96-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15221 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:16:29.212 [pool-97-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (233 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:16:29.219 [pool-98-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:16:29.220 [pool-95-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:16:29.220 [pool-95-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:16:29.220 [pool-95-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:541.
00:16:29.221 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
00:16:29.221 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:540 which is executed by 81 tests
1857420685
00:16:29.471 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:16:44.645 [pool-100-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15166 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:16:45.225 [pool-101-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (234 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:16:45.234 [pool-102-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:16:45.234 [pool-99-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:16:45.234 [pool-99-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:16:45.234 [pool-99-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:540.
00:16:45.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:17:00.298 [pool-104-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15056 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:17:00.911 [pool-105-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (266 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:17:00.919 [pool-106-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:17:00.920 [pool-103-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:17:00.920 [pool-103-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:17:00.920 [pool-103-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:540.
00:17:00.921 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
00:17:00.921 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:538 which is executed by 81 tests
1857420685
00:17:01.172 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:17:16.387 [pool-108-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15206 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:337)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
00:17:16.966 [pool-109-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (233 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:337)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:17:16.980 [pool-110-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:17:16.981 [pool-107-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): String index out of range: 0]
00:17:16.981 [pool-107-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:17:16.981 [pool-107-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:538.
00:17:16.982 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
00:17:16.982 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:537 which is executed by 81 tests
1857420685
00:17:17.233 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:17:32.428 [pool-112-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15184 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:337)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
00:17:33.077 [pool-113-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (308 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:412)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:337)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:97)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:83)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:17:33.087 [pool-114-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (8 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:17:33.088 [pool-111-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): String index out of range: 0]
00:17:33.088 [pool-111-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:17:33.088 [pool-111-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:537.
00:17:33.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
00:17:33.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:535 which is executed by 81 tests
1857420685
00:17:33.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
00:17:33.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:533 which is executed by 81 tests
1857420685
00:17:33.588 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
00:17:33.588 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:532 which is executed by 81 tests
1857420685
00:17:33.838 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
00:17:33.838 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:531 which is executed by 81 tests
1857420685
00:17:34.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
00:17:34.093 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:530 which is executed by 81 tests
1857420685
00:17:34.363 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
00:17:34.363 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:332 which is executed by 81 tests
1857420685
00:17:34.616 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
00:17:34.616 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:331 which is executed by 81 tests
1857420685
00:17:34.869 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:17:50.106 [pool-116-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15229 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:17:51.043 [pool-117-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (588 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:17:51.050 [pool-118-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:17:51.050 [pool-115-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:17:51.050 [pool-115-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:17:51.051 [pool-115-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.DfpField:331.
00:17:51.051 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
00:17:51.051 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:269 which is executed by 81 tests
1857420685
00:17:51.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
00:17:51.302 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.DfpField:251 which is executed by 81 tests
1857420685
00:17:51.552 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
00:17:51.552 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1488 which is executed by 81 tests
68623
00:17:51.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
00:17:51.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1485 which is executed by 81 tests
68623
00:17:52.153 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:07.405 [pool-120-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15240 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:08.513 [pool-121-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (550 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:08.519 [pool-122-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:18:08.519 [pool-119-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:18:08.520 [pool-119-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:18:08.520 [pool-119-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1485.
00:18:08.520 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
00:18:08.520 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1484 which is executed by 81 tests
68623
00:18:08.818 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:24.007 [pool-124-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15179 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:25.132 [pool-125-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (613 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:25.137 [pool-126-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:18:25.137 [pool-123-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:18:25.138 [pool-123-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:18:25.138 [pool-123-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1484.
00:18:25.138 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
00:18:25.138 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1482 which is executed by 81 tests
68623
00:18:25.433 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:40.627 [pool-128-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15186 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:41.788 [pool-129-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (659 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:41.794 [pool-130-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:18:41.795 [pool-127-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:18:41.795 [pool-127-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:18:41.795 [pool-127-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1482.
00:18:41.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:56.965 [pool-132-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15163 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:58.070 [pool-133-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (610 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:18:58.076 [pool-134-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:18:58.076 [pool-131-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:18:58.077 [pool-131-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:18:58.077 [pool-131-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1482.
00:18:58.077 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
00:18:58.077 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1476 which is executed by 81 tests
68623
00:18:58.373 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:19:13.586 [pool-136-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15204 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:19:14.653 [pool-137-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (583 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:19:14.659 [pool-138-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:19:14.660 [pool-135-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:19:14.660 [pool-135-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:19:14.660 [pool-135-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1476.
00:19:14.660 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:19:29.882 [pool-140-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15215 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:19:30.960 [pool-141-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (598 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:19:30.966 [pool-142-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:19:30.967 [pool-139-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:19:30.967 [pool-139-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:19:30.967 [pool-139-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1476.
00:19:30.967 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
00:19:30.967 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1470 which is executed by 81 tests
68623
00:19:31.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:19:46.878 [pool-144-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15143 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:19:48.001 [pool-145-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (621 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:19:48.007 [pool-146-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:19:48.007 [pool-143-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:19:48.008 [pool-143-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:19:48.008 [pool-143-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1470.
00:19:48.008 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:20:03.234 [pool-148-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15217 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:20:04.291 [pool-149-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (573 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:20:04.297 [pool-150-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:20:04.297 [pool-147-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:20:04.298 [pool-147-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:20:04.298 [pool-147-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1470.
00:20:04.298 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
00:20:04.298 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1463 which is executed by 81 tests
68623
00:20:04.591 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:20:19.838 [pool-152-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15239 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:20:20.718 [pool-153-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (400 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:20:20.722 [pool-154-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:20:20.723 [pool-151-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:20:20.723 [pool-151-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:20:20.723 [pool-151-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1463.
00:20:20.723 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:20:36.008 [pool-156-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15270 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:20:36.903 [pool-157-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (414 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:20:36.907 [pool-158-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:20:36.908 [pool-155-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:20:36.908 [pool-155-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:20:36.908 [pool-155-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1463.
00:20:36.908 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
00:20:36.908 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1460 which is executed by 81 tests
68623
00:20:37.201 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:20:52.498 [pool-160-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15289 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:21:05.932 [pool-161-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12966 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:21:05.966 [pool-162-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:21:05.967 [pool-159-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:21:05.967 [pool-159-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:21:05.967 [pool-159-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1460.
00:21:05.967 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
00:21:05.968 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1459 which is executed by 81 tests
68623
00:21:06.275 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:21:21.906 [pool-164-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15624 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:24:42.375 [pool-163-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
00:24:42.375 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
00:24:42.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
00:24:42.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1458 which is executed by 81 tests
68623
00:24:42.681 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
00:24:42.681 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1457 which is executed by 81 tests
68623
00:24:42.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:24:58.133 [pool-167-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15149 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:217)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:559)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:212)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:177)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)
00:26:29.937 [pool-168-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (91342 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[String index out of range: 0]
java.lang.StringIndexOutOfBoundsException: String index out of range: 0    at java.lang.String.charAt(String.java:658)
    at org.apache.commons.math3.dfp.Dfp.<init>(Dfp.java:217)
    at org.apache.commons.math3.dfp.DfpField.split(DfpField.java:559)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:212)
    at org.apache.commons.math3.dfp.DfpField.<init>(DfpField.java:177)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:45)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:26:30.315 [pool-169-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (376 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:26:30.316 [pool-166-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): String index out of range: 0]
00:26:30.316 [pool-166-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:26:30.316 [pool-166-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1457.
00:26:30.317 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
00:26:30.317 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1456 which is executed by 81 tests
68623
00:26:30.630 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
00:26:30.630 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1454 which is executed by 81 tests
68623
00:26:30.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:26:46.333 [pool-171-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15401 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:26:47.409 [pool-172-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (581 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:26:47.428 [pool-173-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (8 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:26:47.429 [pool-170-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:26:47.429 [pool-170-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:26:47.429 [pool-170-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1454.
00:26:47.429 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:02.623 [pool-175-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15186 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:03.639 [pool-176-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (557 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:03.647 [pool-177-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:27:03.656 [pool-174-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:27:03.656 [pool-174-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:27:03.657 [pool-174-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1454.
00:27:03.657 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
00:27:03.657 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1438 which is executed by 81 tests
68623
00:27:03.953 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:19.210 [pool-179-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15250 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:20.259 [pool-180-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (593 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:20.264 [pool-181-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:27:20.265 [pool-178-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:27:20.265 [pool-178-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:27:20.265 [pool-178-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1438.
00:27:20.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
00:27:20.266 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1437 which is executed by 81 tests
68623
00:27:20.558 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:35.738 [pool-183-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15173 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:36.836 [pool-184-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (629 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:36.841 [pool-185-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:27:36.842 [pool-182-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:27:36.842 [pool-182-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:27:36.842 [pool-182-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1437.
00:27:36.843 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
00:27:36.843 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1419 which is executed by 81 tests
68623
00:27:37.139 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:52.402 [pool-187-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15256 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:53.462 [pool-188-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (577 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:27:53.468 [pool-189-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:27:53.488 [pool-186-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:27:53.488 [pool-186-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:27:53.489 [pool-186-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.dfp.Dfp:1419.
00:27:53.489 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
00:27:53.489 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:1418 which is executed by 81 tests
68623
00:27:53.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
00:27:53.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.dfp.Dfp:642 which is executed by 81 tests
68623
00:27:54.069 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
00:27:54.069 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:217 which is executed by 83 tests
1648821820
00:27:54.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
00:27:54.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:216 which is executed by 83 tests
1648821820
00:27:54.555 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:09.896 [pool-191-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15334 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:10.462 [pool-192-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (238 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:10.466 [pool-193-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:28:10.466 [pool-190-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:28:10.466 [pool-190-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:28:10.466 [pool-190-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:216.
00:28:10.466 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
00:28:10.467 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:207 which is executed by 84 tests
1648821820
00:28:10.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #93
00:28:10.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:205 which is executed by 84 tests
1648821820
00:28:10.950 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:26.202 [pool-195-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15239 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:26.723 [pool-196-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (231 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:26.727 [pool-197-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:28:26.727 [pool-194-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:28:26.727 [pool-194-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:28:26.727 [pool-194-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:205.
00:28:26.728 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #94
00:28:26.728 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:203 which is executed by 84 tests
1648821820
00:28:26.970 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:42.326 [pool-199-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15349 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:42.845 [pool-200-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (230 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:42.848 [pool-201-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:28:42.849 [pool-198-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:28:42.849 [pool-198-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:28:42.849 [pool-198-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:203.
00:28:42.849 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #95
00:28:42.849 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:199 which is executed by 84 tests
1648821820
00:28:43.091 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:58.396 [pool-203-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15298 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:71)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:111)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:28:58.932 [pool-204-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (245 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:71)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:111)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:28:58.936 [pool-205-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:28:58.937 [pool-202-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): 624]
00:28:58.937 [pool-202-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:28:58.937 [pool-202-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:199.
00:28:58.937 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #96
00:28:58.938 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:198 which is executed by 84 tests
1648821820
00:28:59.181 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:29:14.505 [pool-207-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15312 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:29:15.028 [pool-208-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (231 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:29:15.031 [pool-209-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:29:15.032 [pool-206-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:29:15.032 [pool-206-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:29:15.032 [pool-206-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:198.
00:29:15.032 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #97
00:29:15.032 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:197 which is executed by 84 tests
1648821820
00:29:15.288 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:29:30.518 [pool-211-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15223 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:71)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:29:31.060 [pool-212-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (251 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:71)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:29:31.071 [pool-213-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:29:31.072 [pool-210-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): 624]
00:29:31.072 [pool-210-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:29:31.072 [pool-210-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:197.
00:29:31.072 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:29:46.383 [pool-215-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15289 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:71)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:29:46.977 [pool-216-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (305 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:71)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:29:46.988 [pool-217-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:29:46.989 [pool-214-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): 624]
00:29:46.989 [pool-214-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:29:46.989 [pool-214-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:197.
00:29:46.989 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #98
00:29:46.989 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:196 which is executed by 84 tests
1648821820
00:29:47.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:02.511 [pool-219-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15272 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:03.117 [pool-220-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (303 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:03.126 [pool-221-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:30:03.127 [pool-218-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:30:03.127 [pool-218-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:30:03.127 [pool-218-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:196.
00:30:03.128 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #99
00:30:03.128 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:195 which is executed by 84 tests
1648821820
00:30:03.372 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:18.656 [pool-223-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15276 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:19.200 [pool-224-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (256 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:19.209 [pool-225-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:30:19.213 [pool-222-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:30:19.213 [pool-222-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:30:19.213 [pool-222-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:195.
00:30:19.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #100
00:30:19.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:194 which is executed by 84 tests
1648821820
00:30:19.456 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #101
00:30:19.456 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:193 which is executed by 84 tests
1648821820
00:30:19.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #102
00:30:19.699 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:192 which is executed by 84 tests
1648821820
00:30:19.942 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #103
00:30:19.942 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:191 which is executed by 84 tests
1648821820
00:30:20.186 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:35.534 [pool-227-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15341 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:36.086 [pool-228-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (262 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:36.089 [pool-229-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:30:36.090 [pool-226-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:30:36.090 [pool-226-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:30:36.090 [pool-226-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:191.
00:30:36.091 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #104
00:30:36.091 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:187 which is executed by 84 tests
1648821820
00:30:36.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:51.670 [pool-231-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15329 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 2
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:58)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:111)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:30:52.199 [pool-232-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (240 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[2]
java.lang.ArrayIndexOutOfBoundsException: 2    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:58)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:111)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:30:52.206 [pool-233-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:30:52.206 [pool-230-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): 2]
00:30:52.206 [pool-230-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:30:52.206 [pool-230-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:187.
00:30:52.207 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #105
00:30:52.207 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:186 which is executed by 84 tests
1648821820
00:30:52.449 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:31:07.723 [pool-235-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15266 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 2
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:58)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:31:08.248 [pool-236-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (234 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[2]
java.lang.ArrayIndexOutOfBoundsException: 2    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:58)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:31:08.258 [pool-237-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (8 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:31:08.259 [pool-234-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): 2]
00:31:08.259 [pool-234-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:31:08.259 [pool-234-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:186.
00:31:08.259 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:31:23.506 [pool-239-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15241 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 2
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:58)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:31:24.027 [pool-240-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (233 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[2]
java.lang.ArrayIndexOutOfBoundsException: 2    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:58)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:31:24.038 [pool-241-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (8 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:31:24.039 [pool-238-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): 2]
00:31:24.039 [pool-238-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:31:24.039 [pool-238-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:186.
00:31:24.039 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #106
00:31:24.039 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:184 which is executed by 84 tests
1648821820
00:31:24.280 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:31:39.647 [pool-243-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15359 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:56)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:111)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:31:40.164 [pool-244-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (231 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:56)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:111)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:31:40.168 [pool-245-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:31:40.168 [pool-242-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): 624]
00:31:40.168 [pool-242-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:31:40.168 [pool-242-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:184.
00:31:40.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #107
00:31:40.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:183 which is executed by 84 tests
1648821820
00:31:40.410 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:31:55.557 [pool-247-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15140 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:31:56.071 [pool-248-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (226 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:31:56.075 [pool-249-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:31:56.075 [pool-246-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:31:56.075 [pool-246-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:31:56.075 [pool-246-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:183.
00:31:56.076 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #108
00:31:56.076 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:182 which is executed by 84 tests
1648821820
00:31:56.317 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:32:11.579 [pool-251-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15254 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:56)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:32:12.116 [pool-252-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (248 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:56)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:32:12.127 [pool-253-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:32:12.128 [pool-250-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): 624]
00:32:12.128 [pool-250-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:32:12.128 [pool-250-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:182.
00:32:12.128 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:32:27.350 [pool-255-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15212 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.ArrayIndexOutOfBoundsException: 624
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:56)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:32:27.877 [pool-256-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (235 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[624]
java.lang.ArrayIndexOutOfBoundsException: 624    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:56)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:110)
    at org.apache.commons.math3.random.MersenneTwister.<init>(MersenneTwister.java:32)
    at org.apache.commons.math3.util.FastMathTest.setUp(FastMathTest.java:46)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:32:27.890 [pool-257-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (9 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:32:27.893 [pool-254-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): 624]
00:32:27.893 [pool-254-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:32:27.893 [pool-254-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:182.
00:32:27.893 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #109
00:32:27.894 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:181 which is executed by 84 tests
1648821820
00:32:28.136 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:32:43.432 [pool-259-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15289 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:32:43.978 [pool-260-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (257 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:32:43.987 [pool-261-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (8 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:32:43.988 [pool-258-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:32:43.988 [pool-258-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:32:43.988 [pool-258-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:181.
00:32:43.988 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #110
00:32:43.988 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:180 which is executed by 84 tests
1648821820
00:32:44.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:32:59.417 [pool-263-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15174 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:32:59.948 [pool-264-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (240 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:32:59.957 [pool-265-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:32:59.957 [pool-262-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:32:59.957 [pool-262-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:32:59.958 [pool-262-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:180.
00:32:59.958 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #111
00:32:59.958 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:179 which is executed by 84 tests
1648821820
00:33:00.199 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #112
00:33:00.199 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:178 which is executed by 84 tests
1648821820
00:33:00.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #113
00:33:00.460 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:177 which is executed by 84 tests
1648821820
00:33:00.702 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #114
00:33:00.702 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:176 which is executed by 84 tests
1648821820
00:33:00.944 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:33:16.191 [pool-267-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15241 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:33:16.738 [pool-268-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (228 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:33:16.742 [pool-269-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:33:16.742 [pool-266-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:33:16.743 [pool-266-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:33:16.743 [pool-266-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:176.
00:33:16.743 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #115
00:33:16.743 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:174 which is executed by 84 tests
1648821820
00:33:16.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #116
00:33:16.984 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:173 which is executed by 84 tests
1648821820
00:33:17.225 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #117
00:33:17.225 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:172 which is executed by 84 tests
1648821820
00:33:17.466 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:33:32.807 [pool-271-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15334 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:33:33.336 [pool-272-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (232 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:33:33.340 [pool-273-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:33:33.341 [pool-270-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:33:33.341 [pool-270-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:33:33.341 [pool-270-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:172.
00:33:33.341 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #118
00:33:33.341 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:167 which is executed by 84 tests
1648821820
00:33:33.583 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:33:48.801 [pool-275-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15211 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:33:49.319 [pool-276-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (231 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:33:49.323 [pool-277-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:33:49.328 [pool-274-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:33:49.328 [pool-274-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:33:49.329 [pool-274-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:167.
00:33:49.329 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:34:04.527 [pool-279-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15192 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:34:05.065 [pool-280-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (247 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.StackOverflowError
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:53)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:106)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:68)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:106)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:68)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:106)
00:34:05.094 [pool-281-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (27 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[null]
java.lang.StackOverflowError    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:53)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:106)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:68)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:106)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:68)
    at org.apache.commons.math3.random.MersenneTwister.setSeed(MersenneTwister.java:106)

00:34:05.095 [pool-278-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:34:05.095 [pool-278-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): null]
00:34:05.095 [pool-278-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:167.
00:34:05.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #119
00:34:05.096 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.BitsStreamGenerator:166 which is executed by 1039 tests
936233262
00:34:05.341 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #120
00:34:05.341 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.BitsStreamGenerator:165 which is executed by 1039 tests
936233262
00:34:05.580 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:34:21.092 [pool-283-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15500 ms)
<> Total tests run: 75
<> Ignored tests: 1
<> Failed tests: 3
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:34:21.621 [pool-284-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (247 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:34:21.642 [pool-285-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (16 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:34:21.647 [pool-286-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:34:21.650 [pool-287-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:34:21.652 [pool-288-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:34:21.654 [pool-289-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:34:21.655 [pool-282-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods, testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:34:21.655 [pool-282-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods, testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:34:21.655 [pool-282-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.BitsStreamGenerator:165.
00:34:21.655 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #121
00:34:21.656 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:155 which is executed by 129 tests
1648821820
00:34:21.898 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #122
00:34:21.898 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:154 which is executed by 129 tests
1648821820
00:34:22.140 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:34:37.424 [pool-291-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15278 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:34:37.941 [pool-292-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (230 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:34:37.944 [pool-293-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:34:37.945 [pool-290-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:34:37.945 [pool-290-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:34:37.945 [pool-290-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:154.
00:34:37.945 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #123
00:34:37.945 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:151 which is executed by 129 tests
1648821820
00:34:38.185 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:34:53.395 [pool-295-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15202 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:34:53.919 [pool-296-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (236 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:34:53.926 [pool-297-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:34:53.927 [pool-294-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:34:53.927 [pool-294-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:34:53.927 [pool-294-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:151.
00:34:53.927 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #124
00:34:53.927 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:150 which is executed by 129 tests
1648821820
00:34:54.169 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:35:09.532 [pool-299-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15356 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:35:10.059 [pool-300-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (240 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:35:10.066 [pool-301-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:35:10.067 [pool-298-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:35:10.067 [pool-298-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:35:10.067 [pool-298-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:150.
00:35:10.067 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #125
00:35:10.067 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:147 which is executed by 129 tests
1648821820
00:35:10.310 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:35:25.589 [pool-303-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15273 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:35:26.115 [pool-304-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (229 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:35:26.122 [pool-305-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:35:26.122 [pool-302-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:35:26.122 [pool-302-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:35:26.123 [pool-302-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:147.
00:35:26.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #126
00:35:26.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:146 which is executed by 129 tests
1648821820
00:35:26.364 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:35:41.671 [pool-307-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15300 ms)
<> Total tests run: 44
<> Ignored tests: 1
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:35:42.188 [pool-308-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (231 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

FastMath does not implement: public static int java.lang.StrictMath.addExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.addExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.multiplyExact(int,int)
FastMath does not implement: public static long java.lang.StrictMath.multiplyExact(long,long)
FastMath does not implement: public static long java.lang.StrictMath.subtractExact(long,long)
FastMath does not implement: public static int java.lang.StrictMath.subtractExact(int,int)
FastMath does not implement: public static int java.lang.StrictMath.toIntExact(long)
FastMath does not implement: public static long java.lang.StrictMath.floorDiv(long,long)
FastMath does not implement: public static int java.lang.StrictMath.floorDiv(int,int)
FastMath does not implement: public static int java.lang.StrictMath.floorMod(int,int)
FastMath does not implement: public static long java.lang.StrictMath.floorMod(long,long)
FastMath does not implement: public static float java.lang.StrictMath.nextDown(float)
FastMath does not implement: public static double java.lang.StrictMath.nextDown(double)
java.lang.AssertionError: FastMath should implement all StrictMath methods
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
00:35:42.191 [pool-309-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest)
[FastMath should implement all StrictMath methods]
java.lang.AssertionError: FastMath should implement all StrictMath methods    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.assertTrue(Assert.java:41)
    at org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses(FastMathTest.java:1055)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)

00:35:42.192 [pool-306-thread-1] DEBUG tests.output - Failing tests with false: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:35:42.192 [pool-306-thread-1] DEBUG tests.output - Failing tests with true: 
[checkMissingFastMathClasses(org.apache.commons.math3.util.FastMathTest): FastMath should implement all StrictMath methods]
00:35:42.192 [pool-306-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.MersenneTwister:146.
00:35:42.192 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #127
00:35:42.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.MersenneTwister:144 which is executed by 129 tests
1648821820
00:35:42.433 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #128
00:35:42.434 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Beta:201 which is executed by 131 tests
2066961
00:35:42.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:42.848 [pool-311-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (166 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:43.130 [pool-310-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:83: error: variable ret might not have been initialized
        return ret;
               ^
00:35:43.132 [pool-310-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
    }

    public static double regularizedBeta(double x, double a, double b) {
        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) {
        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) {
        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math3.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math3.util.ContinuedFraction fraction = new org.apache.commons.math3.util.ContinuedFraction() {
                    @java.lang.Override
                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    @java.lang.Override
                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((org.apache.commons.math3.util.FastMath.exp(((((a * (org.apache.commons.math3.util.FastMath.log(x))) + (b * (org.apache.commons.math3.util.FastMath.log((1.0 - x))))) - (org.apache.commons.math3.util.FastMath.log(a))) - (org.apache.commons.math3.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math3.special.Beta.logBeta(a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(76).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectInput("org.apache.commons.math3.special.Beta.DEFAULT_EPSILON",org.apache.commons.math3.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(76).collectionEnds();
            }
            if (runtimeAngelicValue)
                ret = ((org.apache.commons.math3.special.Gamma.logGamma(a)) + (org.apache.commons.math3.special.Gamma.logGamma(b))) - (org.apache.commons.math3.special.Gamma.logGamma((a + b)));

        }
        return ret;
    }
}
00:35:43.132 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:35:43.133 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #129
00:35:43.133 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Beta:205 which is executed by 137 tests
2066961
00:35:43.372 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #130
00:35:43.373 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Beta:195 which is executed by 137 tests
2066961
00:35:43.613 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:43.806 [pool-313-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (186 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:44.078 [pool-312-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Beta.java:84: error: variable ret might not have been initialized
        return ret;
               ^
00:35:44.080 [pool-312-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
    }

    public static double regularizedBeta(double x, double a, double b) {
        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) {
        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) {
        return org.apache.commons.math3.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) {
        double ret;
        if (((((((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(a))) || (java.lang.Double.isNaN(b))) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - (org.apache.commons.math3.special.Beta.regularizedBeta((1.0 - x), b, a, epsilon, maxIterations));
            }else {
                org.apache.commons.math3.util.ContinuedFraction fraction = new org.apache.commons.math3.util.ContinuedFraction() {
                    @java.lang.Override
                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        }else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    @java.lang.Override
                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = ((org.apache.commons.math3.util.FastMath.exp(((((a * (org.apache.commons.math3.util.FastMath.log(x))) + (b * (org.apache.commons.math3.util.FastMath.log((1.0 - x))))) - (org.apache.commons.math3.util.FastMath.log(a))) - (org.apache.commons.math3.special.Beta.logBeta(a, b, epsilon, maxIterations))))) * 1.0) / (fraction.evaluate(x, epsilon, maxIterations));
            }

        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math3.special.Beta.logBeta(a, b, org.apache.commons.math3.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(77).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("(b <= 0.0)",(b <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("(a <= 0.0)",(a <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectInput("org.apache.commons.math3.special.Beta.DEFAULT_EPSILON",org.apache.commons.math3.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(77).collectionEnds();
        }
        if (runtimeAngelicValue) if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(b))) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            ret = ((org.apache.commons.math3.special.Gamma.logGamma(a)) + (org.apache.commons.math3.special.Gamma.logGamma(b))) - (org.apache.commons.math3.special.Gamma.logGamma((a + b)));
        }
        return ret;
    }
}
00:35:44.080 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:35:44.088 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:44.261 [pool-315-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (165 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:44.566 [pool-316-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:44.569 [pool-317-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:44.569 [pool-314-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:35:44.569 [pool-314-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:35:44.569 [pool-314-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Beta:195.
00:35:44.569 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #131
00:35:44.569 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:156 which is executed by 625 tests
-593135567
00:35:44.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:44.978 [pool-319-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (157 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:86)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:65)
00:35:45.258 [pool-320-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:86)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:65)

java.lang.NullPointerException
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:77)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:64)
00:35:45.261 [pool-321-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:77)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:64)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:45.282 [pool-322-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:45.284 [pool-323-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:45.287 [pool-318-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): null, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): null]
00:35:45.287 [pool-318-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:45.287 [pool-318-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:156.
00:35:45.288 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #132
00:35:45.288 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:155 which is executed by 625 tests
-593135567
00:35:45.531 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:45.708 [pool-325-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (164 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:46.005 [pool-326-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:46.022 [pool-327-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:46.025 [pool-328-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:46.026 [pool-329-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:46.027 [pool-324-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:46.027 [pool-324-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:46.027 [pool-324-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:155.
00:35:46.027 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #133
00:35:46.028 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:180 which is executed by 951 tests
-593135567
00:35:46.267 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #134
00:35:46.268 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:179 which is executed by 951 tests
-593135567
00:35:46.508 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:46.671 [pool-331-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (157 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:46.961 [pool-332-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:46.964 [pool-333-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:46.965 [pool-334-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:46.987 [pool-335-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:46.990 [pool-330-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:46.991 [pool-330-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:46.991 [pool-330-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:179.
00:35:46.991 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #135
00:35:46.991 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:170 which is executed by 970 tests
-593135567
00:35:47.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #136
00:35:47.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:169 which is executed by 970 tests
-593135567
00:35:47.474 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:47.631 [pool-337-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (149 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:47.922 [pool-338-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:47.925 [pool-339-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:47.927 [pool-340-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:47.929 [pool-341-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:47.930 [pool-336-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:47.930 [pool-336-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:47.930 [pool-336-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:169.
00:35:47.931 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #137
00:35:47.931 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:168 which is executed by 970 tests
-593135567
00:35:48.171 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:48.335 [pool-343-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (157 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:48.627 [pool-344-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:48.629 [pool-345-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:48.631 [pool-346-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:48.632 [pool-347-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:48.632 [pool-342-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:48.632 [pool-342-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:48.632 [pool-342-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:168.
00:35:48.632 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #138
00:35:48.632 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:164 which is executed by 970 tests
-593135567
00:35:48.871 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:49.039 [pool-349-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (161 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:49.338 [pool-350-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (27 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:49.347 [pool-351-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:49.360 [pool-352-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:49.369 [pool-353-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:49.369 [pool-348-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:49.370 [pool-348-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:49.370 [pool-348-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:164.
00:35:49.370 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #139
00:35:49.370 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:163 which is executed by 970 tests
-593135567
00:35:49.611 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #140
00:35:49.611 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:162 which is executed by 970 tests
-593135567
00:35:49.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:50.032 [pool-355-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (173 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:50.326 [pool-356-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:50.330 [pool-357-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:50.332 [pool-358-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:50.334 [pool-359-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:50.334 [pool-354-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:50.334 [pool-354-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:50.334 [pool-354-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:162.
00:35:50.334 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #141
00:35:50.334 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:161 which is executed by 970 tests
-593135567
00:35:50.574 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:50.741 [pool-361-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (160 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:51.033 [pool-362-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:51.036 [pool-363-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:51.037 [pool-364-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:51.038 [pool-365-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:51.046 [pool-360-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:51.046 [pool-360-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:51.046 [pool-360-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:161.
00:35:51.047 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:51.211 [pool-367-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (158 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:51.501 [pool-368-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:51.504 [pool-369-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:51.506 [pool-370-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:51.508 [pool-371-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:51.508 [pool-366-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:51.508 [pool-366-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:51.508 [pool-366-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:161.
00:35:51.509 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #142
00:35:51.509 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:159 which is executed by 970 tests
-593135567
00:35:51.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:51.912 [pool-373-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (157 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:52.215 [pool-374-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (25 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:52.219 [pool-375-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:52.220 [pool-376-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:52.222 [pool-377-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:52.222 [pool-372-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:52.222 [pool-372-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:52.222 [pool-372-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:159.
00:35:52.222 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #143
00:35:52.223 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.random.AbstractWell:154 which is executed by 970 tests
-593135567
00:35:52.462 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:52.638 [pool-379-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (170 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:86)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:65)
00:35:52.914 [pool-380-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:86)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:65)

java.lang.NullPointerException
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:77)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:64)
00:35:52.917 [pool-381-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:77)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:64)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:52.938 [pool-382-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (19 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:52.940 [pool-383-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:52.941 [pool-378-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): null, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): null]
00:35:52.941 [pool-378-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): expected:<true> but was:<false>]
00:35:52.941 [pool-378-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:154.
00:35:52.941 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.AssertionError: expected:<true> but was:<false>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:53.132 [pool-385-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (154 ms)
<> Total tests run: 31
<> Ignored tests: 0
<> Failed tests: 2
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[expected:<true> but was:<false>]
java.lang.AssertionError: expected:<true> but was:<false>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive(RealDistributionAbstractTest.java:367)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:86)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:65)
00:35:53.411 [pool-386-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:86)
    at org.apache.commons.math3.distribution.FDistribution.<init>(FDistribution.java:65)

java.lang.NullPointerException
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:77)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:64)
00:35:53.413 [pool-387-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:83)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:44)
    at org.apache.commons.math3.random.AbstractWell.<init>(AbstractWell.java:20)
    at org.apache.commons.math3.random.Well19937c.<init>(Well19937c.java:57)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:77)
    at org.apache.commons.math3.distribution.UniformRealDistribution.<init>(UniformRealDistribution.java:64)

java.lang.StackOverflowError
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:63)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:80)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:80)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)
00:35:53.446 [pool-388-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (32 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[null]
java.lang.StackOverflowError    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:63)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:80)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:80)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)

java.lang.StackOverflowError
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:63)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:80)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:80)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)
00:35:53.470 [pool-389-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)
[null]
java.lang.StackOverflowError    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:63)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:80)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:80)
    at org.apache.commons.math3.random.AbstractWell.setSeed(AbstractWell.java:96)

00:35:53.470 [pool-384-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): null, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): null]
00:35:53.470 [pool-384-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): null, testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest): null]
00:35:53.470 [pool-384-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.random.AbstractWell:154.
00:35:53.471 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #144
00:35:53.471 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:258 which is executed by 279 tests
68567944
00:35:53.718 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:53.904 [pool-391-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (179 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:54.218 [pool-390-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:180: error: variable ret might not have been initialized
        return ret;
               ^
00:35:54.225 [pool-390-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    public static final double LANCZOS_G = 607.0 / 128.0;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math3.util.FastMath.log((2.0 * (org.apache.commons.math3.util.FastMath.PI))));

    private static final double SQRT_TWO_PI = 2.5066282746310007;

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private static final double INV_GAMMA1P_M1_A0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_A1 = 6.247308301164655E-9;

    private static final double INV_GAMMA1P_M1_B1 = 0.203610414066807;

    private static final double INV_GAMMA1P_M1_B2 = 0.026620534842894922;

    private static final double INV_GAMMA1P_M1_B3 = 4.939449793824468E-4;

    private static final double INV_GAMMA1P_M1_B4 = -8.514194324403149E-6;

    private static final double INV_GAMMA1P_M1_B5 = -6.4304548177935305E-6;

    private static final double INV_GAMMA1P_M1_B6 = 9.926418406727737E-7;

    private static final double INV_GAMMA1P_M1_B7 = -6.077618957228252E-8;

    private static final double INV_GAMMA1P_M1_B8 = 1.9575583661463974E-10;

    private static final double INV_GAMMA1P_M1_P0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_P1 = 6.8716741130671986E-9;

    private static final double INV_GAMMA1P_M1_P2 = 6.820161668496171E-10;

    private static final double INV_GAMMA1P_M1_P3 = 4.686843322948848E-11;

    private static final double INV_GAMMA1P_M1_P4 = 1.5728330277104463E-12;

    private static final double INV_GAMMA1P_M1_P5 = -1.2494415722763663E-13;

    private static final double INV_GAMMA1P_M1_P6 = 4.343529937408594E-15;

    private static final double INV_GAMMA1P_M1_Q1 = 0.3056961078365221;

    private static final double INV_GAMMA1P_M1_Q2 = 0.054642130860422966;

    private static final double INV_GAMMA1P_M1_Q3 = 0.004956830093825887;

    private static final double INV_GAMMA1P_M1_Q4 = 2.6923694661863613E-4;

    private static final double INV_GAMMA1P_M1_C = -0.42278433509846713;

    private static final double INV_GAMMA1P_M1_C0 = 0.5772156649015329;

    private static final double INV_GAMMA1P_M1_C1 = -0.6558780715202539;

    private static final double INV_GAMMA1P_M1_C2 = -0.04200263503409524;

    private static final double INV_GAMMA1P_M1_C3 = 0.16653861138229148;

    private static final double INV_GAMMA1P_M1_C4 = -0.04219773455554433;

    private static final double INV_GAMMA1P_M1_C5 = -0.009621971527876973;

    private static final double INV_GAMMA1P_M1_C6 = 0.0072189432466631;

    private static final double INV_GAMMA1P_M1_C7 = -0.0011651675918590652;

    private static final double INV_GAMMA1P_M1_C8 = -2.1524167411495098E-4;

    private static final double INV_GAMMA1P_M1_C9 = 1.280502823881162E-4;

    private static final double INV_GAMMA1P_M1_C10 = -2.013485478078824E-5;

    private static final double INV_GAMMA1P_M1_C11 = -1.2504934821426706E-6;

    private static final double INV_GAMMA1P_M1_C12 = 1.133027231981696E-6;

    private static final double INV_GAMMA1P_M1_C13 = -2.056338416977607E-7;

    private Gamma() {
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x < 0.5) {
                return (org.apache.commons.math3.special.Gamma.logGamma1p(x)) - (org.apache.commons.math3.util.FastMath.log(x));
            }else
                if (x <= 2.5) {
                    return org.apache.commons.math3.special.Gamma.logGamma1p(((x - 0.5) - 0.5));
                }else
                    if (x <= 8.0) {
                        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor((x - 1.5))));
                        double prod = 1.0;
                        for (int i = 1; i <= n; i++) {
                            prod *= x - i;
                        }
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(91).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.S_LIMIT",org.apache.commons.math3.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS",org.apache.commons.math3.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.SQRT_TWO_PI",org.apache.commons.math3.special.Gamma.SQRT_TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS_G",org.apache.commons.math3.special.Gamma.LANCZOS_G);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("prod",prod);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.GAMMA",org.apache.commons.math3.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.C_LIMIT",org.apache.commons.math3.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            return (org.apache.commons.math3.special.Gamma.logGamma1p((x - (n + 1)))) + (org.apache.commons.math3.util.FastMath.log(prod));

                    }else {
                        double sum = org.apache.commons.math3.special.Gamma.lanczos(x);
                        double tmp = (x + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
                        ret = ((((x + 0.5) * (org.apache.commons.math3.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math3.util.FastMath.log((sum / x)));
                    }



        return ret;
    }

    public static double regularizedGammaP(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math3.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math3.exception.MaxCountExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math3.util.ContinuedFraction cf = new org.apache.commons.math3.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math3.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math3.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math3.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math3.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }

    public static double lanczos(final double x) {
        double sum = 0.0;
        for (int i = (org.apache.commons.math3.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
            sum = sum + ((org.apache.commons.math3.special.Gamma.LANCZOS[i]) / (x + i));
        }
        return sum + (org.apache.commons.math3.special.Gamma.LANCZOS[0]);
    }

    public static double invGamma1pm1(final double x) {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        final double ret;
        final double t = (x <= 0.5) ? x : (x - 0.5) - 0.5;
        if (t < 0.0) {
            final double a = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0) + (t * (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1));
            double b = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8;
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1) + (t * b);
            b = 1.0 + (t * b);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + (t * (a / b));
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C) + (t * c);
            if (x > 0.5) {
                ret = (t * c) / x;
            }else {
                ret = x * ((c + 0.5) + 0.5);
            }
        }else {
            double p = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6;
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0) + (t * p);
            double q = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4;
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1) + (t * q);
            q = 1.0 + (t * q);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + ((p / q) * t);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0) + (t * c);
            if (x > 0.5) {
                ret = (t / x) * ((c - 0.5) - 0.5);
            }else {
                ret = x * c;
            }
        }
        return ret;
    }

    public static double logGamma1p(final double x) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        return -(org.apache.commons.math3.util.FastMath.log1p(org.apache.commons.math3.special.Gamma.invGamma1pm1(x)));
    }

    public static double gamma(final double x) {
        final double ret;
        final double absX = org.apache.commons.math3.util.FastMath.abs(x);
        if (absX <= 20.0) {
            if (x >= 1.0) {
                double prod = 1.0;
                double t = x;
                while (t > 2.5) {
                    t = t - 1.0;
                    prod *= t;
                } 
                ret = prod / (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1((t - 1.0))));
            }else {
                double prod = x;
                double t = x;
                while (t < (-0.5)) {
                    t = t + 1.0;
                    prod *= t;
                } 
                ret = 1.0 / (prod * (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1(t))));
            }
        }else {
            final double y = (absX + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
            final double gammaAbs = ((((org.apache.commons.math3.special.Gamma.SQRT_TWO_PI) / x) * (org.apache.commons.math3.util.FastMath.pow(y, (absX + 0.5)))) * (org.apache.commons.math3.util.FastMath.exp((-y)))) * (org.apache.commons.math3.special.Gamma.lanczos(absX));
            if (x > 0.0) {
                ret = gammaAbs;
            }else {
                ret = (-(org.apache.commons.math3.util.FastMath.PI)) / ((x * (org.apache.commons.math3.util.FastMath.sin(((org.apache.commons.math3.util.FastMath.PI) * x)))) * gammaAbs);
            }
        }
        return ret;
    }
}
00:35:54.226 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:35:54.226 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #145
00:35:54.226 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:256 which is executed by 279 tests
68567944
00:35:54.475 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:54.621 [pool-393-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (140 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:54.968 [pool-394-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:54.970 [pool-395-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:54.971 [pool-392-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:35:54.971 [pool-392-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:35:54.971 [pool-392-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:256.
00:35:54.971 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #146
00:35:54.971 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:255 which is executed by 279 tests
68567944
00:35:55.220 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:55.370 [pool-397-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (144 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:55.715 [pool-398-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:55.717 [pool-399-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:55.718 [pool-396-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:35:55.718 [pool-396-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:35:55.718 [pool-396-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:255.
00:35:55.718 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #147
00:35:55.718 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:254 which is executed by 279 tests
68567944
00:35:55.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #148
00:35:55.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:253 which is executed by 279 tests
68567944
00:35:56.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #149
00:35:56.214 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1365 which is executed by 281 tests
1033054629
00:35:56.519 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:56.683 [pool-401-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (158 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:35:57.966 [pool-400-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:766: error: missing return statement
    }
    ^
00:35:58.824 [pool-400-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastMath {
    public static final double PI = (1.05414357E8 / 3.3554432E7) + 1.984187159361081E-9;

    public static final double E = (2850325.0 / 1048576.0) + 8.254840070411029E-8;

    static final int EXP_INT_TABLE_MAX_INDEX = 750;

    static final int EXP_INT_TABLE_LEN = (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) * 2;

    static final int LN_MANT_LEN = 1024;

    static final int EXP_FRAC_TABLE_LEN = 1025;

    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;

    private static final double LN_2_A = 0.6931470632553101;

    private static final double LN_2_B = 1.1730463525082348E-7;

    private static final double[][] LN_QUICK_COEF = new double[][]{ new double[]{ 1.0, 5.669184079525E-24 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.986821492305628E-8 }, new double[]{ -0.25, -6.663542893624021E-14 }, new double[]{ 0.19999998807907104, 1.1921056801463227E-8 }, new double[]{ -0.1666666567325592, -7.800414592973399E-9 }, new double[]{ 0.1428571343421936, 5.650007086920087E-9 }, new double[]{ -0.12502530217170715, -7.44321345601866E-11 }, new double[]{ 0.11113807559013367, 9.219544613762692E-9 } };

    private static final double[][] LN_HI_PREC_COEF = new double[][]{ new double[]{ 1.0, -6.032174644509064E-23 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.9868161777724352E-8 }, new double[]{ -0.2499999701976776, -2.957007209750105E-8 }, new double[]{ 0.19999954104423523, 1.5830993332061267E-10 }, new double[]{ -0.16624879837036133, -2.6033824355191673E-8 } };

    private static final int SINE_TABLE_LEN = 14;

    private static final double[] SINE_TABLE_A = new double[]{ +0.0, +0.1246747374534607, +0.24740394949913025, +0.366272509098053, +0.4794255495071411, +0.5850973129272461, +0.6816387176513672, +0.7675435543060303, +0.8414709568023682, +0.902267575263977, +0.9489846229553223, +0.9808930158615112, +0.9974949359893799, +0.9985313415527344 };

    private static final double[] SINE_TABLE_B = new double[]{ +0.0, -4.068233003401932E-9, +9.755392680573412E-9, +1.9987994582857286E-8, -1.0902938113007961E-8, -3.9986783938944604E-8, +4.23719669792332E-8, -5.207000323380292E-8, +2.800552834259E-8, +1.883511811213715E-8, -3.5997360512765566E-9, +4.116164446561962E-8, +5.0614674548127384E-8, -1.0129027912496858E-9 };

    private static final double[] COSINE_TABLE_A = new double[]{ +1.0, +0.9921976327896118, +0.9689123630523682, +0.9305076599121094, +0.8775825500488281, +0.8109631538391113, +0.7316888570785522, +0.6409968137741089, +0.5403022766113281, +0.4311765432357788, +0.3153223395347595, +0.19454771280288696, +0.07073719799518585, -0.05417713522911072 };

    private static final double[] COSINE_TABLE_B = new double[]{ +0.0, +3.4439717236742845E-8, +5.865827662008209E-8, -3.7999795083850525E-8, +1.184154459111628E-8, -3.43338934259355E-8, +1.1795268640216787E-8, +4.438921624363781E-8, +2.925681159240093E-8, -2.6437112632041807E-8, +2.2860509143963117E-8, -4.813899778443457E-9, +3.6725170580355583E-9, +2.0217439756338078E-10 };

    private static final double[] TANGENT_TABLE_A = new double[]{ +0.0, +0.1256551444530487, +0.25534194707870483, +0.3936265707015991, +0.5463024377822876, +0.7214844226837158, +0.9315965175628662, +1.1974215507507324, +1.5574076175689697, +2.092571258544922, +3.0095696449279785, +5.041914939880371, +14.101419448852539, -18.430862426757812 };

    private static final double[] TANGENT_TABLE_B = new double[]{ +0.0, -7.877917738262007E-9, -2.5857668567479893E-8, +5.2240336371356666E-9, +5.206150291559893E-8, +1.8307188599677033E-8, -5.7618793749770706E-8, +7.848361555046424E-8, +1.0708593250394448E-7, +1.7827257129423813E-8, +2.893485277253286E-8, +3.1660099222737955E-7, +4.983191803254889E-7, -3.356118100840571E-7 };

    private static final long[] RECIP_2PI = new long[]{ (683565275L << 32) | 2475754826L, (2131351028L << 32) | 2102212464L, (920167782L << 32) | 1326507024L, (2140428522L << 32) | 4155437400L, (1841896334L << 32) | 2425582776L, (26364858L << 32) | 2188665991L, (1065843399L << 32) | 743074255L, (3122695549L << 32) | 1269748001L, (979835913L << 32) | 2904022928L, (1315206542L << 32) | 1624559229L, (656480226L << 32) | 4018031118L, (3355321855L << 32) | 4152452611L, (4224435298L << 32) | 3598883655L, (3679297459L << 32) | 3388129901L, (3553726425L << 32) | 2811755147L, (1565126321L << 32) | 4210654302L, (3477196413L << 32) | 3801392314L, 2600392684L << 32 };

    private static final long[] PI_O_4_BITS = new long[]{ (3373259426L << 32) | 560513588L, (3301335691L << 32) | 2161908945L };

    private static final double[] EIGHTHS = new double[]{ 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625 };

    private static final double[] CBRTTWO = new double[]{ 0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994 };

    private static final long HEX_40000000 = 1073741824L;

    private static final long MASK_30BITS = (-1L) - ((org.apache.commons.math3.util.FastMath.HEX_40000000) - 1);

    private static final double TWO_POWER_52 = 4.503599627370496E15;

    private static final double F_1_3 = 1.0 / 3.0;

    private static final double F_1_5 = 1.0 / 5.0;

    private static final double F_1_7 = 1.0 / 7.0;

    private static final double F_1_9 = 1.0 / 9.0;

    private static final double F_1_11 = 1.0 / 11.0;

    private static final double F_1_13 = 1.0 / 13.0;

    private static final double F_1_15 = 1.0 / 15.0;

    private static final double F_1_17 = 1.0 / 17.0;

    private static final double F_3_4 = 3.0 / 4.0;

    private static final double F_15_16 = 15.0 / 16.0;

    private static final double F_13_14 = 13.0 / 14.0;

    private static final double F_11_12 = 11.0 / 12.0;

    private static final double F_9_10 = 9.0 / 10.0;

    private static final double F_7_8 = 7.0 / 8.0;

    private static final double F_5_6 = 5.0 / 6.0;

    private static final double F_1_2 = 1.0 / 2.0;

    private static final double F_1_4 = 1.0 / 4.0;

    private FastMath() {
    }

    private static double doubleHighPart(double d) {
        if ((d > (-(org.apache.commons.math3.util.Precision.SAFE_MIN))) && (d < (org.apache.commons.math3.util.Precision.SAFE_MIN))) {
            return d;
        }
        long xl = java.lang.Double.doubleToLongBits(d);
        xl = xl & (org.apache.commons.math3.util.FastMath.MASK_30BITS);
        return java.lang.Double.longBitsToDouble(xl);
    }

    public static double sqrt(final double a) {
        return java.lang.Math.sqrt(a);
    }

    public static double cosh(double x) {
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (org.apache.commons.math3.util.FastMath.exp((-x))) / 2.0;
        }
        double[] hiPrec = new double[2];
        if (x < 0.0) {
            x = -x;
        }
        org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
        double ya = (hiPrec[0]) + (hiPrec[1]);
        double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
        double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double yaa = (ya + temp) - temp;
        double yab = ya - yaa;
        double recip = 1.0 / ya;
        temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double recipa = (recip + temp) - temp;
        double recipb = recip - recipa;
        recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
        recipb += ((-yb) * recip) * recip;
        temp = ya + recipa;
        yb += -((temp - ya) - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -((temp - ya) - recipb);
        ya = temp;
        double result = ya + yb;
        result *= 0.5;
        return result;
    }

    public static double sinh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (-(org.apache.commons.math3.util.FastMath.exp((-x)))) / 2.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x > 0.25) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double yaa = (ya + temp) - temp;
            double yab = ya - yaa;
            double recip = 1.0 / ya;
            temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double recipa = (recip + temp) - temp;
            double recipb = recip - recipa;
            recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
            recipb += ((-yb) * recip) * recip;
            recipa = -recipa;
            recipb = -recipb;
            temp = ya + recipa;
            yb += -((temp - ya) - recipa);
            ya = temp;
            temp = ya + recipb;
            yb += -((temp - ya) - recipb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1(x, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            double temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double za = (denom + temp) - temp;
            double zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            temp = ya + ra;
            yb += -((temp - ya) - ra);
            ya = temp;
            temp = ya + rb;
            yb += -((temp - ya) - rb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double tanh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return 1.0;
        }
        if (x < (-20)) {
            return -1.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x >= 0.5) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp((x * 2.0), 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = (-1.0) + ya;
            double nb = -((na + 1.0) - ya);
            double temp = na + yb;
            nb += -((temp - na) - yb);
            na = temp;
            double da = 1.0 + ya;
            double db = -((da - 1.0) - ya);
            temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1((x * 2.0), hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = ya;
            double nb = yb;
            double da = 2.0 + ya;
            double db = -((da - 2.0) - ya);
            double temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double acosh(final double a) {
        return org.apache.commons.math3.util.FastMath.log((a + (org.apache.commons.math3.util.FastMath.sqrt(((a * a) - 1)))));
    }

    public static double asinh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAsinh;
        if (a > 0.167) {
            absAsinh = org.apache.commons.math3.util.FastMath.log(((org.apache.commons.math3.util.FastMath.sqrt(((a * a) + 1))) + a));
        }else {
            final double a2 = a * a;
            if (a > 0.097) {
                absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_17)) * (org.apache.commons.math3.util.FastMath.F_15_16)))) * (org.apache.commons.math3.util.FastMath.F_13_14)))) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
            }else
                if (a > 0.036) {
                    absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13)) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                }else
                    if (a > 0.0036) {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9)) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }else {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5)) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }


        }
        return negative ? -absAsinh : absAsinh;
    }

    public static double atanh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAtanh;
        if (a > 0.15) {
            absAtanh = 0.5 * (org.apache.commons.math3.util.FastMath.log(((1 + a) / (1 - a))));
        }else {
            final double a2 = a * a;
            if (a > 0.087) {
                absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_17)))))))))))))))));
            }else
                if (a > 0.031) {
                    absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13)))))))))))));
                }else
                    if (a > 0.003) {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9)))))))));
                    }else {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5)))));
                    }


        }
        return negative ? -absAtanh : absAtanh;
    }

    public static double signum(final double a) {
        return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a;
    }

    public static float signum(final float a) {
        return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a;
    }

    public static double nextUp(final double a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY);
    }

    public static float nextUp(final float a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY);
    }

    public static double random() {
        return java.lang.Math.random();
    }

    public static double exp(double x) {
        return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null);
    }

    private static double exp(double x, double extra, double[] hiPrec) {
        double intPartA;
        double intPartB;
        int intVal;
        if (x < 0.0) {
            intVal = ((int) (-x));
            if (intVal > 746) {
                if (hiPrec != null) {
                    hiPrec[0] = 0.0;
                    hiPrec[1] = 0.0;
                }
                return 0.0;
            }
            if (intVal > 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 40.19140625), extra, hiPrec)) / 2.85040095144011776E17;
                if (hiPrec != null) {
                    hiPrec[0] /= 2.85040095144011776E17;
                    hiPrec[1] /= 2.85040095144011776E17;
                }
                return result;
            }
            if (intVal == 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 1.494140625), extra, hiPrec)) / 4.455505956692757;
                if (hiPrec != null) {
                    hiPrec[0] /= 4.455505956692757;
                    hiPrec[1] /= 4.455505956692757;
                }
                return result;
            }
            intVal++;
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intVal = -intVal;
        }else {
            intVal = ((int) (x));
            if (intVal > 709) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
                    hiPrec[1] = 0.0;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
        }
        final int intFrac = ((int) ((x - intVal) * 1024.0));
        final double fracPartA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
        final double fracPartB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
        final double epsilon = x - (intVal + (intFrac / 1024.0));
        double z = 0.04168701738764507;
        z = (z * epsilon) + 0.1666666505023083;
        z = (z * epsilon) + 0.5000000000042687;
        z = (z * epsilon) + 1.0;
        z = (z * epsilon) + (-3.940510424527919E-20);
        double tempA = intPartA * fracPartA;
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
        final double tempC = tempB + tempA;
        final double result;
        if (extra != 0.0) {
            result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
        }else {
            result = ((tempC * z) + tempB) + tempA;
        }
        if (hiPrec != null) {
            hiPrec[0] = tempA;
            hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
        }
        return result;
    }

    public static double expm1(double x) {
        return org.apache.commons.math3.util.FastMath.expm1(x, null);
    }

    private static double expm1(double x, double[] hiPrecOut) {
        if ((x != x) || (x == 0.0)) {
            return x;
        }
        if ((x <= (-1.0)) || (x >= 1.0)) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            if (x > 0.0) {
                return ((-1.0) + (hiPrec[0])) + (hiPrec[1]);
            }else {
                final double ra = (-1.0) + (hiPrec[0]);
                double rb = -((ra + 1.0) - (hiPrec[0]));
                rb += hiPrec[1];
                return ra + rb;
            }
        }
        double baseA;
        double baseB;
        double epsilon;
        boolean negative = false;
        if (x < 0.0) {
            x = -x;
            negative = true;
        }
        {
            int intFrac = ((int) (x * 1024.0));
            double tempA = (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]) - 1.0;
            double tempB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
            double temp = tempA + tempB;
            tempB = -((temp - tempA) - tempB);
            tempA = temp;
            temp = tempA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            baseA = (tempA + temp) - temp;
            baseB = tempB + (tempA - baseA);
            epsilon = x - (intFrac / 1024.0);
        }
        double zb = 0.008336750013465571;
        zb = (zb * epsilon) + 0.041666663879186654;
        zb = (zb * epsilon) + 0.16666666666745392;
        zb = (zb * epsilon) + 0.49999999999999994;
        zb = zb * epsilon;
        zb = zb * epsilon;
        double za = epsilon;
        double temp = za + zb;
        zb = -((temp - za) - zb);
        za = temp;
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        temp = (za + temp) - temp;
        zb += za - temp;
        za = temp;
        double ya = za * baseA;
        temp = ya + (za * baseB);
        double yb = -((temp - ya) - (za * baseB));
        ya = temp;
        temp = ya + (zb * baseA);
        yb += -((temp - ya) - (zb * baseA));
        ya = temp;
        temp = ya + (zb * baseB);
        yb += -((temp - ya) - (zb * baseB));
        ya = temp;
        temp = ya + baseA;
        yb += -((temp - baseA) - ya);
        ya = temp;
        temp = ya + za;
        yb += -((temp - ya) - za);
        ya = temp;
        temp = ya + baseB;
        yb += -((temp - ya) - baseB);
        ya = temp;
        temp = ya + zb;
        yb += -((temp - ya) - zb);
        ya = temp;
        if (negative) {
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            za = (denom + temp) - temp;
            zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            ya = -ra;
            yb = -rb;
        }
        if (hiPrecOut != null) {
            hiPrecOut[0] = ya;
            hiPrecOut[1] = yb;
        }
        return ya + yb;
    }

    public static double log(final double x) {
        return org.apache.commons.math3.util.FastMath.log(x, null);
    }

    private static double log(final double x, final double[] hiPrec) {
        if (x == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        long bits = java.lang.Double.doubleToLongBits(x);
        if (((bits & -9223372036854775808L) != 0) || (x != x)) {
            if (x != 0.0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NaN;
                }
                return java.lang.Double.NaN;
            }
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (hiPrec != null) {
                hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
            }
            return java.lang.Double.POSITIVE_INFINITY;
        }
        int exp = ((int) (bits >> 52)) - 1023;
        if ((bits & 9218868437227405312L) == 0) {
            if (x == 0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.NEGATIVE_INFINITY;
            }
            bits <<= 1;
            while ((bits & 4503599627370496L) == 0) {
                --exp;
                bits <<= 1;
            } 
        }
        if ((exp == (-1)) || (exp == 0)) {
            if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {
                double xa = x - 1.0;
                double xb = (xa - x) + 1.0;
                double tmp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                double aa = (xa + tmp) - tmp;
                double ab = xa - aa;
                xa = aa;
                xb = ab;
                final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[((org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 1)];
                double ya = lnCoef_last[0];
                double yb = lnCoef_last[1];
                for (int i = (org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 2; i >= 0; i--) {
                    aa = ya * xa;
                    ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                    final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i];
                    aa = ya + (lnCoef_i[0]);
                    ab = yb + (lnCoef_i[1]);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                }
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                return ya + yb;
            }
        }
        final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 4499201580859392L) >> 42))];
        final double epsilon = (bits & 4398046511103L) / ((org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L));
        double lnza = 0.0;
        double lnzb = 0.0;
        if (hiPrec != null) {
            double tmp = epsilon * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double aa = (epsilon + tmp) - tmp;
            double ab = epsilon - aa;
            double xa = aa;
            double xb = ab;
            final double numer = bits & 4398046511103L;
            final double denom = (org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L);
            aa = (numer - (xa * denom)) - (xb * denom);
            xb += aa / denom;
            final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[((org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 1)];
            double ya = lnCoef_last[0];
            double yb = lnCoef_last[1];
            for (int i = (org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 2; i >= 0; i--) {
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i];
                aa = ya + (lnCoef_i[0]);
                ab = yb + (lnCoef_i[1]);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
            }
            aa = ya * xa;
            ab = ((ya * xb) + (yb * xa)) + (yb * xb);
            lnza = aa + ab;
            lnzb = -((lnza - aa) - ab);
        }else {
            lnza = -0.16624882440418567;
            lnza = (lnza * epsilon) + 0.19999954120254515;
            lnza = (lnza * epsilon) + (-0.2499999997677497);
            lnza = (lnza * epsilon) + 0.3333333333332802;
            lnza = (lnza * epsilon) + (-0.5);
            lnza = (lnza * epsilon) + 1.0;
            lnza = lnza * epsilon;
        }
        double a = (org.apache.commons.math3.util.FastMath.LN_2_A) * exp;
        double b = 0.0;
        double c = a + (lnm[0]);
        double d = -((c - a) - (lnm[0]));
        a = c;
        b = b + d;
        c = a + lnza;
        d = -((c - a) - lnza);
        a = c;
        b = b + d;
        c = a + ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp);
        d = -((c - a) - ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp));
        a = c;
        b = b + d;
        c = a + (lnm[1]);
        d = -((c - a) - (lnm[1]));
        a = c;
        b = b + d;
        c = a + lnzb;
        d = -((c - a) - lnzb);
        a = c;
        b = b + d;
        if (hiPrec != null) {
            hiPrec[0] = a;
            hiPrec[1] = b;
        }
        return a + b;
    }

    public static double log1p(final double x) {
        if (x == (-1)) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((x > 1.0E-6) || (x < (-1.0E-6))) {
            final double xpa = 1 + x;
            final double xpb = -((xpa - 1) - x);
            final double[] hiPrec = new double[2];
            final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
            if (java.lang.Double.isInfinite(lores)) {
                return lores;
            }
            final double fx1 = xpb / xpa;
            final double epsilon = (0.5 * fx1) + 1;
            return ((epsilon * fx1) + (hiPrec[1])) + (hiPrec[0]);
        }else {
            final double y = (((x * (org.apache.commons.math3.util.FastMath.F_1_3)) - (org.apache.commons.math3.util.FastMath.F_1_2)) * x) + 1;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(94).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_1_13",org.apache.commons.math3.util.FastMath.F_1_13);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_1_11",org.apache.commons.math3.util.FastMath.F_1_11);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_1_17",org.apache.commons.math3.util.FastMath.F_1_17);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_11_12",org.apache.commons.math3.util.FastMath.F_11_12);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_13_14",org.apache.commons.math3.util.FastMath.F_13_14);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_1_15",org.apache.commons.math3.util.FastMath.F_1_15);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_1_2",org.apache.commons.math3.util.FastMath.F_1_2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_15_16",org.apache.commons.math3.util.FastMath.F_15_16);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.EIGHTHS",org.apache.commons.math3.util.FastMath.EIGHTHS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_1_3",org.apache.commons.math3.util.FastMath.F_1_3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.LN_2_A",org.apache.commons.math3.util.FastMath.LN_2_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_1_4",org.apache.commons.math3.util.FastMath.F_1_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.LN_2_B",org.apache.commons.math3.util.FastMath.LN_2_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_1_5",org.apache.commons.math3.util.FastMath.F_1_5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_3_4",org.apache.commons.math3.util.FastMath.F_3_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.PI_O_4_BITS",org.apache.commons.math3.util.FastMath.PI_O_4_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_1_7",org.apache.commons.math3.util.FastMath.F_1_7);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.RECIP_2PI",org.apache.commons.math3.util.FastMath.RECIP_2PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.HEX_40000000",org.apache.commons.math3.util.FastMath.HEX_40000000);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_1_9",org.apache.commons.math3.util.FastMath.F_1_9);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_5_6",org.apache.commons.math3.util.FastMath.F_5_6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.LN_MANT_LEN",org.apache.commons.math3.util.FastMath.LN_MANT_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_7_8",org.apache.commons.math3.util.FastMath.F_7_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.MASK_30BITS",org.apache.commons.math3.util.FastMath.MASK_30BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.TWO_POWER_52",org.apache.commons.math3.util.FastMath.TWO_POWER_52);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.PI",org.apache.commons.math3.util.FastMath.PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_A",org.apache.commons.math3.util.FastMath.SINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.E",org.apache.commons.math3.util.FastMath.E);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_B",org.apache.commons.math3.util.FastMath.SINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",org.apache.commons.math3.util.FastMath.LN_QUICK_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("y",y);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.CBRTTWO",org.apache.commons.math3.util.FastMath.CBRTTWO);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.F_9_10",org.apache.commons.math3.util.FastMath.F_9_10);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(94).collectionEnds();
            }
            if (runtimeAngelicValue)
                return y * x;

        }
    }

    public static double log10(final double x) {
        final double[] hiPrec = new double[2];
        final double lores = org.apache.commons.math3.util.FastMath.log(x, hiPrec);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        final double tmp = (hiPrec[0]) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double lna = ((hiPrec[0]) + tmp) - tmp;
        final double lnb = ((hiPrec[0]) - lna) + (hiPrec[1]);
        final double rln10a = 0.4342944622039795;
        final double rln10b = 1.9699272335463627E-8;
        return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna);
    }

    public static double log(double base, double x) {
        return (org.apache.commons.math3.util.FastMath.log(x)) / (org.apache.commons.math3.util.FastMath.log(base));
    }

    public static double pow(double x, double y) {
        final double[] lns = new double[2];
        if (y == 0.0) {
            return 1.0;
        }
        if (x != x) {
            return x;
        }
        if (x == 0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if ((bits & -9223372036854775808L) != 0) {
                long yi = ((long) (y));
                if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return -0.0;
                }
            }
            if (y < 0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }
            if (y > 0) {
                return 0.0;
            }
            return java.lang.Double.NaN;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0.0) {
                return 0.0;
            }else {
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) > 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return -0.0;
                }
                return 0.0;
            }
            if (y > 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) < 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x < 0) {
            if ((y >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (y <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
                return org.apache.commons.math3.util.FastMath.pow((-x), y);
            }
            if (y == ((long) (y))) {
                return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow((-x), y) : -(org.apache.commons.math3.util.FastMath.pow((-x), y));
            }else {
                return java.lang.Double.NaN;
            }
        }
        double ya;
        double yb;
        if ((y < 8.0E298) && (y > (-8.0E298))) {
            double tmp1 = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            ya = (y + tmp1) - tmp1;
            yb = y - ya;
        }else {
            double tmp1 = y * 9.313225746154785E-10;
            double tmp2 = tmp1 * 9.313225746154785E-10;
            ya = (((tmp1 + tmp2) - tmp1) * (org.apache.commons.math3.util.FastMath.HEX_40000000)) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            yb = y - ya;
        }
        final double lores = org.apache.commons.math3.util.FastMath.log(x, lns);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        double lna = lns[0];
        double lnb = lns[1];
        double tmp1 = lna * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double tmp2 = (lna + tmp1) - tmp1;
        lnb += lna - tmp2;
        lna = tmp2;
        final double aa = lna * ya;
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
        lna = aa + ab;
        lnb = -((lna - aa) - ab);
        double z = 1.0 / 120.0;
        z = (z * lnb) + (1.0 / 24.0);
        z = (z * lnb) + (1.0 / 6.0);
        z = (z * lnb) + 0.5;
        z = (z * lnb) + 1.0;
        z = z * lnb;
        final double result = org.apache.commons.math3.util.FastMath.exp(lna, z, null);
        return result;
    }

    public static double pow(double d, int e) {
        if (e == 0) {
            return 1.0;
        }else
            if (e < 0) {
                e = -e;
                d = 1.0 / d;
            }

        final int splitFactor = 134217729;
        final double cd = splitFactor * d;
        final double d1High = cd - (cd - d);
        final double d1Low = d - d1High;
        double resultHigh = 1;
        double resultLow = 0;
        double d2p = d;
        double d2pHigh = d1High;
        double d2pLow = d1Low;
        while (e != 0) {
            if ((e & 1) != 0) {
                final double tmpHigh = resultHigh * d2p;
                final double cRH = splitFactor * resultHigh;
                final double rHH = cRH - (cRH - resultHigh);
                final double rHL = resultHigh - rHH;
                final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
                resultHigh = tmpHigh;
                resultLow = (resultLow * d2p) + tmpLow;
            }
            final double tmpHigh = d2pHigh * d2p;
            final double cD2pH = splitFactor * d2pHigh;
            final double d2pHH = cD2pH - (cD2pH - d2pHigh);
            final double d2pHL = d2pHigh - d2pHH;
            final double tmpLow = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow));
            final double cTmpH = splitFactor * tmpHigh;
            d2pHigh = cTmpH - (cTmpH - tmpHigh);
            d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh);
            d2p = d2pHigh + d2pLow;
            e = e >> 1;
        } 
        return resultHigh + resultLow;
    }

    private static double polySine(final double x) {
        double x2 = x * x;
        double p = 2.7553817452272217E-6;
        p = (p * x2) + (-1.9841269659586505E-4);
        p = (p * x2) + 0.008333333333329196;
        p = (p * x2) + (-0.16666666666666666);
        p = (p * x2) * x;
        return p;
    }

    private static double polyCosine(double x) {
        double x2 = x * x;
        double p = 2.479773539153719E-5;
        p = (p * x2) + (-0.0013888888689039883);
        p = (p * x2) + 0.041666666666621166;
        p = (p * x2) + (-0.49999999999999994);
        p *= x2;
        return p;
    }

    private static double sinQ(double xa, double xb) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        final double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double result;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        if (xb != 0.0) {
            t = (((costA + costB) * (cosEpsA + cosEpsB)) - ((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
            c = a + t;
            d = -((c - a) - t);
            a = c;
            b = b + d;
        }
        result = a + b;
        return result;
    }

    private static double cosQ(double xa, double xb) {
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -((a - pi2a) + xa);
        b += pi2b - xb;
        return org.apache.commons.math3.util.FastMath.sinQ(a, b);
    }

    private static double tanQ(double xa, double xb, boolean cotanFlag) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        double sina = a + b;
        double sinb = -((sina - a) - b);
        a = b = c = d = 0.0;
        t = costA * cosEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        t = (-sintA) * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB);
        b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB));
        double cosa = a + b;
        double cosb = -((cosa - a) - b);
        if (cotanFlag) {
            double tmp;
            tmp = cosa;
            cosa = sina;
            sina = tmp;
            tmp = cosb;
            cosb = sinb;
            sinb = tmp;
        }
        double est = sina / cosa;
        temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double esta = (est + temp) - temp;
        double estb = est - esta;
        temp = cosa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double cosaa = (cosa + temp) - temp;
        double cosab = cosa - cosaa;
        double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa;
        err += sinb / cosa;
        err += (((-sina) * cosb) / cosa) / cosa;
        if (xb != 0.0) {
            double xbadj = xb + ((est * est) * xb);
            if (cotanFlag) {
                xbadj = -xbadj;
            }
            err += xbadj;
        }
        return est + err;
    }

    private static void reducePayneHanek(double x, double[] result) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        inbits &= 4503599627370495L;
        inbits |= 4503599627370496L;
        exponent++;
        inbits <<= 11;
        long shpi0;
        long shpiA;
        long shpiB;
        int idx = exponent >> 6;
        int shift = exponent - (idx << 6);
        if (shift != 0) {
            shpi0 = (idx == 0) ? 0 : (org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)]) << shift;
            shpi0 |= (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) >>> (64 - shift);
            shpiA = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) >>> (64 - shift));
            shpiB = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 2)]) >>> (64 - shift));
        }else {
            shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)];
            shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx];
            shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)];
        }
        long a = inbits >>> 32;
        long b = inbits & 4294967295L;
        long c = shpiA >>> 32;
        long d = shpiA & 4294967295L;
        long ac = a * c;
        long bd = b * d;
        long bc = b * c;
        long ad = a * d;
        long prodB = bd + (ad << 32);
        long prodA = ac + (ad >>> 32);
        boolean bita = (bd & -9223372036854775808L) != 0;
        boolean bitb = (ad & 2147483648L) != 0;
        boolean bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prodB = prodB + (bc << 32);
        prodA = prodA + (bc >>> 32);
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpiB >>> 32;
        d = shpiB & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prodB += ac;
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpi0 >>> 32;
        d = shpi0 & 4294967295L;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        prodA += bd + ((bc + ad) << 32);
        int intPart = ((int) (prodA >>> 62));
        prodA <<= 2;
        prodA |= prodB >>> 62;
        prodB <<= 2;
        a = prodA >>> 32;
        b = prodA & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        long prod2B = bd + (ad << 32);
        long prod2A = ac + (ad >>> 32);
        bita = (bd & -9223372036854775808L) != 0;
        bitb = (ad & 2147483648L) != 0;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prod2B = prod2B + (bc << 32);
        prod2A = prod2A + (bc >>> 32);
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        a = prodB >>> 32;
        b = prodB & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        double tmpA = (prod2A >>> 12) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double tmpB = ((((prod2A & 4095L) << 40) + (prod2B >>> 24)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double sumA = tmpA + tmpB;
        double sumB = -((sumA - tmpA) - tmpB);
        result[0] = intPart;
        result[1] = sumA * 2.0;
        result[2] = sumB * 2.0;
    }

    public static double sin(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa;
        double xb = 0.0;
        xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (negative) {
            quadrant ^= 2;
        }
        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            case 1 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 3 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double cos(double x) {
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            xa = -xa;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 1 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            case 3 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double tan(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (xa > 1.5) {
            final double pi2a = 1.5707963267948966;
            final double pi2b = 6.123233995736766E-17;
            final double a = pi2a - xa;
            double b = -((a - pi2a) + xa);
            b += pi2b - xb;
            xa = a + b;
            xb = -((xa - a) - b);
            quadrant ^= 1;
            negative ^= true;
        }
        double result;
        if ((quadrant & 1) == 0) {
            result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false);
        }else {
            result = -(org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true));
        }
        if (negative) {
            result = -result;
        }
        return result;
    }

    public static double atan(double x) {
        return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false);
    }

    private static double atan(double xa, double xb, boolean leftPlane) {
        boolean negate = false;
        int idx;
        if (xa == 0.0) {
            return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
        }
        if (xa < 0) {
            xa = -xa;
            xb = -xb;
            negate = true;
        }
        if (xa > 1.633123935319537E16) {
            return negate ^ leftPlane ? (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2) : (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (xa < 1) {
            idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
        }else {
            final double oneOverXa = 1 / xa;
            idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
        }
        double epsA = xa - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
        double epsB = -((epsA - xa) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]));
        epsB += xb - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
        double temp = epsA + epsB;
        epsB = -((temp - epsA) - epsB);
        epsA = temp;
        temp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (xa + temp) - temp;
        double yb = (xb + xa) - ya;
        xa = ya;
        xb += yb;
        if (idx == 0) {
            final double denom = 1.0 / (1.0 + ((xa + xb) * ((org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]))));
            ya = epsA * denom;
            yb = epsB * denom;
        }else {
            double temp2 = xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
            double za = 1.0 + temp2;
            double zb = -((za - 1.0) - temp2);
            temp2 = (xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])) + (xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]));
            temp = za + temp2;
            zb += -((temp - za) - temp2);
            za = temp;
            zb += xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
            ya = epsA / za;
            temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double yaa = (ya + temp) - temp;
            final double yab = ya - yaa;
            temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double zaa = (za + temp) - temp;
            final double zab = za - zaa;
            yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;
            yb += (((-epsA) * zb) / za) / za;
            yb += epsB / za;
        }
        epsA = ya;
        epsB = yb;
        final double epsA2 = epsA * epsA;
        yb = 0.07490822288864472;
        yb = (yb * epsA2) + (-0.09088450866185192);
        yb = (yb * epsA2) + 0.11111095942313305;
        yb = (yb * epsA2) + (-0.1428571423679182);
        yb = (yb * epsA2) + 0.19999999999923582;
        yb = (yb * epsA2) + (-0.33333333333333287);
        yb = (yb * epsA2) * epsA;
        ya = epsA;
        temp = ya + yb;
        yb = -((temp - ya) - yb);
        ya = temp;
        yb += epsB / (1.0 + (epsA * epsA));
        double za = (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) + ya;
        double zb = -((za - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx])) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double result = za + zb;
        double resultb = -((result - za) - zb);
        if (leftPlane) {
            final double pia = 1.5707963267948966 * 2;
            final double pib = 6.123233995736766E-17 * 2;
            za = pia - result;
            zb = -((za - pia) + result);
            zb += pib - resultb;
            result = za + zb;
            resultb = -((result - za) - zb);
        }
        if (negate ^ leftPlane) {
            result = -result;
        }
        return result;
    }

    public static double atan2(double y, double x) {
        if ((x != x) || (y != y)) {
            return java.lang.Double.NaN;
        }
        if (y == 0) {
            final double result = x * y;
            final double invx = 1.0 / x;
            final double invy = 1.0 / y;
            if (invx == 0) {
                if (x > 0) {
                    return y;
                }else {
                    return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
                }
            }
            if ((x < 0) || (invx < 0)) {
                if ((y < 0) || (invy < 0)) {
                    return -(java.lang.Math.PI);
                }else {
                    return java.lang.Math.PI;
                }
            }else {
                return result;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((y > 0) || ((1 / y) > 0)) {
                return 0.0;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((y > 0.0) || ((1 / y) > 0.0)) {
                return java.lang.Math.PI;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -(java.lang.Math.PI);
            }
        }
        if (x == 0) {
            if ((y > 0) || ((1 / y) > 0)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
        }
        final double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return org.apache.commons.math3.util.FastMath.atan(r, 0, (x < 0));
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        final double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        final double xb = x - xa;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        final double temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        if (ra == 0) {
            ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y);
        }
        final double result = org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
        return result;
    }

    public static double asin(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == 1.0) {
            return (java.lang.Math.PI) / 2.0;
        }
        if (x == (-1.0)) {
            return (-(java.lang.Math.PI)) / 2.0;
        }
        if (x == 0.0) {
            return x;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y;
        y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        double dx = zb / (2.0 * y);
        double r = x / y;
        temp = r * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ra = (r + temp) - temp;
        double rb = r - ra;
        rb += ((((x - (ra * ya)) - (ra * yb)) - (rb * ya)) - (rb * yb)) / y;
        rb += (((-x) * dx) / y) / y;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, false);
    }

    public static double acos(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == (-1.0)) {
            return java.lang.Math.PI;
        }
        if (x == 1.0) {
            return 0.0;
        }
        if (x == 0) {
            return (java.lang.Math.PI) / 2.0;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        yb += zb / (2.0 * y);
        y = ya + yb;
        yb = -((y - ya) - yb);
        double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return (java.lang.Math.PI) / 2;
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        rb += yb / x;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
    }

    public static double cbrt(double x) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        boolean subnormal = false;
        if (exponent == (-1023)) {
            if (x == 0) {
                return x;
            }
            subnormal = true;
            x *= 1.8014398509481984E16;
            inbits = java.lang.Double.doubleToLongBits(x);
            exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        }
        if (exponent == 1024) {
            return x;
        }
        int exp3 = exponent / 3;
        double p2 = java.lang.Double.longBitsToDouble(((inbits & -9223372036854775808L) | (((long) ((exp3 + 1023) & 2047)) << 52)));
        final double mant = java.lang.Double.longBitsToDouble(((inbits & 4503599627370495L) | 4607182418800017408L));
        double est = -0.010714690733195933;
        est = (est * mant) + 0.0875862700108075;
        est = (est * mant) + (-0.3058015757857271);
        est = (est * mant) + 0.7249995199969751;
        est = (est * mant) + 0.5039018405998233;
        est *= org.apache.commons.math3.util.FastMath.CBRTTWO[((exponent % 3) + 2)];
        final double xs = x / ((p2 * p2) * p2);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        double temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (est + temp) - temp;
        double yb = est - ya;
        double za = ya * ya;
        double zb = ((ya * yb) * 2.0) + (yb * yb);
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (za + temp) - temp;
        zb += za - temp2;
        za = temp2;
        zb = ((za * yb) + (ya * zb)) + (zb * yb);
        za = za * ya;
        double na = xs - za;
        double nb = -((na - xs) + za);
        nb -= zb;
        est += (na + nb) / ((3 * est) * est);
        est *= p2;
        if (subnormal) {
            est *= 3.814697265625E-6;
        }
        return est;
    }

    public static double toRadians(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 0.01745329052209854;
        final double factb = 1.997844754509471E-9;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
        if (result == 0) {
            result = result * x;
        }
        return result;
    }

    public static double toDegrees(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 57.2957763671875;
        final double factb = 3.145894820876798E-6;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
    }

    public static int abs(final int x) {
        return x < 0 ? -x : x;
    }

    public static long abs(final long x) {
        return x < 0L ? -x : x;
    }

    public static float abs(final float x) {
        return x < 0.0F ? -x : x == 0.0F ? 0.0F : x;
    }

    public static double abs(double x) {
        return x < 0.0 ? -x : x == 0.0 ? 0.0 : x;
    }

    public static double ulp(double x) {
        if (java.lang.Double.isInfinite(x)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Double.longBitsToDouble(((java.lang.Double.doubleToLongBits(x)) ^ 1)))));
    }

    public static float ulp(float x) {
        if (java.lang.Float.isInfinite(x)) {
            return java.lang.Float.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Float.intBitsToFloat(((java.lang.Float.floatToIntBits(x)) ^ 1)))));
    }

    public static double scalb(final double d, final int n) {
        if ((n > (-1023)) && (n < 1024)) {
            return d * (java.lang.Double.longBitsToDouble((((long) (n + 1023)) << 52)));
        }
        if (((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) || (d == 0)) {
            return d;
        }
        if (n < (-2098)) {
            return d > 0 ? 0.0 : -0.0;
        }
        if (n > 2097) {
            return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        int exponent = ((int) (bits >>> 52)) & 2047;
        long mantissa = bits & 4503599627370495L;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
            }else
                if (scaledExponent > (-53)) {
                    mantissa = mantissa | (1L << 52);
                    final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Double.longBitsToDouble((sign | mantissa));
                }else {
                    return sign == 0L ? 0.0 : -0.0;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 52) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 4503599627370495L;
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }

        }
    }

    public static float scalb(final float f, final int n) {
        if ((n > (-127)) && (n < 128)) {
            return f * (java.lang.Float.intBitsToFloat(((n + 127) << 23)));
        }
        if (((java.lang.Float.isNaN(f)) || (java.lang.Float.isInfinite(f))) || (f == 0.0F)) {
            return f;
        }
        if (n < (-277)) {
            return f > 0 ? 0.0F : -0.0F;
        }
        if (n > 276) {
            return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
        }
        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        int exponent = (bits >>> 23) & 255;
        int mantissa = bits & 8388607;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
            }else
                if (scaledExponent > (-24)) {
                    mantissa = mantissa | (1 << 23);
                    final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Float.intBitsToFloat((sign | mantissa));
                }else {
                    return sign == 0 ? 0.0F : -0.0F;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 23) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 8388607;
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }

        }
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Double.NaN;
        }else
            if (d == direction) {
                return direction;
            }else
                if (java.lang.Double.isInfinite(d)) {
                    return d < 0 ? -(java.lang.Double.MAX_VALUE) : java.lang.Double.MAX_VALUE;
                }else
                    if (d == 0) {
                        return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
                    }



        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        if ((direction < d) ^ (sign == 0L)) {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) + 1)));
        }else {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) - 1)));
        }
    }

    public static float nextAfter(final float f, final double direction) {
        if ((java.lang.Double.isNaN(f)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Float.NaN;
        }else
            if (f == direction) {
                return ((float) (direction));
            }else
                if (java.lang.Float.isInfinite(f)) {
                    return f < 0.0F ? -(java.lang.Float.MAX_VALUE) : java.lang.Float.MAX_VALUE;
                }else
                    if (f == 0.0F) {
                        return direction < 0 ? -(java.lang.Float.MIN_VALUE) : java.lang.Float.MIN_VALUE;
                    }



        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        if ((direction < f) ^ (sign == 0)) {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) + 1)));
        }else {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) - 1)));
        }
    }

    public static double floor(double x) {
        long y;
        if (x != x) {
            return x;
        }
        if ((x >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
            return x;
        }
        y = ((long) (x));
        if ((x < 0) && (y != x)) {
            y--;
        }
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double ceil(double x) {
        double y;
        if (x != x) {
            return x;
        }
        y = org.apache.commons.math3.util.FastMath.floor(x);
        if (y == x) {
            return y;
        }
        y += 1.0;
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double rint(double x) {
        double y = org.apache.commons.math3.util.FastMath.floor(x);
        double d = x - y;
        if (d > 0.5) {
            if (y == (-1.0)) {
                return -0.0;
            }
            return y + 1.0;
        }
        if (d < 0.5) {
            return y;
        }
        long z = ((long) (y));
        return (z & 1) == 0 ? y : y + 1.0;
    }

    public static long round(double x) {
        return ((long) (org.apache.commons.math3.util.FastMath.floor((x + 0.5))));
    }

    public static int round(final float x) {
        return ((int) (org.apache.commons.math3.util.FastMath.floor((x + 0.5F))));
    }

    public static int min(final int a, final int b) {
        return a <= b ? a : b;
    }

    public static long min(final long a, final long b) {
        return a <= b ? a : b;
    }

    public static float min(final float a, final float b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return a;
        }
        return b;
    }

    public static double min(final double a, final double b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return a;
        }
        return b;
    }

    public static int max(final int a, final int b) {
        return a <= b ? b : a;
    }

    public static long max(final long a, final long b) {
        return a <= b ? b : a;
    }

    public static float max(final float a, final float b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return b;
        }
        return a;
    }

    public static double max(final double a, final double b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return b;
        }
        return a;
    }

    public static double hypot(final double x, final double y) {
        if ((java.lang.Double.isInfinite(x)) || (java.lang.Double.isInfinite(y))) {
            return java.lang.Double.POSITIVE_INFINITY;
        }else
            if ((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(y))) {
                return java.lang.Double.NaN;
            }else {
                final int expX = org.apache.commons.math3.util.FastMath.getExponent(x);
                final int expY = org.apache.commons.math3.util.FastMath.getExponent(y);
                if (expX > (expY + 27)) {
                    return org.apache.commons.math3.util.FastMath.abs(x);
                }else
                    if (expY > (expX + 27)) {
                        return org.apache.commons.math3.util.FastMath.abs(y);
                    }else {
                        final int middleExp = (expX + expY) / 2;
                        final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, (-middleExp));
                        final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, (-middleExp));
                        final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(((scaledX * scaledX) + (scaledY * scaledY)));
                        return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp);
                    }

            }

    }

    public static double IEEEremainder(double dividend, double divisor) {
        return java.lang.StrictMath.IEEEremainder(dividend, divisor);
    }

    public static double copySign(double magnitude, double sign) {
        long m = java.lang.Double.doubleToLongBits(magnitude);
        long s = java.lang.Double.doubleToLongBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static float copySign(float magnitude, float sign) {
        int m = java.lang.Float.floatToIntBits(magnitude);
        int s = java.lang.Float.floatToIntBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static int getExponent(final double d) {
        return ((int) (((java.lang.Double.doubleToLongBits(d)) >>> 52) & 2047)) - 1023;
    }

    public static int getExponent(final float f) {
        return (((java.lang.Float.floatToIntBits(f)) >>> 23) & 255) - 127;
    }

    public static void main(java.lang.String[] a) {
        java.io.PrintStream out = java.lang.System.out;
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "LN_MANT", org.apache.commons.math3.util.FastMath.LN_MANT_LEN, org.apache.commons.math3.util.FastMath.lnMant.LN_MANT);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);
    }

    private static class ExpIntTable {
        private static final double[] EXP_INT_TABLE_A;

        private static final double[] EXP_INT_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                final double[] tmp = new double[2];
                final double[] recip = new double[2];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX); i++) {
                    org.apache.commons.math3.util.FastMathCalc.expint(i, tmp);
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[1];
                    if (i != 0) {
                        org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[0];
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[1];
                    }
                }
            }else {
                EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA();
                EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB();
            }
        }
    }

    private static class ExpFracTable {
        private static final double[] EXP_FRAC_TABLE_A;

        private static final double[] EXP_FRAC_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                final double[] tmp = new double[2];
                final double factor = 1.0 / ((org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN) - 1);
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length); i++) {
                    org.apache.commons.math3.util.FastMathCalc.slowexp((i * factor), tmp);
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
                }
            }else {
                EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA();
                EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB();
            }
        }
    }

    private static class lnMant {
        private static final double[][] LN_MANT;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length); i++) {
                    final double d = java.lang.Double.longBitsToDouble(((((long) (i)) << 42) | 4607182418800017408L));
                    org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
                }
            }else {
                LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
            }
        }
    }

    private static class CodyWaite {
        private final int finalK;

        private final double finalRemA;

        private final double finalRemB;

        CodyWaite(double xa, double xb) {
            int k = ((int) (xa * 0.6366197723675814));
            double remA;
            double remB;
            while (true) {
                double a = (-k) * 1.570796251296997;
                remA = xa + a;
                remB = -((remA - xa) - a);
                a = (-k) * 7.549789948768648E-8;
                double b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                a = (-k) * 6.123233995736766E-17;
                b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                if (remA > 0) {
                    break;
                }
                --k;
            } 
            this.finalK = k;
            this.finalRemA = remA;
            this.finalRemB = remB;
        }

        int getK() {
            return finalK;
        }

        double getRemA() {
            return finalRemA;
        }

        double getRemB() {
            return finalRemB;
        }
    }
}
00:35:58.825 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:35:58.826 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #150
00:35:58.826 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1364 which is executed by 281 tests
1033054629
00:35:59.129 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #151
00:35:59.129 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:3464 which is executed by 295 tests
1033054629
00:35:59.438 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #152
00:35:59.439 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:602 which is executed by 300 tests
68567944
00:35:59.688 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:35:59.841 [pool-403-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (148 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:00.183 [pool-402-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:359: error: variable ret might not have been initialized
        return ret;
               ^
00:36:00.189 [pool-402-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    public static final double LANCZOS_G = 607.0 / 128.0;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math3.util.FastMath.log((2.0 * (org.apache.commons.math3.util.FastMath.PI))));

    private static final double SQRT_TWO_PI = 2.5066282746310007;

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private static final double INV_GAMMA1P_M1_A0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_A1 = 6.247308301164655E-9;

    private static final double INV_GAMMA1P_M1_B1 = 0.203610414066807;

    private static final double INV_GAMMA1P_M1_B2 = 0.026620534842894922;

    private static final double INV_GAMMA1P_M1_B3 = 4.939449793824468E-4;

    private static final double INV_GAMMA1P_M1_B4 = -8.514194324403149E-6;

    private static final double INV_GAMMA1P_M1_B5 = -6.4304548177935305E-6;

    private static final double INV_GAMMA1P_M1_B6 = 9.926418406727737E-7;

    private static final double INV_GAMMA1P_M1_B7 = -6.077618957228252E-8;

    private static final double INV_GAMMA1P_M1_B8 = 1.9575583661463974E-10;

    private static final double INV_GAMMA1P_M1_P0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_P1 = 6.8716741130671986E-9;

    private static final double INV_GAMMA1P_M1_P2 = 6.820161668496171E-10;

    private static final double INV_GAMMA1P_M1_P3 = 4.686843322948848E-11;

    private static final double INV_GAMMA1P_M1_P4 = 1.5728330277104463E-12;

    private static final double INV_GAMMA1P_M1_P5 = -1.2494415722763663E-13;

    private static final double INV_GAMMA1P_M1_P6 = 4.343529937408594E-15;

    private static final double INV_GAMMA1P_M1_Q1 = 0.3056961078365221;

    private static final double INV_GAMMA1P_M1_Q2 = 0.054642130860422966;

    private static final double INV_GAMMA1P_M1_Q3 = 0.004956830093825887;

    private static final double INV_GAMMA1P_M1_Q4 = 2.6923694661863613E-4;

    private static final double INV_GAMMA1P_M1_C = -0.42278433509846713;

    private static final double INV_GAMMA1P_M1_C0 = 0.5772156649015329;

    private static final double INV_GAMMA1P_M1_C1 = -0.6558780715202539;

    private static final double INV_GAMMA1P_M1_C2 = -0.04200263503409524;

    private static final double INV_GAMMA1P_M1_C3 = 0.16653861138229148;

    private static final double INV_GAMMA1P_M1_C4 = -0.04219773455554433;

    private static final double INV_GAMMA1P_M1_C5 = -0.009621971527876973;

    private static final double INV_GAMMA1P_M1_C6 = 0.0072189432466631;

    private static final double INV_GAMMA1P_M1_C7 = -0.0011651675918590652;

    private static final double INV_GAMMA1P_M1_C8 = -2.1524167411495098E-4;

    private static final double INV_GAMMA1P_M1_C9 = 1.280502823881162E-4;

    private static final double INV_GAMMA1P_M1_C10 = -2.013485478078824E-5;

    private static final double INV_GAMMA1P_M1_C11 = -1.2504934821426706E-6;

    private static final double INV_GAMMA1P_M1_C12 = 1.133027231981696E-6;

    private static final double INV_GAMMA1P_M1_C13 = -2.056338416977607E-7;

    private Gamma() {
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x < 0.5) {
                return (org.apache.commons.math3.special.Gamma.logGamma1p(x)) - (org.apache.commons.math3.util.FastMath.log(x));
            }else
                if (x <= 2.5) {
                    return org.apache.commons.math3.special.Gamma.logGamma1p(((x - 0.5) - 0.5));
                }else
                    if (x <= 8.0) {
                        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor((x - 1.5))));
                        double prod = 1.0;
                        for (int i = 1; i <= n; i++) {
                            prod *= x - i;
                        }
                        return (org.apache.commons.math3.special.Gamma.logGamma1p((x - (n + 1)))) + (org.apache.commons.math3.util.FastMath.log(prod));
                    }else {
                        double sum = org.apache.commons.math3.special.Gamma.lanczos(x);
                        double tmp = (x + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
                        ret = ((((x + 0.5) * (org.apache.commons.math3.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math3.util.FastMath.log((sum / x)));
                    }



        return ret;
    }

    public static double regularizedGammaP(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math3.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math3.exception.MaxCountExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math3.util.ContinuedFraction cf = new org.apache.commons.math3.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math3.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math3.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math3.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math3.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }

    public static double lanczos(final double x) {
        double sum = 0.0;
        for (int i = (org.apache.commons.math3.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
            sum = sum + ((org.apache.commons.math3.special.Gamma.LANCZOS[i]) / (x + i));
        }
        return sum + (org.apache.commons.math3.special.Gamma.LANCZOS[0]);
    }

    public static double invGamma1pm1(final double x) {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        final double ret;
        final double t = (x <= 0.5) ? x : (x - 0.5) - 0.5;
        if (t < 0.0) {
            final double a = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0) + (t * (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1));
            double b = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8;
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1) + (t * b);
            b = 1.0 + (t * b);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + (t * (a / b));
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C) + (t * c);
            if (x > 0.5) {
                ret = (t * c) / x;
            }else {
                ret = x * ((c + 0.5) + 0.5);
            }
        }else {
            double p = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6;
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0) + (t * p);
            double q = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4;
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1) + (t * q);
            q = 1.0 + (t * q);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + ((p / q) * t);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0) + (t * c);
            if (x > 0.5) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(95).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS",org.apache.commons.math3.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.SQRT_TWO_PI",org.apache.commons.math3.special.Gamma.SQRT_TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS_G",org.apache.commons.math3.special.Gamma.LANCZOS_G);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.C_LIMIT",org.apache.commons.math3.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.S_LIMIT",org.apache.commons.math3.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.GAMMA",org.apache.commons.math3.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("p",p);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("q",q);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(95).collectionEnds();
                }
                if (runtimeAngelicValue)
                    ret = (t / x) * ((c - 0.5) - 0.5);

            }else {
                ret = x * c;
            }
        }
        return ret;
    }

    public static double logGamma1p(final double x) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        return -(org.apache.commons.math3.util.FastMath.log1p(org.apache.commons.math3.special.Gamma.invGamma1pm1(x)));
    }

    public static double gamma(final double x) {
        final double ret;
        final double absX = org.apache.commons.math3.util.FastMath.abs(x);
        if (absX <= 20.0) {
            if (x >= 1.0) {
                double prod = 1.0;
                double t = x;
                while (t > 2.5) {
                    t = t - 1.0;
                    prod *= t;
                } 
                ret = prod / (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1((t - 1.0))));
            }else {
                double prod = x;
                double t = x;
                while (t < (-0.5)) {
                    t = t + 1.0;
                    prod *= t;
                } 
                ret = 1.0 / (prod * (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1(t))));
            }
        }else {
            final double y = (absX + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
            final double gammaAbs = ((((org.apache.commons.math3.special.Gamma.SQRT_TWO_PI) / x) * (org.apache.commons.math3.util.FastMath.pow(y, (absX + 0.5)))) * (org.apache.commons.math3.util.FastMath.exp((-y)))) * (org.apache.commons.math3.special.Gamma.lanczos(absX));
            if (x > 0.0) {
                ret = gammaAbs;
            }else {
                ret = (-(org.apache.commons.math3.util.FastMath.PI)) / ((x * (org.apache.commons.math3.util.FastMath.sin(((org.apache.commons.math3.util.FastMath.PI) * x)))) * gammaAbs);
            }
        }
        return ret;
    }
}
00:36:00.190 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:00.190 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #153
00:36:00.190 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:604 which is executed by 304 tests
68567944
00:36:00.440 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:00.598 [pool-405-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (153 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:00.976 [pool-404-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:359: error: variable ret might not have been initialized
        return ret;
               ^
00:36:00.982 [pool-404-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    public static final double LANCZOS_G = 607.0 / 128.0;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math3.util.FastMath.log((2.0 * (org.apache.commons.math3.util.FastMath.PI))));

    private static final double SQRT_TWO_PI = 2.5066282746310007;

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private static final double INV_GAMMA1P_M1_A0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_A1 = 6.247308301164655E-9;

    private static final double INV_GAMMA1P_M1_B1 = 0.203610414066807;

    private static final double INV_GAMMA1P_M1_B2 = 0.026620534842894922;

    private static final double INV_GAMMA1P_M1_B3 = 4.939449793824468E-4;

    private static final double INV_GAMMA1P_M1_B4 = -8.514194324403149E-6;

    private static final double INV_GAMMA1P_M1_B5 = -6.4304548177935305E-6;

    private static final double INV_GAMMA1P_M1_B6 = 9.926418406727737E-7;

    private static final double INV_GAMMA1P_M1_B7 = -6.077618957228252E-8;

    private static final double INV_GAMMA1P_M1_B8 = 1.9575583661463974E-10;

    private static final double INV_GAMMA1P_M1_P0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_P1 = 6.8716741130671986E-9;

    private static final double INV_GAMMA1P_M1_P2 = 6.820161668496171E-10;

    private static final double INV_GAMMA1P_M1_P3 = 4.686843322948848E-11;

    private static final double INV_GAMMA1P_M1_P4 = 1.5728330277104463E-12;

    private static final double INV_GAMMA1P_M1_P5 = -1.2494415722763663E-13;

    private static final double INV_GAMMA1P_M1_P6 = 4.343529937408594E-15;

    private static final double INV_GAMMA1P_M1_Q1 = 0.3056961078365221;

    private static final double INV_GAMMA1P_M1_Q2 = 0.054642130860422966;

    private static final double INV_GAMMA1P_M1_Q3 = 0.004956830093825887;

    private static final double INV_GAMMA1P_M1_Q4 = 2.6923694661863613E-4;

    private static final double INV_GAMMA1P_M1_C = -0.42278433509846713;

    private static final double INV_GAMMA1P_M1_C0 = 0.5772156649015329;

    private static final double INV_GAMMA1P_M1_C1 = -0.6558780715202539;

    private static final double INV_GAMMA1P_M1_C2 = -0.04200263503409524;

    private static final double INV_GAMMA1P_M1_C3 = 0.16653861138229148;

    private static final double INV_GAMMA1P_M1_C4 = -0.04219773455554433;

    private static final double INV_GAMMA1P_M1_C5 = -0.009621971527876973;

    private static final double INV_GAMMA1P_M1_C6 = 0.0072189432466631;

    private static final double INV_GAMMA1P_M1_C7 = -0.0011651675918590652;

    private static final double INV_GAMMA1P_M1_C8 = -2.1524167411495098E-4;

    private static final double INV_GAMMA1P_M1_C9 = 1.280502823881162E-4;

    private static final double INV_GAMMA1P_M1_C10 = -2.013485478078824E-5;

    private static final double INV_GAMMA1P_M1_C11 = -1.2504934821426706E-6;

    private static final double INV_GAMMA1P_M1_C12 = 1.133027231981696E-6;

    private static final double INV_GAMMA1P_M1_C13 = -2.056338416977607E-7;

    private Gamma() {
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x < 0.5) {
                return (org.apache.commons.math3.special.Gamma.logGamma1p(x)) - (org.apache.commons.math3.util.FastMath.log(x));
            }else
                if (x <= 2.5) {
                    return org.apache.commons.math3.special.Gamma.logGamma1p(((x - 0.5) - 0.5));
                }else
                    if (x <= 8.0) {
                        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor((x - 1.5))));
                        double prod = 1.0;
                        for (int i = 1; i <= n; i++) {
                            prod *= x - i;
                        }
                        return (org.apache.commons.math3.special.Gamma.logGamma1p((x - (n + 1)))) + (org.apache.commons.math3.util.FastMath.log(prod));
                    }else {
                        double sum = org.apache.commons.math3.special.Gamma.lanczos(x);
                        double tmp = (x + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
                        ret = ((((x + 0.5) * (org.apache.commons.math3.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math3.util.FastMath.log((sum / x)));
                    }



        return ret;
    }

    public static double regularizedGammaP(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math3.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math3.exception.MaxCountExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math3.util.ContinuedFraction cf = new org.apache.commons.math3.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math3.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math3.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math3.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math3.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }

    public static double lanczos(final double x) {
        double sum = 0.0;
        for (int i = (org.apache.commons.math3.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
            sum = sum + ((org.apache.commons.math3.special.Gamma.LANCZOS[i]) / (x + i));
        }
        return sum + (org.apache.commons.math3.special.Gamma.LANCZOS[0]);
    }

    public static double invGamma1pm1(final double x) {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        final double ret;
        final double t = (x <= 0.5) ? x : (x - 0.5) - 0.5;
        if (t < 0.0) {
            final double a = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0) + (t * (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1));
            double b = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8;
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1) + (t * b);
            b = 1.0 + (t * b);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + (t * (a / b));
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C) + (t * c);
            if (x > 0.5) {
                ret = (t * c) / x;
            }else {
                ret = x * ((c + 0.5) + 0.5);
            }
        }else {
            double p = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6;
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0) + (t * p);
            double q = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4;
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1) + (t * q);
            q = 1.0 + (t * q);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + ((p / q) * t);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0) + (t * c);
            if (x > 0.5) {
                ret = (t / x) * ((c - 0.5) - 0.5);
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(96).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS",org.apache.commons.math3.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.SQRT_TWO_PI",org.apache.commons.math3.special.Gamma.SQRT_TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS_G",org.apache.commons.math3.special.Gamma.LANCZOS_G);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.C_LIMIT",org.apache.commons.math3.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.S_LIMIT",org.apache.commons.math3.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.GAMMA",org.apache.commons.math3.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("p",p);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("q",q);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(96).collectionEnds();
                }
                if (runtimeAngelicValue)
                    ret = x * c;

            }
        }
        return ret;
    }

    public static double logGamma1p(final double x) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        return -(org.apache.commons.math3.util.FastMath.log1p(org.apache.commons.math3.special.Gamma.invGamma1pm1(x)));
    }

    public static double gamma(final double x) {
        final double ret;
        final double absX = org.apache.commons.math3.util.FastMath.abs(x);
        if (absX <= 20.0) {
            if (x >= 1.0) {
                double prod = 1.0;
                double t = x;
                while (t > 2.5) {
                    t = t - 1.0;
                    prod *= t;
                } 
                ret = prod / (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1((t - 1.0))));
            }else {
                double prod = x;
                double t = x;
                while (t < (-0.5)) {
                    t = t + 1.0;
                    prod *= t;
                } 
                ret = 1.0 / (prod * (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1(t))));
            }
        }else {
            final double y = (absX + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
            final double gammaAbs = ((((org.apache.commons.math3.special.Gamma.SQRT_TWO_PI) / x) * (org.apache.commons.math3.util.FastMath.pow(y, (absX + 0.5)))) * (org.apache.commons.math3.util.FastMath.exp((-y)))) * (org.apache.commons.math3.special.Gamma.lanczos(absX));
            if (x > 0.0) {
                ret = gammaAbs;
            }else {
                ret = (-(org.apache.commons.math3.util.FastMath.PI)) / ((x * (org.apache.commons.math3.util.FastMath.sin(((org.apache.commons.math3.util.FastMath.PI) * x)))) * gammaAbs);
            }
        }
        return ret;
    }
}
00:36:00.983 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:00.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #154
00:36:00.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:252 which is executed by 304 tests
68567944
00:36:01.230 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:01.389 [pool-407-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (153 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:01.703 [pool-406-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:178: error: variable ret might not have been initialized
        return ret;
               ^
00:36:01.709 [pool-406-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    public static final double LANCZOS_G = 607.0 / 128.0;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math3.util.FastMath.log((2.0 * (org.apache.commons.math3.util.FastMath.PI))));

    private static final double SQRT_TWO_PI = 2.5066282746310007;

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private static final double INV_GAMMA1P_M1_A0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_A1 = 6.247308301164655E-9;

    private static final double INV_GAMMA1P_M1_B1 = 0.203610414066807;

    private static final double INV_GAMMA1P_M1_B2 = 0.026620534842894922;

    private static final double INV_GAMMA1P_M1_B3 = 4.939449793824468E-4;

    private static final double INV_GAMMA1P_M1_B4 = -8.514194324403149E-6;

    private static final double INV_GAMMA1P_M1_B5 = -6.4304548177935305E-6;

    private static final double INV_GAMMA1P_M1_B6 = 9.926418406727737E-7;

    private static final double INV_GAMMA1P_M1_B7 = -6.077618957228252E-8;

    private static final double INV_GAMMA1P_M1_B8 = 1.9575583661463974E-10;

    private static final double INV_GAMMA1P_M1_P0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_P1 = 6.8716741130671986E-9;

    private static final double INV_GAMMA1P_M1_P2 = 6.820161668496171E-10;

    private static final double INV_GAMMA1P_M1_P3 = 4.686843322948848E-11;

    private static final double INV_GAMMA1P_M1_P4 = 1.5728330277104463E-12;

    private static final double INV_GAMMA1P_M1_P5 = -1.2494415722763663E-13;

    private static final double INV_GAMMA1P_M1_P6 = 4.343529937408594E-15;

    private static final double INV_GAMMA1P_M1_Q1 = 0.3056961078365221;

    private static final double INV_GAMMA1P_M1_Q2 = 0.054642130860422966;

    private static final double INV_GAMMA1P_M1_Q3 = 0.004956830093825887;

    private static final double INV_GAMMA1P_M1_Q4 = 2.6923694661863613E-4;

    private static final double INV_GAMMA1P_M1_C = -0.42278433509846713;

    private static final double INV_GAMMA1P_M1_C0 = 0.5772156649015329;

    private static final double INV_GAMMA1P_M1_C1 = -0.6558780715202539;

    private static final double INV_GAMMA1P_M1_C2 = -0.04200263503409524;

    private static final double INV_GAMMA1P_M1_C3 = 0.16653861138229148;

    private static final double INV_GAMMA1P_M1_C4 = -0.04219773455554433;

    private static final double INV_GAMMA1P_M1_C5 = -0.009621971527876973;

    private static final double INV_GAMMA1P_M1_C6 = 0.0072189432466631;

    private static final double INV_GAMMA1P_M1_C7 = -0.0011651675918590652;

    private static final double INV_GAMMA1P_M1_C8 = -2.1524167411495098E-4;

    private static final double INV_GAMMA1P_M1_C9 = 1.280502823881162E-4;

    private static final double INV_GAMMA1P_M1_C10 = -2.013485478078824E-5;

    private static final double INV_GAMMA1P_M1_C11 = -1.2504934821426706E-6;

    private static final double INV_GAMMA1P_M1_C12 = 1.133027231981696E-6;

    private static final double INV_GAMMA1P_M1_C13 = -2.056338416977607E-7;

    private Gamma() {
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x < 0.5) {
                return (org.apache.commons.math3.special.Gamma.logGamma1p(x)) - (org.apache.commons.math3.util.FastMath.log(x));
            }else
                if (x <= 2.5) {
                    return org.apache.commons.math3.special.Gamma.logGamma1p(((x - 0.5) - 0.5));
                }else {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(97).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.S_LIMIT",org.apache.commons.math3.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS",org.apache.commons.math3.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.SQRT_TWO_PI",org.apache.commons.math3.special.Gamma.SQRT_TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS_G",org.apache.commons.math3.special.Gamma.LANCZOS_G);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("x <= 8.0",x <= 8.0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.GAMMA",org.apache.commons.math3.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.C_LIMIT",org.apache.commons.math3.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("8.0",8.0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(97).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (x <= 8.0) {
                        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor((x - 1.5))));
                        double prod = 1.0;
                        for (int i = 1; i <= n; i++) {
                            prod *= x - i;
                        }
                        return (org.apache.commons.math3.special.Gamma.logGamma1p((x - (n + 1)))) + (org.apache.commons.math3.util.FastMath.log(prod));
                    }else {
                        double sum = org.apache.commons.math3.special.Gamma.lanczos(x);
                        double tmp = (x + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
                        ret = ((((x + 0.5) * (org.apache.commons.math3.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math3.util.FastMath.log((sum / x)));
                    }
                }


        return ret;
    }

    public static double regularizedGammaP(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math3.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math3.exception.MaxCountExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math3.util.ContinuedFraction cf = new org.apache.commons.math3.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math3.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math3.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math3.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math3.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }

    public static double lanczos(final double x) {
        double sum = 0.0;
        for (int i = (org.apache.commons.math3.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
            sum = sum + ((org.apache.commons.math3.special.Gamma.LANCZOS[i]) / (x + i));
        }
        return sum + (org.apache.commons.math3.special.Gamma.LANCZOS[0]);
    }

    public static double invGamma1pm1(final double x) {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        final double ret;
        final double t = (x <= 0.5) ? x : (x - 0.5) - 0.5;
        if (t < 0.0) {
            final double a = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0) + (t * (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1));
            double b = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8;
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1) + (t * b);
            b = 1.0 + (t * b);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + (t * (a / b));
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C) + (t * c);
            if (x > 0.5) {
                ret = (t * c) / x;
            }else {
                ret = x * ((c + 0.5) + 0.5);
            }
        }else {
            double p = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6;
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0) + (t * p);
            double q = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4;
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1) + (t * q);
            q = 1.0 + (t * q);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + ((p / q) * t);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0) + (t * c);
            if (x > 0.5) {
                ret = (t / x) * ((c - 0.5) - 0.5);
            }else {
                ret = x * c;
            }
        }
        return ret;
    }

    public static double logGamma1p(final double x) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        return -(org.apache.commons.math3.util.FastMath.log1p(org.apache.commons.math3.special.Gamma.invGamma1pm1(x)));
    }

    public static double gamma(final double x) {
        final double ret;
        final double absX = org.apache.commons.math3.util.FastMath.abs(x);
        if (absX <= 20.0) {
            if (x >= 1.0) {
                double prod = 1.0;
                double t = x;
                while (t > 2.5) {
                    t = t - 1.0;
                    prod *= t;
                } 
                ret = prod / (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1((t - 1.0))));
            }else {
                double prod = x;
                double t = x;
                while (t < (-0.5)) {
                    t = t + 1.0;
                    prod *= t;
                } 
                ret = 1.0 / (prod * (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1(t))));
            }
        }else {
            final double y = (absX + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
            final double gammaAbs = ((((org.apache.commons.math3.special.Gamma.SQRT_TWO_PI) / x) * (org.apache.commons.math3.util.FastMath.pow(y, (absX + 0.5)))) * (org.apache.commons.math3.util.FastMath.exp((-y)))) * (org.apache.commons.math3.special.Gamma.lanczos(absX));
            if (x > 0.0) {
                ret = gammaAbs;
            }else {
                ret = (-(org.apache.commons.math3.util.FastMath.PI)) / ((x * (org.apache.commons.math3.util.FastMath.sin(((org.apache.commons.math3.util.FastMath.PI) * x)))) * gammaAbs);
            }
        }
        return ret;
    }
}
00:36:01.710 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:01.710 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:01.879 [pool-409-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (164 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:02.224 [pool-410-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:02.226 [pool-411-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:02.227 [pool-408-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:02.227 [pool-408-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:02.227 [pool-408-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:252.
00:36:02.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #155
00:36:02.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1361 which is executed by 352 tests
1033054629
00:36:02.528 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:02.703 [pool-413-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (170 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:03.989 [pool-412-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:771: error: missing return statement
    }
    ^
00:36:04.843 [pool-412-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastMath {
    public static final double PI = (1.05414357E8 / 3.3554432E7) + 1.984187159361081E-9;

    public static final double E = (2850325.0 / 1048576.0) + 8.254840070411029E-8;

    static final int EXP_INT_TABLE_MAX_INDEX = 750;

    static final int EXP_INT_TABLE_LEN = (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) * 2;

    static final int LN_MANT_LEN = 1024;

    static final int EXP_FRAC_TABLE_LEN = 1025;

    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;

    private static final double LN_2_A = 0.6931470632553101;

    private static final double LN_2_B = 1.1730463525082348E-7;

    private static final double[][] LN_QUICK_COEF = new double[][]{ new double[]{ 1.0, 5.669184079525E-24 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.986821492305628E-8 }, new double[]{ -0.25, -6.663542893624021E-14 }, new double[]{ 0.19999998807907104, 1.1921056801463227E-8 }, new double[]{ -0.1666666567325592, -7.800414592973399E-9 }, new double[]{ 0.1428571343421936, 5.650007086920087E-9 }, new double[]{ -0.12502530217170715, -7.44321345601866E-11 }, new double[]{ 0.11113807559013367, 9.219544613762692E-9 } };

    private static final double[][] LN_HI_PREC_COEF = new double[][]{ new double[]{ 1.0, -6.032174644509064E-23 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.9868161777724352E-8 }, new double[]{ -0.2499999701976776, -2.957007209750105E-8 }, new double[]{ 0.19999954104423523, 1.5830993332061267E-10 }, new double[]{ -0.16624879837036133, -2.6033824355191673E-8 } };

    private static final int SINE_TABLE_LEN = 14;

    private static final double[] SINE_TABLE_A = new double[]{ +0.0, +0.1246747374534607, +0.24740394949913025, +0.366272509098053, +0.4794255495071411, +0.5850973129272461, +0.6816387176513672, +0.7675435543060303, +0.8414709568023682, +0.902267575263977, +0.9489846229553223, +0.9808930158615112, +0.9974949359893799, +0.9985313415527344 };

    private static final double[] SINE_TABLE_B = new double[]{ +0.0, -4.068233003401932E-9, +9.755392680573412E-9, +1.9987994582857286E-8, -1.0902938113007961E-8, -3.9986783938944604E-8, +4.23719669792332E-8, -5.207000323380292E-8, +2.800552834259E-8, +1.883511811213715E-8, -3.5997360512765566E-9, +4.116164446561962E-8, +5.0614674548127384E-8, -1.0129027912496858E-9 };

    private static final double[] COSINE_TABLE_A = new double[]{ +1.0, +0.9921976327896118, +0.9689123630523682, +0.9305076599121094, +0.8775825500488281, +0.8109631538391113, +0.7316888570785522, +0.6409968137741089, +0.5403022766113281, +0.4311765432357788, +0.3153223395347595, +0.19454771280288696, +0.07073719799518585, -0.05417713522911072 };

    private static final double[] COSINE_TABLE_B = new double[]{ +0.0, +3.4439717236742845E-8, +5.865827662008209E-8, -3.7999795083850525E-8, +1.184154459111628E-8, -3.43338934259355E-8, +1.1795268640216787E-8, +4.438921624363781E-8, +2.925681159240093E-8, -2.6437112632041807E-8, +2.2860509143963117E-8, -4.813899778443457E-9, +3.6725170580355583E-9, +2.0217439756338078E-10 };

    private static final double[] TANGENT_TABLE_A = new double[]{ +0.0, +0.1256551444530487, +0.25534194707870483, +0.3936265707015991, +0.5463024377822876, +0.7214844226837158, +0.9315965175628662, +1.1974215507507324, +1.5574076175689697, +2.092571258544922, +3.0095696449279785, +5.041914939880371, +14.101419448852539, -18.430862426757812 };

    private static final double[] TANGENT_TABLE_B = new double[]{ +0.0, -7.877917738262007E-9, -2.5857668567479893E-8, +5.2240336371356666E-9, +5.206150291559893E-8, +1.8307188599677033E-8, -5.7618793749770706E-8, +7.848361555046424E-8, +1.0708593250394448E-7, +1.7827257129423813E-8, +2.893485277253286E-8, +3.1660099222737955E-7, +4.983191803254889E-7, -3.356118100840571E-7 };

    private static final long[] RECIP_2PI = new long[]{ (683565275L << 32) | 2475754826L, (2131351028L << 32) | 2102212464L, (920167782L << 32) | 1326507024L, (2140428522L << 32) | 4155437400L, (1841896334L << 32) | 2425582776L, (26364858L << 32) | 2188665991L, (1065843399L << 32) | 743074255L, (3122695549L << 32) | 1269748001L, (979835913L << 32) | 2904022928L, (1315206542L << 32) | 1624559229L, (656480226L << 32) | 4018031118L, (3355321855L << 32) | 4152452611L, (4224435298L << 32) | 3598883655L, (3679297459L << 32) | 3388129901L, (3553726425L << 32) | 2811755147L, (1565126321L << 32) | 4210654302L, (3477196413L << 32) | 3801392314L, 2600392684L << 32 };

    private static final long[] PI_O_4_BITS = new long[]{ (3373259426L << 32) | 560513588L, (3301335691L << 32) | 2161908945L };

    private static final double[] EIGHTHS = new double[]{ 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625 };

    private static final double[] CBRTTWO = new double[]{ 0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994 };

    private static final long HEX_40000000 = 1073741824L;

    private static final long MASK_30BITS = (-1L) - ((org.apache.commons.math3.util.FastMath.HEX_40000000) - 1);

    private static final double TWO_POWER_52 = 4.503599627370496E15;

    private static final double F_1_3 = 1.0 / 3.0;

    private static final double F_1_5 = 1.0 / 5.0;

    private static final double F_1_7 = 1.0 / 7.0;

    private static final double F_1_9 = 1.0 / 9.0;

    private static final double F_1_11 = 1.0 / 11.0;

    private static final double F_1_13 = 1.0 / 13.0;

    private static final double F_1_15 = 1.0 / 15.0;

    private static final double F_1_17 = 1.0 / 17.0;

    private static final double F_3_4 = 3.0 / 4.0;

    private static final double F_15_16 = 15.0 / 16.0;

    private static final double F_13_14 = 13.0 / 14.0;

    private static final double F_11_12 = 11.0 / 12.0;

    private static final double F_9_10 = 9.0 / 10.0;

    private static final double F_7_8 = 7.0 / 8.0;

    private static final double F_5_6 = 5.0 / 6.0;

    private static final double F_1_2 = 1.0 / 2.0;

    private static final double F_1_4 = 1.0 / 4.0;

    private FastMath() {
    }

    private static double doubleHighPart(double d) {
        if ((d > (-(org.apache.commons.math3.util.Precision.SAFE_MIN))) && (d < (org.apache.commons.math3.util.Precision.SAFE_MIN))) {
            return d;
        }
        long xl = java.lang.Double.doubleToLongBits(d);
        xl = xl & (org.apache.commons.math3.util.FastMath.MASK_30BITS);
        return java.lang.Double.longBitsToDouble(xl);
    }

    public static double sqrt(final double a) {
        return java.lang.Math.sqrt(a);
    }

    public static double cosh(double x) {
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (org.apache.commons.math3.util.FastMath.exp((-x))) / 2.0;
        }
        double[] hiPrec = new double[2];
        if (x < 0.0) {
            x = -x;
        }
        org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
        double ya = (hiPrec[0]) + (hiPrec[1]);
        double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
        double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double yaa = (ya + temp) - temp;
        double yab = ya - yaa;
        double recip = 1.0 / ya;
        temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double recipa = (recip + temp) - temp;
        double recipb = recip - recipa;
        recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
        recipb += ((-yb) * recip) * recip;
        temp = ya + recipa;
        yb += -((temp - ya) - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -((temp - ya) - recipb);
        ya = temp;
        double result = ya + yb;
        result *= 0.5;
        return result;
    }

    public static double sinh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (-(org.apache.commons.math3.util.FastMath.exp((-x)))) / 2.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x > 0.25) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double yaa = (ya + temp) - temp;
            double yab = ya - yaa;
            double recip = 1.0 / ya;
            temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double recipa = (recip + temp) - temp;
            double recipb = recip - recipa;
            recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
            recipb += ((-yb) * recip) * recip;
            recipa = -recipa;
            recipb = -recipb;
            temp = ya + recipa;
            yb += -((temp - ya) - recipa);
            ya = temp;
            temp = ya + recipb;
            yb += -((temp - ya) - recipb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1(x, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            double temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double za = (denom + temp) - temp;
            double zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            temp = ya + ra;
            yb += -((temp - ya) - ra);
            ya = temp;
            temp = ya + rb;
            yb += -((temp - ya) - rb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double tanh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return 1.0;
        }
        if (x < (-20)) {
            return -1.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x >= 0.5) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp((x * 2.0), 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = (-1.0) + ya;
            double nb = -((na + 1.0) - ya);
            double temp = na + yb;
            nb += -((temp - na) - yb);
            na = temp;
            double da = 1.0 + ya;
            double db = -((da - 1.0) - ya);
            temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1((x * 2.0), hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = ya;
            double nb = yb;
            double da = 2.0 + ya;
            double db = -((da - 2.0) - ya);
            double temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double acosh(final double a) {
        return org.apache.commons.math3.util.FastMath.log((a + (org.apache.commons.math3.util.FastMath.sqrt(((a * a) - 1)))));
    }

    public static double asinh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAsinh;
        if (a > 0.167) {
            absAsinh = org.apache.commons.math3.util.FastMath.log(((org.apache.commons.math3.util.FastMath.sqrt(((a * a) + 1))) + a));
        }else {
            final double a2 = a * a;
            if (a > 0.097) {
                absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_17)) * (org.apache.commons.math3.util.FastMath.F_15_16)))) * (org.apache.commons.math3.util.FastMath.F_13_14)))) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
            }else
                if (a > 0.036) {
                    absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13)) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                }else
                    if (a > 0.0036) {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9)) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }else {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5)) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }


        }
        return negative ? -absAsinh : absAsinh;
    }

    public static double atanh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAtanh;
        if (a > 0.15) {
            absAtanh = 0.5 * (org.apache.commons.math3.util.FastMath.log(((1 + a) / (1 - a))));
        }else {
            final double a2 = a * a;
            if (a > 0.087) {
                absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_17)))))))))))))))));
            }else
                if (a > 0.031) {
                    absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13)))))))))))));
                }else
                    if (a > 0.003) {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9)))))))));
                    }else {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5)))));
                    }


        }
        return negative ? -absAtanh : absAtanh;
    }

    public static double signum(final double a) {
        return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a;
    }

    public static float signum(final float a) {
        return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a;
    }

    public static double nextUp(final double a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY);
    }

    public static float nextUp(final float a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY);
    }

    public static double random() {
        return java.lang.Math.random();
    }

    public static double exp(double x) {
        return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null);
    }

    private static double exp(double x, double extra, double[] hiPrec) {
        double intPartA;
        double intPartB;
        int intVal;
        if (x < 0.0) {
            intVal = ((int) (-x));
            if (intVal > 746) {
                if (hiPrec != null) {
                    hiPrec[0] = 0.0;
                    hiPrec[1] = 0.0;
                }
                return 0.0;
            }
            if (intVal > 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 40.19140625), extra, hiPrec)) / 2.85040095144011776E17;
                if (hiPrec != null) {
                    hiPrec[0] /= 2.85040095144011776E17;
                    hiPrec[1] /= 2.85040095144011776E17;
                }
                return result;
            }
            if (intVal == 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 1.494140625), extra, hiPrec)) / 4.455505956692757;
                if (hiPrec != null) {
                    hiPrec[0] /= 4.455505956692757;
                    hiPrec[1] /= 4.455505956692757;
                }
                return result;
            }
            intVal++;
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intVal = -intVal;
        }else {
            intVal = ((int) (x));
            if (intVal > 709) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
                    hiPrec[1] = 0.0;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
        }
        final int intFrac = ((int) ((x - intVal) * 1024.0));
        final double fracPartA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
        final double fracPartB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
        final double epsilon = x - (intVal + (intFrac / 1024.0));
        double z = 0.04168701738764507;
        z = (z * epsilon) + 0.1666666505023083;
        z = (z * epsilon) + 0.5000000000042687;
        z = (z * epsilon) + 1.0;
        z = (z * epsilon) + (-3.940510424527919E-20);
        double tempA = intPartA * fracPartA;
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
        final double tempC = tempB + tempA;
        final double result;
        if (extra != 0.0) {
            result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
        }else {
            result = ((tempC * z) + tempB) + tempA;
        }
        if (hiPrec != null) {
            hiPrec[0] = tempA;
            hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
        }
        return result;
    }

    public static double expm1(double x) {
        return org.apache.commons.math3.util.FastMath.expm1(x, null);
    }

    private static double expm1(double x, double[] hiPrecOut) {
        if ((x != x) || (x == 0.0)) {
            return x;
        }
        if ((x <= (-1.0)) || (x >= 1.0)) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            if (x > 0.0) {
                return ((-1.0) + (hiPrec[0])) + (hiPrec[1]);
            }else {
                final double ra = (-1.0) + (hiPrec[0]);
                double rb = -((ra + 1.0) - (hiPrec[0]));
                rb += hiPrec[1];
                return ra + rb;
            }
        }
        double baseA;
        double baseB;
        double epsilon;
        boolean negative = false;
        if (x < 0.0) {
            x = -x;
            negative = true;
        }
        {
            int intFrac = ((int) (x * 1024.0));
            double tempA = (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]) - 1.0;
            double tempB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
            double temp = tempA + tempB;
            tempB = -((temp - tempA) - tempB);
            tempA = temp;
            temp = tempA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            baseA = (tempA + temp) - temp;
            baseB = tempB + (tempA - baseA);
            epsilon = x - (intFrac / 1024.0);
        }
        double zb = 0.008336750013465571;
        zb = (zb * epsilon) + 0.041666663879186654;
        zb = (zb * epsilon) + 0.16666666666745392;
        zb = (zb * epsilon) + 0.49999999999999994;
        zb = zb * epsilon;
        zb = zb * epsilon;
        double za = epsilon;
        double temp = za + zb;
        zb = -((temp - za) - zb);
        za = temp;
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        temp = (za + temp) - temp;
        zb += za - temp;
        za = temp;
        double ya = za * baseA;
        temp = ya + (za * baseB);
        double yb = -((temp - ya) - (za * baseB));
        ya = temp;
        temp = ya + (zb * baseA);
        yb += -((temp - ya) - (zb * baseA));
        ya = temp;
        temp = ya + (zb * baseB);
        yb += -((temp - ya) - (zb * baseB));
        ya = temp;
        temp = ya + baseA;
        yb += -((temp - baseA) - ya);
        ya = temp;
        temp = ya + za;
        yb += -((temp - ya) - za);
        ya = temp;
        temp = ya + baseB;
        yb += -((temp - ya) - baseB);
        ya = temp;
        temp = ya + zb;
        yb += -((temp - ya) - zb);
        ya = temp;
        if (negative) {
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            za = (denom + temp) - temp;
            zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            ya = -ra;
            yb = -rb;
        }
        if (hiPrecOut != null) {
            hiPrecOut[0] = ya;
            hiPrecOut[1] = yb;
        }
        return ya + yb;
    }

    public static double log(final double x) {
        return org.apache.commons.math3.util.FastMath.log(x, null);
    }

    private static double log(final double x, final double[] hiPrec) {
        if (x == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        long bits = java.lang.Double.doubleToLongBits(x);
        if (((bits & -9223372036854775808L) != 0) || (x != x)) {
            if (x != 0.0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NaN;
                }
                return java.lang.Double.NaN;
            }
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (hiPrec != null) {
                hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
            }
            return java.lang.Double.POSITIVE_INFINITY;
        }
        int exp = ((int) (bits >> 52)) - 1023;
        if ((bits & 9218868437227405312L) == 0) {
            if (x == 0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.NEGATIVE_INFINITY;
            }
            bits <<= 1;
            while ((bits & 4503599627370496L) == 0) {
                --exp;
                bits <<= 1;
            } 
        }
        if ((exp == (-1)) || (exp == 0)) {
            if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {
                double xa = x - 1.0;
                double xb = (xa - x) + 1.0;
                double tmp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                double aa = (xa + tmp) - tmp;
                double ab = xa - aa;
                xa = aa;
                xb = ab;
                final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[((org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 1)];
                double ya = lnCoef_last[0];
                double yb = lnCoef_last[1];
                for (int i = (org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 2; i >= 0; i--) {
                    aa = ya * xa;
                    ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                    final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i];
                    aa = ya + (lnCoef_i[0]);
                    ab = yb + (lnCoef_i[1]);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                }
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                return ya + yb;
            }
        }
        final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 4499201580859392L) >> 42))];
        final double epsilon = (bits & 4398046511103L) / ((org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L));
        double lnza = 0.0;
        double lnzb = 0.0;
        if (hiPrec != null) {
            double tmp = epsilon * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double aa = (epsilon + tmp) - tmp;
            double ab = epsilon - aa;
            double xa = aa;
            double xb = ab;
            final double numer = bits & 4398046511103L;
            final double denom = (org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L);
            aa = (numer - (xa * denom)) - (xb * denom);
            xb += aa / denom;
            final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[((org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 1)];
            double ya = lnCoef_last[0];
            double yb = lnCoef_last[1];
            for (int i = (org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 2; i >= 0; i--) {
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i];
                aa = ya + (lnCoef_i[0]);
                ab = yb + (lnCoef_i[1]);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
            }
            aa = ya * xa;
            ab = ((ya * xb) + (yb * xa)) + (yb * xb);
            lnza = aa + ab;
            lnzb = -((lnza - aa) - ab);
        }else {
            lnza = -0.16624882440418567;
            lnza = (lnza * epsilon) + 0.19999954120254515;
            lnza = (lnza * epsilon) + (-0.2499999997677497);
            lnza = (lnza * epsilon) + 0.3333333333332802;
            lnza = (lnza * epsilon) + (-0.5);
            lnza = (lnza * epsilon) + 1.0;
            lnza = lnza * epsilon;
        }
        double a = (org.apache.commons.math3.util.FastMath.LN_2_A) * exp;
        double b = 0.0;
        double c = a + (lnm[0]);
        double d = -((c - a) - (lnm[0]));
        a = c;
        b = b + d;
        c = a + lnza;
        d = -((c - a) - lnza);
        a = c;
        b = b + d;
        c = a + ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp);
        d = -((c - a) - ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp));
        a = c;
        b = b + d;
        c = a + (lnm[1]);
        d = -((c - a) - (lnm[1]));
        a = c;
        b = b + d;
        c = a + lnzb;
        d = -((c - a) - lnzb);
        a = c;
        b = b + d;
        if (hiPrec != null) {
            hiPrec[0] = a;
            hiPrec[1] = b;
        }
        return a + b;
    }

    public static double log1p(final double x) {
        if (x == (-1)) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((x > 1.0E-6) || (x < (-1.0E-6))) {
            final double xpa = 1 + x;
            final double xpb = -((xpa - 1) - x);
            final double[] hiPrec = new double[2];
            final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
            if (java.lang.Double.isInfinite(lores)) {
                return lores;
            }
            final double fx1 = xpb / xpa;
            final double epsilon = (0.5 * fx1) + 1;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(99).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_1_13",org.apache.commons.math3.util.FastMath.F_1_13);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_1_11",org.apache.commons.math3.util.FastMath.F_1_11);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_1_17",org.apache.commons.math3.util.FastMath.F_1_17);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_11_12",org.apache.commons.math3.util.FastMath.F_11_12);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_1_15",org.apache.commons.math3.util.FastMath.F_1_15);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_15_16",org.apache.commons.math3.util.FastMath.F_15_16);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.EIGHTHS",org.apache.commons.math3.util.FastMath.EIGHTHS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.LN_2_A",org.apache.commons.math3.util.FastMath.LN_2_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.LN_2_B",org.apache.commons.math3.util.FastMath.LN_2_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.PI_O_4_BITS",org.apache.commons.math3.util.FastMath.PI_O_4_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.LN_MANT_LEN",org.apache.commons.math3.util.FastMath.LN_MANT_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("lores",lores);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("fx1",fx1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.MASK_30BITS",org.apache.commons.math3.util.FastMath.MASK_30BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.TWO_POWER_52",org.apache.commons.math3.util.FastMath.TWO_POWER_52);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("hiPrec",hiPrec);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.PI",org.apache.commons.math3.util.FastMath.PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.E",org.apache.commons.math3.util.FastMath.E);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",org.apache.commons.math3.util.FastMath.LN_QUICK_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.CBRTTWO",org.apache.commons.math3.util.FastMath.CBRTTWO);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_9_10",org.apache.commons.math3.util.FastMath.F_9_10);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_13_14",org.apache.commons.math3.util.FastMath.F_13_14);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_1_2",org.apache.commons.math3.util.FastMath.F_1_2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_1_3",org.apache.commons.math3.util.FastMath.F_1_3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_1_4",org.apache.commons.math3.util.FastMath.F_1_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_1_5",org.apache.commons.math3.util.FastMath.F_1_5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_3_4",org.apache.commons.math3.util.FastMath.F_3_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_1_7",org.apache.commons.math3.util.FastMath.F_1_7);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.RECIP_2PI",org.apache.commons.math3.util.FastMath.RECIP_2PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.HEX_40000000",org.apache.commons.math3.util.FastMath.HEX_40000000);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_1_9",org.apache.commons.math3.util.FastMath.F_1_9);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_5_6",org.apache.commons.math3.util.FastMath.F_5_6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.F_7_8",org.apache.commons.math3.util.FastMath.F_7_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("xpa",xpa);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("xpb",xpb);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_A",org.apache.commons.math3.util.FastMath.SINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_B",org.apache.commons.math3.util.FastMath.SINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(99).collectionEnds();
            }
            if (runtimeAngelicValue)
                return ((epsilon * fx1) + (hiPrec[1])) + (hiPrec[0]);

        }else {
            final double y = (((x * (org.apache.commons.math3.util.FastMath.F_1_3)) - (org.apache.commons.math3.util.FastMath.F_1_2)) * x) + 1;
            return y * x;
        }
    }

    public static double log10(final double x) {
        final double[] hiPrec = new double[2];
        final double lores = org.apache.commons.math3.util.FastMath.log(x, hiPrec);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        final double tmp = (hiPrec[0]) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double lna = ((hiPrec[0]) + tmp) - tmp;
        final double lnb = ((hiPrec[0]) - lna) + (hiPrec[1]);
        final double rln10a = 0.4342944622039795;
        final double rln10b = 1.9699272335463627E-8;
        return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna);
    }

    public static double log(double base, double x) {
        return (org.apache.commons.math3.util.FastMath.log(x)) / (org.apache.commons.math3.util.FastMath.log(base));
    }

    public static double pow(double x, double y) {
        final double[] lns = new double[2];
        if (y == 0.0) {
            return 1.0;
        }
        if (x != x) {
            return x;
        }
        if (x == 0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if ((bits & -9223372036854775808L) != 0) {
                long yi = ((long) (y));
                if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return -0.0;
                }
            }
            if (y < 0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }
            if (y > 0) {
                return 0.0;
            }
            return java.lang.Double.NaN;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0.0) {
                return 0.0;
            }else {
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) > 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return -0.0;
                }
                return 0.0;
            }
            if (y > 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) < 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x < 0) {
            if ((y >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (y <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
                return org.apache.commons.math3.util.FastMath.pow((-x), y);
            }
            if (y == ((long) (y))) {
                return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow((-x), y) : -(org.apache.commons.math3.util.FastMath.pow((-x), y));
            }else {
                return java.lang.Double.NaN;
            }
        }
        double ya;
        double yb;
        if ((y < 8.0E298) && (y > (-8.0E298))) {
            double tmp1 = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            ya = (y + tmp1) - tmp1;
            yb = y - ya;
        }else {
            double tmp1 = y * 9.313225746154785E-10;
            double tmp2 = tmp1 * 9.313225746154785E-10;
            ya = (((tmp1 + tmp2) - tmp1) * (org.apache.commons.math3.util.FastMath.HEX_40000000)) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            yb = y - ya;
        }
        final double lores = org.apache.commons.math3.util.FastMath.log(x, lns);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        double lna = lns[0];
        double lnb = lns[1];
        double tmp1 = lna * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double tmp2 = (lna + tmp1) - tmp1;
        lnb += lna - tmp2;
        lna = tmp2;
        final double aa = lna * ya;
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
        lna = aa + ab;
        lnb = -((lna - aa) - ab);
        double z = 1.0 / 120.0;
        z = (z * lnb) + (1.0 / 24.0);
        z = (z * lnb) + (1.0 / 6.0);
        z = (z * lnb) + 0.5;
        z = (z * lnb) + 1.0;
        z = z * lnb;
        final double result = org.apache.commons.math3.util.FastMath.exp(lna, z, null);
        return result;
    }

    public static double pow(double d, int e) {
        if (e == 0) {
            return 1.0;
        }else
            if (e < 0) {
                e = -e;
                d = 1.0 / d;
            }

        final int splitFactor = 134217729;
        final double cd = splitFactor * d;
        final double d1High = cd - (cd - d);
        final double d1Low = d - d1High;
        double resultHigh = 1;
        double resultLow = 0;
        double d2p = d;
        double d2pHigh = d1High;
        double d2pLow = d1Low;
        while (e != 0) {
            if ((e & 1) != 0) {
                final double tmpHigh = resultHigh * d2p;
                final double cRH = splitFactor * resultHigh;
                final double rHH = cRH - (cRH - resultHigh);
                final double rHL = resultHigh - rHH;
                final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
                resultHigh = tmpHigh;
                resultLow = (resultLow * d2p) + tmpLow;
            }
            final double tmpHigh = d2pHigh * d2p;
            final double cD2pH = splitFactor * d2pHigh;
            final double d2pHH = cD2pH - (cD2pH - d2pHigh);
            final double d2pHL = d2pHigh - d2pHH;
            final double tmpLow = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow));
            final double cTmpH = splitFactor * tmpHigh;
            d2pHigh = cTmpH - (cTmpH - tmpHigh);
            d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh);
            d2p = d2pHigh + d2pLow;
            e = e >> 1;
        } 
        return resultHigh + resultLow;
    }

    private static double polySine(final double x) {
        double x2 = x * x;
        double p = 2.7553817452272217E-6;
        p = (p * x2) + (-1.9841269659586505E-4);
        p = (p * x2) + 0.008333333333329196;
        p = (p * x2) + (-0.16666666666666666);
        p = (p * x2) * x;
        return p;
    }

    private static double polyCosine(double x) {
        double x2 = x * x;
        double p = 2.479773539153719E-5;
        p = (p * x2) + (-0.0013888888689039883);
        p = (p * x2) + 0.041666666666621166;
        p = (p * x2) + (-0.49999999999999994);
        p *= x2;
        return p;
    }

    private static double sinQ(double xa, double xb) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        final double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double result;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        if (xb != 0.0) {
            t = (((costA + costB) * (cosEpsA + cosEpsB)) - ((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
            c = a + t;
            d = -((c - a) - t);
            a = c;
            b = b + d;
        }
        result = a + b;
        return result;
    }

    private static double cosQ(double xa, double xb) {
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -((a - pi2a) + xa);
        b += pi2b - xb;
        return org.apache.commons.math3.util.FastMath.sinQ(a, b);
    }

    private static double tanQ(double xa, double xb, boolean cotanFlag) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        double sina = a + b;
        double sinb = -((sina - a) - b);
        a = b = c = d = 0.0;
        t = costA * cosEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        t = (-sintA) * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB);
        b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB));
        double cosa = a + b;
        double cosb = -((cosa - a) - b);
        if (cotanFlag) {
            double tmp;
            tmp = cosa;
            cosa = sina;
            sina = tmp;
            tmp = cosb;
            cosb = sinb;
            sinb = tmp;
        }
        double est = sina / cosa;
        temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double esta = (est + temp) - temp;
        double estb = est - esta;
        temp = cosa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double cosaa = (cosa + temp) - temp;
        double cosab = cosa - cosaa;
        double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa;
        err += sinb / cosa;
        err += (((-sina) * cosb) / cosa) / cosa;
        if (xb != 0.0) {
            double xbadj = xb + ((est * est) * xb);
            if (cotanFlag) {
                xbadj = -xbadj;
            }
            err += xbadj;
        }
        return est + err;
    }

    private static void reducePayneHanek(double x, double[] result) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        inbits &= 4503599627370495L;
        inbits |= 4503599627370496L;
        exponent++;
        inbits <<= 11;
        long shpi0;
        long shpiA;
        long shpiB;
        int idx = exponent >> 6;
        int shift = exponent - (idx << 6);
        if (shift != 0) {
            shpi0 = (idx == 0) ? 0 : (org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)]) << shift;
            shpi0 |= (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) >>> (64 - shift);
            shpiA = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) >>> (64 - shift));
            shpiB = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 2)]) >>> (64 - shift));
        }else {
            shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)];
            shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx];
            shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)];
        }
        long a = inbits >>> 32;
        long b = inbits & 4294967295L;
        long c = shpiA >>> 32;
        long d = shpiA & 4294967295L;
        long ac = a * c;
        long bd = b * d;
        long bc = b * c;
        long ad = a * d;
        long prodB = bd + (ad << 32);
        long prodA = ac + (ad >>> 32);
        boolean bita = (bd & -9223372036854775808L) != 0;
        boolean bitb = (ad & 2147483648L) != 0;
        boolean bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prodB = prodB + (bc << 32);
        prodA = prodA + (bc >>> 32);
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpiB >>> 32;
        d = shpiB & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prodB += ac;
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpi0 >>> 32;
        d = shpi0 & 4294967295L;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        prodA += bd + ((bc + ad) << 32);
        int intPart = ((int) (prodA >>> 62));
        prodA <<= 2;
        prodA |= prodB >>> 62;
        prodB <<= 2;
        a = prodA >>> 32;
        b = prodA & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        long prod2B = bd + (ad << 32);
        long prod2A = ac + (ad >>> 32);
        bita = (bd & -9223372036854775808L) != 0;
        bitb = (ad & 2147483648L) != 0;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prod2B = prod2B + (bc << 32);
        prod2A = prod2A + (bc >>> 32);
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        a = prodB >>> 32;
        b = prodB & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        double tmpA = (prod2A >>> 12) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double tmpB = ((((prod2A & 4095L) << 40) + (prod2B >>> 24)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double sumA = tmpA + tmpB;
        double sumB = -((sumA - tmpA) - tmpB);
        result[0] = intPart;
        result[1] = sumA * 2.0;
        result[2] = sumB * 2.0;
    }

    public static double sin(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa;
        double xb = 0.0;
        xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (negative) {
            quadrant ^= 2;
        }
        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            case 1 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 3 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double cos(double x) {
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            xa = -xa;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 1 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            case 3 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double tan(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (xa > 1.5) {
            final double pi2a = 1.5707963267948966;
            final double pi2b = 6.123233995736766E-17;
            final double a = pi2a - xa;
            double b = -((a - pi2a) + xa);
            b += pi2b - xb;
            xa = a + b;
            xb = -((xa - a) - b);
            quadrant ^= 1;
            negative ^= true;
        }
        double result;
        if ((quadrant & 1) == 0) {
            result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false);
        }else {
            result = -(org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true));
        }
        if (negative) {
            result = -result;
        }
        return result;
    }

    public static double atan(double x) {
        return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false);
    }

    private static double atan(double xa, double xb, boolean leftPlane) {
        boolean negate = false;
        int idx;
        if (xa == 0.0) {
            return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
        }
        if (xa < 0) {
            xa = -xa;
            xb = -xb;
            negate = true;
        }
        if (xa > 1.633123935319537E16) {
            return negate ^ leftPlane ? (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2) : (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (xa < 1) {
            idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
        }else {
            final double oneOverXa = 1 / xa;
            idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
        }
        double epsA = xa - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
        double epsB = -((epsA - xa) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]));
        epsB += xb - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
        double temp = epsA + epsB;
        epsB = -((temp - epsA) - epsB);
        epsA = temp;
        temp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (xa + temp) - temp;
        double yb = (xb + xa) - ya;
        xa = ya;
        xb += yb;
        if (idx == 0) {
            final double denom = 1.0 / (1.0 + ((xa + xb) * ((org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]))));
            ya = epsA * denom;
            yb = epsB * denom;
        }else {
            double temp2 = xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
            double za = 1.0 + temp2;
            double zb = -((za - 1.0) - temp2);
            temp2 = (xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])) + (xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]));
            temp = za + temp2;
            zb += -((temp - za) - temp2);
            za = temp;
            zb += xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
            ya = epsA / za;
            temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double yaa = (ya + temp) - temp;
            final double yab = ya - yaa;
            temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double zaa = (za + temp) - temp;
            final double zab = za - zaa;
            yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;
            yb += (((-epsA) * zb) / za) / za;
            yb += epsB / za;
        }
        epsA = ya;
        epsB = yb;
        final double epsA2 = epsA * epsA;
        yb = 0.07490822288864472;
        yb = (yb * epsA2) + (-0.09088450866185192);
        yb = (yb * epsA2) + 0.11111095942313305;
        yb = (yb * epsA2) + (-0.1428571423679182);
        yb = (yb * epsA2) + 0.19999999999923582;
        yb = (yb * epsA2) + (-0.33333333333333287);
        yb = (yb * epsA2) * epsA;
        ya = epsA;
        temp = ya + yb;
        yb = -((temp - ya) - yb);
        ya = temp;
        yb += epsB / (1.0 + (epsA * epsA));
        double za = (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) + ya;
        double zb = -((za - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx])) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double result = za + zb;
        double resultb = -((result - za) - zb);
        if (leftPlane) {
            final double pia = 1.5707963267948966 * 2;
            final double pib = 6.123233995736766E-17 * 2;
            za = pia - result;
            zb = -((za - pia) + result);
            zb += pib - resultb;
            result = za + zb;
            resultb = -((result - za) - zb);
        }
        if (negate ^ leftPlane) {
            result = -result;
        }
        return result;
    }

    public static double atan2(double y, double x) {
        if ((x != x) || (y != y)) {
            return java.lang.Double.NaN;
        }
        if (y == 0) {
            final double result = x * y;
            final double invx = 1.0 / x;
            final double invy = 1.0 / y;
            if (invx == 0) {
                if (x > 0) {
                    return y;
                }else {
                    return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
                }
            }
            if ((x < 0) || (invx < 0)) {
                if ((y < 0) || (invy < 0)) {
                    return -(java.lang.Math.PI);
                }else {
                    return java.lang.Math.PI;
                }
            }else {
                return result;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((y > 0) || ((1 / y) > 0)) {
                return 0.0;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((y > 0.0) || ((1 / y) > 0.0)) {
                return java.lang.Math.PI;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -(java.lang.Math.PI);
            }
        }
        if (x == 0) {
            if ((y > 0) || ((1 / y) > 0)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
        }
        final double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return org.apache.commons.math3.util.FastMath.atan(r, 0, (x < 0));
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        final double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        final double xb = x - xa;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        final double temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        if (ra == 0) {
            ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y);
        }
        final double result = org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
        return result;
    }

    public static double asin(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == 1.0) {
            return (java.lang.Math.PI) / 2.0;
        }
        if (x == (-1.0)) {
            return (-(java.lang.Math.PI)) / 2.0;
        }
        if (x == 0.0) {
            return x;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y;
        y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        double dx = zb / (2.0 * y);
        double r = x / y;
        temp = r * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ra = (r + temp) - temp;
        double rb = r - ra;
        rb += ((((x - (ra * ya)) - (ra * yb)) - (rb * ya)) - (rb * yb)) / y;
        rb += (((-x) * dx) / y) / y;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, false);
    }

    public static double acos(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == (-1.0)) {
            return java.lang.Math.PI;
        }
        if (x == 1.0) {
            return 0.0;
        }
        if (x == 0) {
            return (java.lang.Math.PI) / 2.0;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        yb += zb / (2.0 * y);
        y = ya + yb;
        yb = -((y - ya) - yb);
        double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return (java.lang.Math.PI) / 2;
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        rb += yb / x;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
    }

    public static double cbrt(double x) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        boolean subnormal = false;
        if (exponent == (-1023)) {
            if (x == 0) {
                return x;
            }
            subnormal = true;
            x *= 1.8014398509481984E16;
            inbits = java.lang.Double.doubleToLongBits(x);
            exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        }
        if (exponent == 1024) {
            return x;
        }
        int exp3 = exponent / 3;
        double p2 = java.lang.Double.longBitsToDouble(((inbits & -9223372036854775808L) | (((long) ((exp3 + 1023) & 2047)) << 52)));
        final double mant = java.lang.Double.longBitsToDouble(((inbits & 4503599627370495L) | 4607182418800017408L));
        double est = -0.010714690733195933;
        est = (est * mant) + 0.0875862700108075;
        est = (est * mant) + (-0.3058015757857271);
        est = (est * mant) + 0.7249995199969751;
        est = (est * mant) + 0.5039018405998233;
        est *= org.apache.commons.math3.util.FastMath.CBRTTWO[((exponent % 3) + 2)];
        final double xs = x / ((p2 * p2) * p2);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        double temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (est + temp) - temp;
        double yb = est - ya;
        double za = ya * ya;
        double zb = ((ya * yb) * 2.0) + (yb * yb);
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (za + temp) - temp;
        zb += za - temp2;
        za = temp2;
        zb = ((za * yb) + (ya * zb)) + (zb * yb);
        za = za * ya;
        double na = xs - za;
        double nb = -((na - xs) + za);
        nb -= zb;
        est += (na + nb) / ((3 * est) * est);
        est *= p2;
        if (subnormal) {
            est *= 3.814697265625E-6;
        }
        return est;
    }

    public static double toRadians(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 0.01745329052209854;
        final double factb = 1.997844754509471E-9;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
        if (result == 0) {
            result = result * x;
        }
        return result;
    }

    public static double toDegrees(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 57.2957763671875;
        final double factb = 3.145894820876798E-6;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
    }

    public static int abs(final int x) {
        return x < 0 ? -x : x;
    }

    public static long abs(final long x) {
        return x < 0L ? -x : x;
    }

    public static float abs(final float x) {
        return x < 0.0F ? -x : x == 0.0F ? 0.0F : x;
    }

    public static double abs(double x) {
        return x < 0.0 ? -x : x == 0.0 ? 0.0 : x;
    }

    public static double ulp(double x) {
        if (java.lang.Double.isInfinite(x)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Double.longBitsToDouble(((java.lang.Double.doubleToLongBits(x)) ^ 1)))));
    }

    public static float ulp(float x) {
        if (java.lang.Float.isInfinite(x)) {
            return java.lang.Float.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Float.intBitsToFloat(((java.lang.Float.floatToIntBits(x)) ^ 1)))));
    }

    public static double scalb(final double d, final int n) {
        if ((n > (-1023)) && (n < 1024)) {
            return d * (java.lang.Double.longBitsToDouble((((long) (n + 1023)) << 52)));
        }
        if (((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) || (d == 0)) {
            return d;
        }
        if (n < (-2098)) {
            return d > 0 ? 0.0 : -0.0;
        }
        if (n > 2097) {
            return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        int exponent = ((int) (bits >>> 52)) & 2047;
        long mantissa = bits & 4503599627370495L;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
            }else
                if (scaledExponent > (-53)) {
                    mantissa = mantissa | (1L << 52);
                    final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Double.longBitsToDouble((sign | mantissa));
                }else {
                    return sign == 0L ? 0.0 : -0.0;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 52) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 4503599627370495L;
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }

        }
    }

    public static float scalb(final float f, final int n) {
        if ((n > (-127)) && (n < 128)) {
            return f * (java.lang.Float.intBitsToFloat(((n + 127) << 23)));
        }
        if (((java.lang.Float.isNaN(f)) || (java.lang.Float.isInfinite(f))) || (f == 0.0F)) {
            return f;
        }
        if (n < (-277)) {
            return f > 0 ? 0.0F : -0.0F;
        }
        if (n > 276) {
            return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
        }
        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        int exponent = (bits >>> 23) & 255;
        int mantissa = bits & 8388607;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
            }else
                if (scaledExponent > (-24)) {
                    mantissa = mantissa | (1 << 23);
                    final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Float.intBitsToFloat((sign | mantissa));
                }else {
                    return sign == 0 ? 0.0F : -0.0F;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 23) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 8388607;
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }

        }
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Double.NaN;
        }else
            if (d == direction) {
                return direction;
            }else
                if (java.lang.Double.isInfinite(d)) {
                    return d < 0 ? -(java.lang.Double.MAX_VALUE) : java.lang.Double.MAX_VALUE;
                }else
                    if (d == 0) {
                        return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
                    }



        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        if ((direction < d) ^ (sign == 0L)) {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) + 1)));
        }else {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) - 1)));
        }
    }

    public static float nextAfter(final float f, final double direction) {
        if ((java.lang.Double.isNaN(f)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Float.NaN;
        }else
            if (f == direction) {
                return ((float) (direction));
            }else
                if (java.lang.Float.isInfinite(f)) {
                    return f < 0.0F ? -(java.lang.Float.MAX_VALUE) : java.lang.Float.MAX_VALUE;
                }else
                    if (f == 0.0F) {
                        return direction < 0 ? -(java.lang.Float.MIN_VALUE) : java.lang.Float.MIN_VALUE;
                    }



        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        if ((direction < f) ^ (sign == 0)) {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) + 1)));
        }else {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) - 1)));
        }
    }

    public static double floor(double x) {
        long y;
        if (x != x) {
            return x;
        }
        if ((x >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
            return x;
        }
        y = ((long) (x));
        if ((x < 0) && (y != x)) {
            y--;
        }
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double ceil(double x) {
        double y;
        if (x != x) {
            return x;
        }
        y = org.apache.commons.math3.util.FastMath.floor(x);
        if (y == x) {
            return y;
        }
        y += 1.0;
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double rint(double x) {
        double y = org.apache.commons.math3.util.FastMath.floor(x);
        double d = x - y;
        if (d > 0.5) {
            if (y == (-1.0)) {
                return -0.0;
            }
            return y + 1.0;
        }
        if (d < 0.5) {
            return y;
        }
        long z = ((long) (y));
        return (z & 1) == 0 ? y : y + 1.0;
    }

    public static long round(double x) {
        return ((long) (org.apache.commons.math3.util.FastMath.floor((x + 0.5))));
    }

    public static int round(final float x) {
        return ((int) (org.apache.commons.math3.util.FastMath.floor((x + 0.5F))));
    }

    public static int min(final int a, final int b) {
        return a <= b ? a : b;
    }

    public static long min(final long a, final long b) {
        return a <= b ? a : b;
    }

    public static float min(final float a, final float b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return a;
        }
        return b;
    }

    public static double min(final double a, final double b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return a;
        }
        return b;
    }

    public static int max(final int a, final int b) {
        return a <= b ? b : a;
    }

    public static long max(final long a, final long b) {
        return a <= b ? b : a;
    }

    public static float max(final float a, final float b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return b;
        }
        return a;
    }

    public static double max(final double a, final double b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return b;
        }
        return a;
    }

    public static double hypot(final double x, final double y) {
        if ((java.lang.Double.isInfinite(x)) || (java.lang.Double.isInfinite(y))) {
            return java.lang.Double.POSITIVE_INFINITY;
        }else
            if ((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(y))) {
                return java.lang.Double.NaN;
            }else {
                final int expX = org.apache.commons.math3.util.FastMath.getExponent(x);
                final int expY = org.apache.commons.math3.util.FastMath.getExponent(y);
                if (expX > (expY + 27)) {
                    return org.apache.commons.math3.util.FastMath.abs(x);
                }else
                    if (expY > (expX + 27)) {
                        return org.apache.commons.math3.util.FastMath.abs(y);
                    }else {
                        final int middleExp = (expX + expY) / 2;
                        final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, (-middleExp));
                        final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, (-middleExp));
                        final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(((scaledX * scaledX) + (scaledY * scaledY)));
                        return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp);
                    }

            }

    }

    public static double IEEEremainder(double dividend, double divisor) {
        return java.lang.StrictMath.IEEEremainder(dividend, divisor);
    }

    public static double copySign(double magnitude, double sign) {
        long m = java.lang.Double.doubleToLongBits(magnitude);
        long s = java.lang.Double.doubleToLongBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static float copySign(float magnitude, float sign) {
        int m = java.lang.Float.floatToIntBits(magnitude);
        int s = java.lang.Float.floatToIntBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static int getExponent(final double d) {
        return ((int) (((java.lang.Double.doubleToLongBits(d)) >>> 52) & 2047)) - 1023;
    }

    public static int getExponent(final float f) {
        return (((java.lang.Float.floatToIntBits(f)) >>> 23) & 255) - 127;
    }

    public static void main(java.lang.String[] a) {
        java.io.PrintStream out = java.lang.System.out;
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "LN_MANT", org.apache.commons.math3.util.FastMath.LN_MANT_LEN, org.apache.commons.math3.util.FastMath.lnMant.LN_MANT);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);
    }

    private static class ExpIntTable {
        private static final double[] EXP_INT_TABLE_A;

        private static final double[] EXP_INT_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                final double[] tmp = new double[2];
                final double[] recip = new double[2];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX); i++) {
                    org.apache.commons.math3.util.FastMathCalc.expint(i, tmp);
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[1];
                    if (i != 0) {
                        org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[0];
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[1];
                    }
                }
            }else {
                EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA();
                EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB();
            }
        }
    }

    private static class ExpFracTable {
        private static final double[] EXP_FRAC_TABLE_A;

        private static final double[] EXP_FRAC_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                final double[] tmp = new double[2];
                final double factor = 1.0 / ((org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN) - 1);
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length); i++) {
                    org.apache.commons.math3.util.FastMathCalc.slowexp((i * factor), tmp);
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
                }
            }else {
                EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA();
                EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB();
            }
        }
    }

    private static class lnMant {
        private static final double[][] LN_MANT;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length); i++) {
                    final double d = java.lang.Double.longBitsToDouble(((((long) (i)) << 42) | 4607182418800017408L));
                    org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
                }
            }else {
                LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
            }
        }
    }

    private static class CodyWaite {
        private final int finalK;

        private final double finalRemA;

        private final double finalRemB;

        CodyWaite(double xa, double xb) {
            int k = ((int) (xa * 0.6366197723675814));
            double remA;
            double remB;
            while (true) {
                double a = (-k) * 1.570796251296997;
                remA = xa + a;
                remB = -((remA - xa) - a);
                a = (-k) * 7.549789948768648E-8;
                double b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                a = (-k) * 6.123233995736766E-17;
                b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                if (remA > 0) {
                    break;
                }
                --k;
            } 
            this.finalK = k;
            this.finalRemA = remA;
            this.finalRemB = remB;
        }

        int getK() {
            return finalK;
        }

        double getRemA() {
            return finalRemA;
        }

        double getRemB() {
            return finalRemB;
        }
    }
}
00:36:04.845 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:04.845 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #156
00:36:04.845 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1360 which is executed by 352 tests
1033054629
00:36:05.147 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #157
00:36:05.147 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1359 which is executed by 352 tests
1033054629
00:36:05.451 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #158
00:36:05.451 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1353 which is executed by 352 tests
1033054629
00:36:05.752 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:05.917 [pool-415-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (159 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:07.231 [pool-416-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:07.233 [pool-417-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:07.234 [pool-414-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:07.234 [pool-414-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:07.234 [pool-414-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1353.
00:36:07.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:07.397 [pool-419-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (157 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:08.701 [pool-420-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:08.703 [pool-421-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:08.704 [pool-418-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:08.704 [pool-418-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:08.704 [pool-418-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1353.
00:36:08.704 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #159
00:36:08.704 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1352 which is executed by 352 tests
1033054629
00:36:09.009 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #160
00:36:09.009 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1351 which is executed by 352 tests
1033054629
00:36:09.311 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #161
00:36:09.311 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1349 which is executed by 352 tests
1033054629
00:36:09.614 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #162
00:36:09.614 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1348 which is executed by 352 tests
1033054629
00:36:09.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #163
00:36:09.917 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:251 which is executed by 380 tests
68567944
00:36:10.164 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:10.334 [pool-423-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (164 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:10.645 [pool-422-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:178: error: variable ret might not have been initialized
        return ret;
               ^
00:36:10.650 [pool-422-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    public static final double LANCZOS_G = 607.0 / 128.0;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math3.util.FastMath.log((2.0 * (org.apache.commons.math3.util.FastMath.PI))));

    private static final double SQRT_TWO_PI = 2.5066282746310007;

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private static final double INV_GAMMA1P_M1_A0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_A1 = 6.247308301164655E-9;

    private static final double INV_GAMMA1P_M1_B1 = 0.203610414066807;

    private static final double INV_GAMMA1P_M1_B2 = 0.026620534842894922;

    private static final double INV_GAMMA1P_M1_B3 = 4.939449793824468E-4;

    private static final double INV_GAMMA1P_M1_B4 = -8.514194324403149E-6;

    private static final double INV_GAMMA1P_M1_B5 = -6.4304548177935305E-6;

    private static final double INV_GAMMA1P_M1_B6 = 9.926418406727737E-7;

    private static final double INV_GAMMA1P_M1_B7 = -6.077618957228252E-8;

    private static final double INV_GAMMA1P_M1_B8 = 1.9575583661463974E-10;

    private static final double INV_GAMMA1P_M1_P0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_P1 = 6.8716741130671986E-9;

    private static final double INV_GAMMA1P_M1_P2 = 6.820161668496171E-10;

    private static final double INV_GAMMA1P_M1_P3 = 4.686843322948848E-11;

    private static final double INV_GAMMA1P_M1_P4 = 1.5728330277104463E-12;

    private static final double INV_GAMMA1P_M1_P5 = -1.2494415722763663E-13;

    private static final double INV_GAMMA1P_M1_P6 = 4.343529937408594E-15;

    private static final double INV_GAMMA1P_M1_Q1 = 0.3056961078365221;

    private static final double INV_GAMMA1P_M1_Q2 = 0.054642130860422966;

    private static final double INV_GAMMA1P_M1_Q3 = 0.004956830093825887;

    private static final double INV_GAMMA1P_M1_Q4 = 2.6923694661863613E-4;

    private static final double INV_GAMMA1P_M1_C = -0.42278433509846713;

    private static final double INV_GAMMA1P_M1_C0 = 0.5772156649015329;

    private static final double INV_GAMMA1P_M1_C1 = -0.6558780715202539;

    private static final double INV_GAMMA1P_M1_C2 = -0.04200263503409524;

    private static final double INV_GAMMA1P_M1_C3 = 0.16653861138229148;

    private static final double INV_GAMMA1P_M1_C4 = -0.04219773455554433;

    private static final double INV_GAMMA1P_M1_C5 = -0.009621971527876973;

    private static final double INV_GAMMA1P_M1_C6 = 0.0072189432466631;

    private static final double INV_GAMMA1P_M1_C7 = -0.0011651675918590652;

    private static final double INV_GAMMA1P_M1_C8 = -2.1524167411495098E-4;

    private static final double INV_GAMMA1P_M1_C9 = 1.280502823881162E-4;

    private static final double INV_GAMMA1P_M1_C10 = -2.013485478078824E-5;

    private static final double INV_GAMMA1P_M1_C11 = -1.2504934821426706E-6;

    private static final double INV_GAMMA1P_M1_C12 = 1.133027231981696E-6;

    private static final double INV_GAMMA1P_M1_C13 = -2.056338416977607E-7;

    private Gamma() {
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x < 0.5) {
                return (org.apache.commons.math3.special.Gamma.logGamma1p(x)) - (org.apache.commons.math3.util.FastMath.log(x));
            }else
                if (x <= 2.5) {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(102).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.S_LIMIT",org.apache.commons.math3.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS",org.apache.commons.math3.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.SQRT_TWO_PI",org.apache.commons.math3.special.Gamma.SQRT_TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS_G",org.apache.commons.math3.special.Gamma.LANCZOS_G);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.GAMMA",org.apache.commons.math3.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.C_LIMIT",org.apache.commons.math3.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(102).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        return org.apache.commons.math3.special.Gamma.logGamma1p(((x - 0.5) - 0.5));

                }else
                    if (x <= 8.0) {
                        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor((x - 1.5))));
                        double prod = 1.0;
                        for (int i = 1; i <= n; i++) {
                            prod *= x - i;
                        }
                        return (org.apache.commons.math3.special.Gamma.logGamma1p((x - (n + 1)))) + (org.apache.commons.math3.util.FastMath.log(prod));
                    }else {
                        double sum = org.apache.commons.math3.special.Gamma.lanczos(x);
                        double tmp = (x + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
                        ret = ((((x + 0.5) * (org.apache.commons.math3.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math3.util.FastMath.log((sum / x)));
                    }



        return ret;
    }

    public static double regularizedGammaP(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math3.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math3.exception.MaxCountExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math3.util.ContinuedFraction cf = new org.apache.commons.math3.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math3.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math3.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math3.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math3.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }

    public static double lanczos(final double x) {
        double sum = 0.0;
        for (int i = (org.apache.commons.math3.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
            sum = sum + ((org.apache.commons.math3.special.Gamma.LANCZOS[i]) / (x + i));
        }
        return sum + (org.apache.commons.math3.special.Gamma.LANCZOS[0]);
    }

    public static double invGamma1pm1(final double x) {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        final double ret;
        final double t = (x <= 0.5) ? x : (x - 0.5) - 0.5;
        if (t < 0.0) {
            final double a = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0) + (t * (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1));
            double b = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8;
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1) + (t * b);
            b = 1.0 + (t * b);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + (t * (a / b));
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C) + (t * c);
            if (x > 0.5) {
                ret = (t * c) / x;
            }else {
                ret = x * ((c + 0.5) + 0.5);
            }
        }else {
            double p = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6;
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0) + (t * p);
            double q = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4;
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1) + (t * q);
            q = 1.0 + (t * q);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + ((p / q) * t);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0) + (t * c);
            if (x > 0.5) {
                ret = (t / x) * ((c - 0.5) - 0.5);
            }else {
                ret = x * c;
            }
        }
        return ret;
    }

    public static double logGamma1p(final double x) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        return -(org.apache.commons.math3.util.FastMath.log1p(org.apache.commons.math3.special.Gamma.invGamma1pm1(x)));
    }

    public static double gamma(final double x) {
        final double ret;
        final double absX = org.apache.commons.math3.util.FastMath.abs(x);
        if (absX <= 20.0) {
            if (x >= 1.0) {
                double prod = 1.0;
                double t = x;
                while (t > 2.5) {
                    t = t - 1.0;
                    prod *= t;
                } 
                ret = prod / (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1((t - 1.0))));
            }else {
                double prod = x;
                double t = x;
                while (t < (-0.5)) {
                    t = t + 1.0;
                    prod *= t;
                } 
                ret = 1.0 / (prod * (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1(t))));
            }
        }else {
            final double y = (absX + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
            final double gammaAbs = ((((org.apache.commons.math3.special.Gamma.SQRT_TWO_PI) / x) * (org.apache.commons.math3.util.FastMath.pow(y, (absX + 0.5)))) * (org.apache.commons.math3.util.FastMath.exp((-y)))) * (org.apache.commons.math3.special.Gamma.lanczos(absX));
            if (x > 0.0) {
                ret = gammaAbs;
            }else {
                ret = (-(org.apache.commons.math3.util.FastMath.PI)) / ((x * (org.apache.commons.math3.util.FastMath.sin(((org.apache.commons.math3.util.FastMath.PI) * x)))) * gammaAbs);
            }
        }
        return ret;
    }
}
00:36:10.651 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:10.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #164
00:36:10.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:601 which is executed by 411 tests
68567944
00:36:10.900 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:11.067 [pool-425-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (161 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:11.369 [pool-424-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:359: error: variable ret might not have been initialized
        return ret;
               ^
00:36:11.374 [pool-424-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    public static final double LANCZOS_G = 607.0 / 128.0;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math3.util.FastMath.log((2.0 * (org.apache.commons.math3.util.FastMath.PI))));

    private static final double SQRT_TWO_PI = 2.5066282746310007;

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private static final double INV_GAMMA1P_M1_A0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_A1 = 6.247308301164655E-9;

    private static final double INV_GAMMA1P_M1_B1 = 0.203610414066807;

    private static final double INV_GAMMA1P_M1_B2 = 0.026620534842894922;

    private static final double INV_GAMMA1P_M1_B3 = 4.939449793824468E-4;

    private static final double INV_GAMMA1P_M1_B4 = -8.514194324403149E-6;

    private static final double INV_GAMMA1P_M1_B5 = -6.4304548177935305E-6;

    private static final double INV_GAMMA1P_M1_B6 = 9.926418406727737E-7;

    private static final double INV_GAMMA1P_M1_B7 = -6.077618957228252E-8;

    private static final double INV_GAMMA1P_M1_B8 = 1.9575583661463974E-10;

    private static final double INV_GAMMA1P_M1_P0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_P1 = 6.8716741130671986E-9;

    private static final double INV_GAMMA1P_M1_P2 = 6.820161668496171E-10;

    private static final double INV_GAMMA1P_M1_P3 = 4.686843322948848E-11;

    private static final double INV_GAMMA1P_M1_P4 = 1.5728330277104463E-12;

    private static final double INV_GAMMA1P_M1_P5 = -1.2494415722763663E-13;

    private static final double INV_GAMMA1P_M1_P6 = 4.343529937408594E-15;

    private static final double INV_GAMMA1P_M1_Q1 = 0.3056961078365221;

    private static final double INV_GAMMA1P_M1_Q2 = 0.054642130860422966;

    private static final double INV_GAMMA1P_M1_Q3 = 0.004956830093825887;

    private static final double INV_GAMMA1P_M1_Q4 = 2.6923694661863613E-4;

    private static final double INV_GAMMA1P_M1_C = -0.42278433509846713;

    private static final double INV_GAMMA1P_M1_C0 = 0.5772156649015329;

    private static final double INV_GAMMA1P_M1_C1 = -0.6558780715202539;

    private static final double INV_GAMMA1P_M1_C2 = -0.04200263503409524;

    private static final double INV_GAMMA1P_M1_C3 = 0.16653861138229148;

    private static final double INV_GAMMA1P_M1_C4 = -0.04219773455554433;

    private static final double INV_GAMMA1P_M1_C5 = -0.009621971527876973;

    private static final double INV_GAMMA1P_M1_C6 = 0.0072189432466631;

    private static final double INV_GAMMA1P_M1_C7 = -0.0011651675918590652;

    private static final double INV_GAMMA1P_M1_C8 = -2.1524167411495098E-4;

    private static final double INV_GAMMA1P_M1_C9 = 1.280502823881162E-4;

    private static final double INV_GAMMA1P_M1_C10 = -2.013485478078824E-5;

    private static final double INV_GAMMA1P_M1_C11 = -1.2504934821426706E-6;

    private static final double INV_GAMMA1P_M1_C12 = 1.133027231981696E-6;

    private static final double INV_GAMMA1P_M1_C13 = -2.056338416977607E-7;

    private Gamma() {
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x < 0.5) {
                return (org.apache.commons.math3.special.Gamma.logGamma1p(x)) - (org.apache.commons.math3.util.FastMath.log(x));
            }else
                if (x <= 2.5) {
                    return org.apache.commons.math3.special.Gamma.logGamma1p(((x - 0.5) - 0.5));
                }else
                    if (x <= 8.0) {
                        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor((x - 1.5))));
                        double prod = 1.0;
                        for (int i = 1; i <= n; i++) {
                            prod *= x - i;
                        }
                        return (org.apache.commons.math3.special.Gamma.logGamma1p((x - (n + 1)))) + (org.apache.commons.math3.util.FastMath.log(prod));
                    }else {
                        double sum = org.apache.commons.math3.special.Gamma.lanczos(x);
                        double tmp = (x + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
                        ret = ((((x + 0.5) * (org.apache.commons.math3.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math3.util.FastMath.log((sum / x)));
                    }



        return ret;
    }

    public static double regularizedGammaP(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math3.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math3.exception.MaxCountExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math3.util.ContinuedFraction cf = new org.apache.commons.math3.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math3.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math3.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math3.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math3.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }

    public static double lanczos(final double x) {
        double sum = 0.0;
        for (int i = (org.apache.commons.math3.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
            sum = sum + ((org.apache.commons.math3.special.Gamma.LANCZOS[i]) / (x + i));
        }
        return sum + (org.apache.commons.math3.special.Gamma.LANCZOS[0]);
    }

    public static double invGamma1pm1(final double x) {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        final double ret;
        final double t = (x <= 0.5) ? x : (x - 0.5) - 0.5;
        if (t < 0.0) {
            final double a = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0) + (t * (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1));
            double b = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8;
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1) + (t * b);
            b = 1.0 + (t * b);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + (t * (a / b));
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C) + (t * c);
            if (x > 0.5) {
                ret = (t * c) / x;
            }else {
                ret = x * ((c + 0.5) + 0.5);
            }
        }else {
            double p = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6;
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0) + (t * p);
            double q = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4;
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1) + (t * q);
            q = 1.0 + (t * q);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + ((p / q) * t);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0) + (t * c);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(103).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS",org.apache.commons.math3.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("x > 0.5",x > 0.5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.SQRT_TWO_PI",org.apache.commons.math3.special.Gamma.SQRT_TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS_G",org.apache.commons.math3.special.Gamma.LANCZOS_G);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.C_LIMIT",org.apache.commons.math3.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.S_LIMIT",org.apache.commons.math3.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("c",c);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.GAMMA",org.apache.commons.math3.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("p",p);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("q",q);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("0.5",0.5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(103).collectionEnds();
            }
            if (runtimeAngelicValue) if (x > 0.5) {
                ret = (t / x) * ((c - 0.5) - 0.5);
            }else {
                ret = x * c;
            }
        }
        return ret;
    }

    public static double logGamma1p(final double x) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        return -(org.apache.commons.math3.util.FastMath.log1p(org.apache.commons.math3.special.Gamma.invGamma1pm1(x)));
    }

    public static double gamma(final double x) {
        final double ret;
        final double absX = org.apache.commons.math3.util.FastMath.abs(x);
        if (absX <= 20.0) {
            if (x >= 1.0) {
                double prod = 1.0;
                double t = x;
                while (t > 2.5) {
                    t = t - 1.0;
                    prod *= t;
                } 
                ret = prod / (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1((t - 1.0))));
            }else {
                double prod = x;
                double t = x;
                while (t < (-0.5)) {
                    t = t + 1.0;
                    prod *= t;
                } 
                ret = 1.0 / (prod * (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1(t))));
            }
        }else {
            final double y = (absX + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
            final double gammaAbs = ((((org.apache.commons.math3.special.Gamma.SQRT_TWO_PI) / x) * (org.apache.commons.math3.util.FastMath.pow(y, (absX + 0.5)))) * (org.apache.commons.math3.util.FastMath.exp((-y)))) * (org.apache.commons.math3.special.Gamma.lanczos(absX));
            if (x > 0.0) {
                ret = gammaAbs;
            }else {
                ret = (-(org.apache.commons.math3.util.FastMath.PI)) / ((x * (org.apache.commons.math3.util.FastMath.sin(((org.apache.commons.math3.util.FastMath.PI) * x)))) * gammaAbs);
            }
        }
        return ret;
    }
}
00:36:11.375 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:11.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:11.530 [pool-427-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (149 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:11.859 [pool-428-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:11.861 [pool-429-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:11.861 [pool-426-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:11.861 [pool-426-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:11.861 [pool-426-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:601.
00:36:11.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #165
00:36:11.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:599 which is executed by 411 tests
68567944
00:36:12.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:12.272 [pool-431-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (157 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:12.600 [pool-432-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:12.602 [pool-433-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:12.602 [pool-430-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:12.602 [pool-430-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:12.603 [pool-430-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:599.
00:36:12.603 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #166
00:36:12.603 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:598 which is executed by 411 tests
68567944
00:36:12.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:13.537 [pool-435-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (681 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:13.895 [pool-436-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:13.898 [pool-437-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:13.898 [pool-434-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:13.898 [pool-434-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:13.899 [pool-434-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:598.
00:36:13.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #167
00:36:13.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:597 which is executed by 411 tests
68567944
00:36:14.150 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:14.464 [pool-439-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (308 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:14.791 [pool-440-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:14.792 [pool-441-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:14.793 [pool-438-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:14.793 [pool-438-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:14.793 [pool-438-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:597.
00:36:14.793 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #168
00:36:14.793 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:596 which is executed by 411 tests
68567944
00:36:15.040 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:15.193 [pool-443-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (148 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:15.521 [pool-444-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:15.523 [pool-445-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:15.524 [pool-442-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:15.524 [pool-442-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:15.524 [pool-442-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:596.
00:36:15.524 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #169
00:36:15.524 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:595 which is executed by 411 tests
68567944
00:36:15.771 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:15.933 [pool-447-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (156 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:16.260 [pool-448-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:16.270 [pool-449-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:16.270 [pool-446-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:16.270 [pool-446-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:16.270 [pool-446-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:595.
00:36:16.270 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #170
00:36:16.271 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:594 which is executed by 411 tests
68567944
00:36:16.521 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:16.671 [pool-451-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (144 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:17.000 [pool-452-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:17.002 [pool-453-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:17.003 [pool-450-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:17.003 [pool-450-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:17.003 [pool-450-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:594.
00:36:17.003 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #171
00:36:17.003 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:593 which is executed by 411 tests
68567944
00:36:17.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:17.411 [pool-455-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (155 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:17.738 [pool-456-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:17.739 [pool-457-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:17.740 [pool-454-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:17.740 [pool-454-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:17.740 [pool-454-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:593.
00:36:17.740 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #172
00:36:17.740 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:592 which is executed by 411 tests
68567944
00:36:17.987 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:18.148 [pool-459-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (155 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:18.478 [pool-460-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:18.479 [pool-461-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:18.480 [pool-458-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:18.480 [pool-458-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:18.480 [pool-458-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:592.
00:36:18.480 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #173
00:36:18.480 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:591 which is executed by 411 tests
68567944
00:36:18.728 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:18.877 [pool-463-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (144 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:19.205 [pool-464-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:19.210 [pool-465-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:19.210 [pool-462-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:19.210 [pool-462-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:19.210 [pool-462-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:591.
00:36:19.211 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #174
00:36:19.211 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:590 which is executed by 411 tests
68567944
00:36:19.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:19.625 [pool-467-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (162 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:19.966 [pool-468-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:19.968 [pool-469-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:19.968 [pool-466-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:19.968 [pool-466-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:19.968 [pool-466-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:590.
00:36:19.969 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #175
00:36:19.969 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:589 which is executed by 411 tests
68567944
00:36:20.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:20.380 [pool-471-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (159 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:20.708 [pool-472-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:20.710 [pool-473-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:20.711 [pool-470-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:20.711 [pool-470-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:20.711 [pool-470-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:589.
00:36:20.711 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #176
00:36:20.711 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:588 which is executed by 411 tests
68567944
00:36:20.957 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:21.131 [pool-475-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (168 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:21.463 [pool-476-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:21.465 [pool-477-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:21.466 [pool-474-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:21.466 [pool-474-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:21.466 [pool-474-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:588.
00:36:21.466 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #177
00:36:21.466 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:587 which is executed by 411 tests
68567944
00:36:21.713 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:21.887 [pool-479-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (168 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:22.237 [pool-480-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:22.239 [pool-481-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:22.239 [pool-478-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:22.240 [pool-478-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:22.240 [pool-478-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:587.
00:36:22.240 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #178
00:36:22.240 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:586 which is executed by 411 tests
68567944
00:36:22.487 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #179
00:36:22.488 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:584 which is executed by 411 tests
68567944
00:36:22.734 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:22.896 [pool-483-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (156 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:23.222 [pool-484-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:23.224 [pool-485-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:23.224 [pool-482-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:23.225 [pool-482-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:23.225 [pool-482-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:584.
00:36:23.225 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #180
00:36:23.225 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:583 which is executed by 411 tests
68567944
00:36:23.470 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:23.631 [pool-487-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (155 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:23.956 [pool-488-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:23.958 [pool-489-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:23.958 [pool-486-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:23.958 [pool-486-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:23.958 [pool-486-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:583.
00:36:23.959 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #181
00:36:23.959 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:582 which is executed by 411 tests
68567944
00:36:24.205 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:24.359 [pool-491-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (148 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:24.686 [pool-492-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:24.687 [pool-493-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:24.688 [pool-490-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:24.688 [pool-490-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:24.688 [pool-490-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:582.
00:36:24.688 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #182
00:36:24.688 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:581 which is executed by 411 tests
68567944
00:36:24.934 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:25.117 [pool-495-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (177 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:25.452 [pool-496-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:25.454 [pool-497-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:25.457 [pool-494-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:25.457 [pool-494-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:25.457 [pool-494-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:581.
00:36:25.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #183
00:36:25.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:580 which is executed by 411 tests
68567944
00:36:25.704 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #184
00:36:25.704 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:578 which is executed by 411 tests
68567944
00:36:25.951 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:26.111 [pool-499-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (155 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:26.437 [pool-500-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:26.439 [pool-501-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:26.439 [pool-498-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:26.439 [pool-498-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:26.439 [pool-498-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:578.
00:36:26.439 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #185
00:36:26.439 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:577 which is executed by 411 tests
68567944
00:36:26.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:26.835 [pool-503-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (142 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:27.159 [pool-504-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:27.162 [pool-505-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:27.162 [pool-502-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:27.162 [pool-502-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:27.162 [pool-502-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:577.
00:36:27.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #186
00:36:27.162 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:576 which is executed by 411 tests
68567944
00:36:27.409 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:27.580 [pool-507-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (166 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:27.908 [pool-508-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:27.910 [pool-509-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:27.911 [pool-506-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:27.911 [pool-506-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:27.911 [pool-506-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:576.
00:36:27.911 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #187
00:36:27.911 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:575 which is executed by 411 tests
68567944
00:36:28.158 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:28.314 [pool-511-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (151 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:28.648 [pool-512-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:28.650 [pool-513-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:28.650 [pool-510-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:28.650 [pool-510-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:28.650 [pool-510-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:575.
00:36:28.650 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #188
00:36:28.651 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:574 which is executed by 411 tests
68567944
00:36:28.896 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:29.056 [pool-515-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (155 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:29.384 [pool-516-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:29.386 [pool-517-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:29.386 [pool-514-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:29.386 [pool-514-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:29.386 [pool-514-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:574.
00:36:29.387 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #189
00:36:29.387 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:573 which is executed by 411 tests
68567944
00:36:29.633 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:29.790 [pool-519-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (151 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:30.117 [pool-520-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:30.119 [pool-521-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:30.119 [pool-518-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:30.119 [pool-518-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:30.119 [pool-518-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:573.
00:36:30.119 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #190
00:36:30.119 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:572 which is executed by 411 tests
68567944
00:36:30.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #191
00:36:30.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:631 which is executed by 446 tests
68567944
00:36:30.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #192
00:36:30.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:627 which is executed by 447 tests
68567944
00:36:30.899 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:31.059 [pool-523-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (155 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:31.386 [pool-524-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:31.387 [pool-525-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:31.388 [pool-522-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:31.388 [pool-522-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:31.388 [pool-522-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:627.
00:36:31.388 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:31.543 [pool-527-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (150 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:31.870 [pool-528-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math3.exception.NumberIsTooLargeException: 1.5 is larger than the maximum (1.5)
    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:363)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:103)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)
00:36:31.896 [pool-529-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (25 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[1.5 is larger than the maximum (1.5)]
org.apache.commons.math3.exception.NumberIsTooLargeException: 1.5 is larger than the maximum (1.5)    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:363)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:103)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)

00:36:31.897 [pool-526-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:31.897 [pool-526-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): 1.5 is larger than the maximum (1.5)]
00:36:31.897 [pool-526-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:627.
00:36:31.897 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #193
00:36:31.897 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:624 which is executed by 448 tests
68567944
00:36:32.145 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:32.328 [pool-531-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (177 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:32.651 [pool-532-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:32.653 [pool-533-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:32.654 [pool-530-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:32.654 [pool-530-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:32.654 [pool-530-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:624.
00:36:32.654 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:32.814 [pool-535-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (155 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:33.139 [pool-536-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math3.exception.NumberIsTooSmallException: 1.5 is smaller than the minimum (-0.5)
    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:361)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:103)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)
00:36:33.154 [pool-537-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[1.5 is smaller than the minimum (-0.5)]
org.apache.commons.math3.exception.NumberIsTooSmallException: 1.5 is smaller than the minimum (-0.5)    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:361)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:103)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)

00:36:33.154 [pool-534-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:33.154 [pool-534-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): 1.5 is smaller than the minimum (-0.5)]
00:36:33.154 [pool-534-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:624.
00:36:33.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #194
00:36:33.155 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:608 which is executed by 448 tests
68567944
00:36:33.402 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #195
00:36:33.402 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:540 which is executed by 448 tests
68567944
00:36:33.650 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:33.808 [pool-539-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (152 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:34.103 [pool-538-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:356: error: variable ret might not have been initialized
        return ret;
               ^
00:36:34.109 [pool-538-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    public static final double LANCZOS_G = 607.0 / 128.0;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math3.util.FastMath.log((2.0 * (org.apache.commons.math3.util.FastMath.PI))));

    private static final double SQRT_TWO_PI = 2.5066282746310007;

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private static final double INV_GAMMA1P_M1_A0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_A1 = 6.247308301164655E-9;

    private static final double INV_GAMMA1P_M1_B1 = 0.203610414066807;

    private static final double INV_GAMMA1P_M1_B2 = 0.026620534842894922;

    private static final double INV_GAMMA1P_M1_B3 = 4.939449793824468E-4;

    private static final double INV_GAMMA1P_M1_B4 = -8.514194324403149E-6;

    private static final double INV_GAMMA1P_M1_B5 = -6.4304548177935305E-6;

    private static final double INV_GAMMA1P_M1_B6 = 9.926418406727737E-7;

    private static final double INV_GAMMA1P_M1_B7 = -6.077618957228252E-8;

    private static final double INV_GAMMA1P_M1_B8 = 1.9575583661463974E-10;

    private static final double INV_GAMMA1P_M1_P0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_P1 = 6.8716741130671986E-9;

    private static final double INV_GAMMA1P_M1_P2 = 6.820161668496171E-10;

    private static final double INV_GAMMA1P_M1_P3 = 4.686843322948848E-11;

    private static final double INV_GAMMA1P_M1_P4 = 1.5728330277104463E-12;

    private static final double INV_GAMMA1P_M1_P5 = -1.2494415722763663E-13;

    private static final double INV_GAMMA1P_M1_P6 = 4.343529937408594E-15;

    private static final double INV_GAMMA1P_M1_Q1 = 0.3056961078365221;

    private static final double INV_GAMMA1P_M1_Q2 = 0.054642130860422966;

    private static final double INV_GAMMA1P_M1_Q3 = 0.004956830093825887;

    private static final double INV_GAMMA1P_M1_Q4 = 2.6923694661863613E-4;

    private static final double INV_GAMMA1P_M1_C = -0.42278433509846713;

    private static final double INV_GAMMA1P_M1_C0 = 0.5772156649015329;

    private static final double INV_GAMMA1P_M1_C1 = -0.6558780715202539;

    private static final double INV_GAMMA1P_M1_C2 = -0.04200263503409524;

    private static final double INV_GAMMA1P_M1_C3 = 0.16653861138229148;

    private static final double INV_GAMMA1P_M1_C4 = -0.04219773455554433;

    private static final double INV_GAMMA1P_M1_C5 = -0.009621971527876973;

    private static final double INV_GAMMA1P_M1_C6 = 0.0072189432466631;

    private static final double INV_GAMMA1P_M1_C7 = -0.0011651675918590652;

    private static final double INV_GAMMA1P_M1_C8 = -2.1524167411495098E-4;

    private static final double INV_GAMMA1P_M1_C9 = 1.280502823881162E-4;

    private static final double INV_GAMMA1P_M1_C10 = -2.013485478078824E-5;

    private static final double INV_GAMMA1P_M1_C11 = -1.2504934821426706E-6;

    private static final double INV_GAMMA1P_M1_C12 = 1.133027231981696E-6;

    private static final double INV_GAMMA1P_M1_C13 = -2.056338416977607E-7;

    private Gamma() {
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x < 0.5) {
                return (org.apache.commons.math3.special.Gamma.logGamma1p(x)) - (org.apache.commons.math3.util.FastMath.log(x));
            }else
                if (x <= 2.5) {
                    return org.apache.commons.math3.special.Gamma.logGamma1p(((x - 0.5) - 0.5));
                }else
                    if (x <= 8.0) {
                        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor((x - 1.5))));
                        double prod = 1.0;
                        for (int i = 1; i <= n; i++) {
                            prod *= x - i;
                        }
                        return (org.apache.commons.math3.special.Gamma.logGamma1p((x - (n + 1)))) + (org.apache.commons.math3.util.FastMath.log(prod));
                    }else {
                        double sum = org.apache.commons.math3.special.Gamma.lanczos(x);
                        double tmp = (x + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
                        ret = ((((x + 0.5) * (org.apache.commons.math3.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math3.util.FastMath.log((sum / x)));
                    }



        return ret;
    }

    public static double regularizedGammaP(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math3.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math3.exception.MaxCountExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math3.util.ContinuedFraction cf = new org.apache.commons.math3.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math3.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math3.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math3.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math3.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }

    public static double lanczos(final double x) {
        double sum = 0.0;
        for (int i = (org.apache.commons.math3.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
            sum = sum + ((org.apache.commons.math3.special.Gamma.LANCZOS[i]) / (x + i));
        }
        return sum + (org.apache.commons.math3.special.Gamma.LANCZOS[0]);
    }

    public static double invGamma1pm1(final double x) {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        final double ret;
        final double t = (x <= 0.5) ? x : (x - 0.5) - 0.5;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(132).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.S_LIMIT",org.apache.commons.math3.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS",org.apache.commons.math3.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.SQRT_TWO_PI",org.apache.commons.math3.special.Gamma.SQRT_TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS_G",org.apache.commons.math3.special.Gamma.LANCZOS_G);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("t < 0.0",t < 0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.GAMMA",org.apache.commons.math3.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.C_LIMIT",org.apache.commons.math3.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(132).collectionEnds();
        }
        if (runtimeAngelicValue) if (t < 0.0) {
            final double a = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0) + (t * (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1));
            double b = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8;
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1) + (t * b);
            b = 1.0 + (t * b);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + (t * (a / b));
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C) + (t * c);
            if (x > 0.5) {
                ret = (t * c) / x;
            }else {
                ret = x * ((c + 0.5) + 0.5);
            }
        }else {
            double p = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6;
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0) + (t * p);
            double q = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4;
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1) + (t * q);
            q = 1.0 + (t * q);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + ((p / q) * t);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0) + (t * c);
            if (x > 0.5) {
                ret = (t / x) * ((c - 0.5) - 0.5);
            }else {
                ret = x * c;
            }
        }
        return ret;
    }

    public static double logGamma1p(final double x) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        return -(org.apache.commons.math3.util.FastMath.log1p(org.apache.commons.math3.special.Gamma.invGamma1pm1(x)));
    }

    public static double gamma(final double x) {
        final double ret;
        final double absX = org.apache.commons.math3.util.FastMath.abs(x);
        if (absX <= 20.0) {
            if (x >= 1.0) {
                double prod = 1.0;
                double t = x;
                while (t > 2.5) {
                    t = t - 1.0;
                    prod *= t;
                } 
                ret = prod / (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1((t - 1.0))));
            }else {
                double prod = x;
                double t = x;
                while (t < (-0.5)) {
                    t = t + 1.0;
                    prod *= t;
                } 
                ret = 1.0 / (prod * (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1(t))));
            }
        }else {
            final double y = (absX + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
            final double gammaAbs = ((((org.apache.commons.math3.special.Gamma.SQRT_TWO_PI) / x) * (org.apache.commons.math3.util.FastMath.pow(y, (absX + 0.5)))) * (org.apache.commons.math3.util.FastMath.exp((-y)))) * (org.apache.commons.math3.special.Gamma.lanczos(absX));
            if (x > 0.0) {
                ret = gammaAbs;
            }else {
                ret = (-(org.apache.commons.math3.util.FastMath.PI)) / ((x * (org.apache.commons.math3.util.FastMath.sin(((org.apache.commons.math3.util.FastMath.PI) * x)))) * gammaAbs);
            }
        }
        return ret;
    }
}
00:36:34.109 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:34.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:34.267 [pool-541-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (152 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:34.591 [pool-542-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:34.593 [pool-543-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:34.594 [pool-540-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:34.594 [pool-540-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:34.594 [pool-540-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:540.
00:36:34.594 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #196
00:36:34.594 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:539 which is executed by 448 tests
68567944
00:36:34.840 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #197
00:36:34.841 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:534 which is executed by 449 tests
68567944
00:36:35.087 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:35.237 [pool-545-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (144 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:35.560 [pool-546-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:35.562 [pool-547-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:35.562 [pool-544-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:35.562 [pool-544-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:35.562 [pool-544-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:534.
00:36:35.562 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:35.710 [pool-549-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (142 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:36.042 [pool-550-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math3.exception.NumberIsTooLargeException: 1.5 is larger than the maximum (1.5)
    at org.apache.commons.math3.special.Gamma.invGamma1pm1(Gamma.java:288)
    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:365)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:103)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
00:36:36.057 [pool-551-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[1.5 is larger than the maximum (1.5)]
org.apache.commons.math3.exception.NumberIsTooLargeException: 1.5 is larger than the maximum (1.5)    at org.apache.commons.math3.special.Gamma.invGamma1pm1(Gamma.java:288)
    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:365)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:103)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)

00:36:36.057 [pool-548-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:36.057 [pool-548-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): 1.5 is larger than the maximum (1.5)]
00:36:36.057 [pool-548-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:534.
00:36:36.058 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #198
00:36:36.058 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:531 which is executed by 450 tests
68567944
00:36:36.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:36.453 [pool-553-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (142 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:36.778 [pool-554-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:36.780 [pool-555-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:36.780 [pool-552-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:36.781 [pool-552-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:36.781 [pool-552-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:531.
00:36:36.781 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:36.959 [pool-557-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (173 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:37.285 [pool-558-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math3.exception.NumberIsTooSmallException: 1.5 is smaller than the minimum (-0.5)
    at org.apache.commons.math3.special.Gamma.invGamma1pm1(Gamma.java:286)
    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:366)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:103)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
00:36:37.300 [pool-559-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[1.5 is smaller than the minimum (-0.5)]
org.apache.commons.math3.exception.NumberIsTooSmallException: 1.5 is smaller than the minimum (-0.5)    at org.apache.commons.math3.special.Gamma.invGamma1pm1(Gamma.java:286)
    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:366)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:103)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)

00:36:37.300 [pool-556-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:37.300 [pool-556-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): 1.5 is smaller than the minimum (-0.5)]
00:36:37.301 [pool-556-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:531.
00:36:37.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #199
00:36:37.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:250 which is executed by 457 tests
68567944
00:36:37.547 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:37.698 [pool-561-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (146 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:37.991 [pool-560-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:178: error: variable ret might not have been initialized
        return ret;
               ^
00:36:37.997 [pool-560-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    public static final double LANCZOS_G = 607.0 / 128.0;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math3.util.FastMath.log((2.0 * (org.apache.commons.math3.util.FastMath.PI))));

    private static final double SQRT_TWO_PI = 2.5066282746310007;

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private static final double INV_GAMMA1P_M1_A0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_A1 = 6.247308301164655E-9;

    private static final double INV_GAMMA1P_M1_B1 = 0.203610414066807;

    private static final double INV_GAMMA1P_M1_B2 = 0.026620534842894922;

    private static final double INV_GAMMA1P_M1_B3 = 4.939449793824468E-4;

    private static final double INV_GAMMA1P_M1_B4 = -8.514194324403149E-6;

    private static final double INV_GAMMA1P_M1_B5 = -6.4304548177935305E-6;

    private static final double INV_GAMMA1P_M1_B6 = 9.926418406727737E-7;

    private static final double INV_GAMMA1P_M1_B7 = -6.077618957228252E-8;

    private static final double INV_GAMMA1P_M1_B8 = 1.9575583661463974E-10;

    private static final double INV_GAMMA1P_M1_P0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_P1 = 6.8716741130671986E-9;

    private static final double INV_GAMMA1P_M1_P2 = 6.820161668496171E-10;

    private static final double INV_GAMMA1P_M1_P3 = 4.686843322948848E-11;

    private static final double INV_GAMMA1P_M1_P4 = 1.5728330277104463E-12;

    private static final double INV_GAMMA1P_M1_P5 = -1.2494415722763663E-13;

    private static final double INV_GAMMA1P_M1_P6 = 4.343529937408594E-15;

    private static final double INV_GAMMA1P_M1_Q1 = 0.3056961078365221;

    private static final double INV_GAMMA1P_M1_Q2 = 0.054642130860422966;

    private static final double INV_GAMMA1P_M1_Q3 = 0.004956830093825887;

    private static final double INV_GAMMA1P_M1_Q4 = 2.6923694661863613E-4;

    private static final double INV_GAMMA1P_M1_C = -0.42278433509846713;

    private static final double INV_GAMMA1P_M1_C0 = 0.5772156649015329;

    private static final double INV_GAMMA1P_M1_C1 = -0.6558780715202539;

    private static final double INV_GAMMA1P_M1_C2 = -0.04200263503409524;

    private static final double INV_GAMMA1P_M1_C3 = 0.16653861138229148;

    private static final double INV_GAMMA1P_M1_C4 = -0.04219773455554433;

    private static final double INV_GAMMA1P_M1_C5 = -0.009621971527876973;

    private static final double INV_GAMMA1P_M1_C6 = 0.0072189432466631;

    private static final double INV_GAMMA1P_M1_C7 = -0.0011651675918590652;

    private static final double INV_GAMMA1P_M1_C8 = -2.1524167411495098E-4;

    private static final double INV_GAMMA1P_M1_C9 = 1.280502823881162E-4;

    private static final double INV_GAMMA1P_M1_C10 = -2.013485478078824E-5;

    private static final double INV_GAMMA1P_M1_C11 = -1.2504934821426706E-6;

    private static final double INV_GAMMA1P_M1_C12 = 1.133027231981696E-6;

    private static final double INV_GAMMA1P_M1_C13 = -2.056338416977607E-7;

    private Gamma() {
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x < 0.5) {
                return (org.apache.commons.math3.special.Gamma.logGamma1p(x)) - (org.apache.commons.math3.util.FastMath.log(x));
            }else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(138).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.S_LIMIT",org.apache.commons.math3.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS",org.apache.commons.math3.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.SQRT_TWO_PI",org.apache.commons.math3.special.Gamma.SQRT_TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("x <= 2.5",x <= 2.5);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS_G",org.apache.commons.math3.special.Gamma.LANCZOS_G);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.GAMMA",org.apache.commons.math3.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.C_LIMIT",org.apache.commons.math3.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("2.5",2.5);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(138).collectionEnds();
                }
                if (runtimeAngelicValue) if (x <= 2.5) {
                    return org.apache.commons.math3.special.Gamma.logGamma1p(((x - 0.5) - 0.5));
                }else
                    if (x <= 8.0) {
                        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor((x - 1.5))));
                        double prod = 1.0;
                        for (int i = 1; i <= n; i++) {
                            prod *= x - i;
                        }
                        return (org.apache.commons.math3.special.Gamma.logGamma1p((x - (n + 1)))) + (org.apache.commons.math3.util.FastMath.log(prod));
                    }else {
                        double sum = org.apache.commons.math3.special.Gamma.lanczos(x);
                        double tmp = (x + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
                        ret = ((((x + 0.5) * (org.apache.commons.math3.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math3.util.FastMath.log((sum / x)));
                    }

            }

        return ret;
    }

    public static double regularizedGammaP(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math3.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math3.exception.MaxCountExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math3.util.ContinuedFraction cf = new org.apache.commons.math3.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math3.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math3.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math3.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math3.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }

    public static double lanczos(final double x) {
        double sum = 0.0;
        for (int i = (org.apache.commons.math3.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
            sum = sum + ((org.apache.commons.math3.special.Gamma.LANCZOS[i]) / (x + i));
        }
        return sum + (org.apache.commons.math3.special.Gamma.LANCZOS[0]);
    }

    public static double invGamma1pm1(final double x) {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        final double ret;
        final double t = (x <= 0.5) ? x : (x - 0.5) - 0.5;
        if (t < 0.0) {
            final double a = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0) + (t * (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1));
            double b = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8;
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1) + (t * b);
            b = 1.0 + (t * b);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + (t * (a / b));
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C) + (t * c);
            if (x > 0.5) {
                ret = (t * c) / x;
            }else {
                ret = x * ((c + 0.5) + 0.5);
            }
        }else {
            double p = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6;
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0) + (t * p);
            double q = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4;
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1) + (t * q);
            q = 1.0 + (t * q);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + ((p / q) * t);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0) + (t * c);
            if (x > 0.5) {
                ret = (t / x) * ((c - 0.5) - 0.5);
            }else {
                ret = x * c;
            }
        }
        return ret;
    }

    public static double logGamma1p(final double x) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        return -(org.apache.commons.math3.util.FastMath.log1p(org.apache.commons.math3.special.Gamma.invGamma1pm1(x)));
    }

    public static double gamma(final double x) {
        final double ret;
        final double absX = org.apache.commons.math3.util.FastMath.abs(x);
        if (absX <= 20.0) {
            if (x >= 1.0) {
                double prod = 1.0;
                double t = x;
                while (t > 2.5) {
                    t = t - 1.0;
                    prod *= t;
                } 
                ret = prod / (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1((t - 1.0))));
            }else {
                double prod = x;
                double t = x;
                while (t < (-0.5)) {
                    t = t + 1.0;
                    prod *= t;
                } 
                ret = 1.0 / (prod * (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1(t))));
            }
        }else {
            final double y = (absX + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
            final double gammaAbs = ((((org.apache.commons.math3.special.Gamma.SQRT_TWO_PI) / x) * (org.apache.commons.math3.util.FastMath.pow(y, (absX + 0.5)))) * (org.apache.commons.math3.util.FastMath.exp((-y)))) * (org.apache.commons.math3.special.Gamma.lanczos(absX));
            if (x > 0.0) {
                ret = gammaAbs;
            }else {
                ret = (-(org.apache.commons.math3.util.FastMath.PI)) / ((x * (org.apache.commons.math3.util.FastMath.sin(((org.apache.commons.math3.util.FastMath.PI) * x)))) * gammaAbs);
            }
        }
        return ret;
    }
}
00:36:37.997 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:37.998 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:38.152 [pool-563-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (148 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:38.517 [pool-564-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math3.exception.NumberIsTooLargeException: 2 is larger than the maximum (1.5)
    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:363)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:161)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)
00:36:38.531 [pool-565-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (14 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[2 is larger than the maximum (1.5)]
org.apache.commons.math3.exception.NumberIsTooLargeException: 2 is larger than the maximum (1.5)    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:363)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:161)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)

00:36:38.531 [pool-562-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:38.532 [pool-562-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): 2 is larger than the maximum (1.5)]
00:36:38.532 [pool-562-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:250.
00:36:38.532 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #200
00:36:38.532 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:248 which is executed by 458 tests
68567944
00:36:38.778 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:38.952 [pool-567-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (168 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:39.244 [pool-566-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:178: error: variable ret might not have been initialized
        return ret;
               ^
00:36:39.249 [pool-566-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    public static final double LANCZOS_G = 607.0 / 128.0;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math3.util.FastMath.log((2.0 * (org.apache.commons.math3.util.FastMath.PI))));

    private static final double SQRT_TWO_PI = 2.5066282746310007;

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private static final double INV_GAMMA1P_M1_A0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_A1 = 6.247308301164655E-9;

    private static final double INV_GAMMA1P_M1_B1 = 0.203610414066807;

    private static final double INV_GAMMA1P_M1_B2 = 0.026620534842894922;

    private static final double INV_GAMMA1P_M1_B3 = 4.939449793824468E-4;

    private static final double INV_GAMMA1P_M1_B4 = -8.514194324403149E-6;

    private static final double INV_GAMMA1P_M1_B5 = -6.4304548177935305E-6;

    private static final double INV_GAMMA1P_M1_B6 = 9.926418406727737E-7;

    private static final double INV_GAMMA1P_M1_B7 = -6.077618957228252E-8;

    private static final double INV_GAMMA1P_M1_B8 = 1.9575583661463974E-10;

    private static final double INV_GAMMA1P_M1_P0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_P1 = 6.8716741130671986E-9;

    private static final double INV_GAMMA1P_M1_P2 = 6.820161668496171E-10;

    private static final double INV_GAMMA1P_M1_P3 = 4.686843322948848E-11;

    private static final double INV_GAMMA1P_M1_P4 = 1.5728330277104463E-12;

    private static final double INV_GAMMA1P_M1_P5 = -1.2494415722763663E-13;

    private static final double INV_GAMMA1P_M1_P6 = 4.343529937408594E-15;

    private static final double INV_GAMMA1P_M1_Q1 = 0.3056961078365221;

    private static final double INV_GAMMA1P_M1_Q2 = 0.054642130860422966;

    private static final double INV_GAMMA1P_M1_Q3 = 0.004956830093825887;

    private static final double INV_GAMMA1P_M1_Q4 = 2.6923694661863613E-4;

    private static final double INV_GAMMA1P_M1_C = -0.42278433509846713;

    private static final double INV_GAMMA1P_M1_C0 = 0.5772156649015329;

    private static final double INV_GAMMA1P_M1_C1 = -0.6558780715202539;

    private static final double INV_GAMMA1P_M1_C2 = -0.04200263503409524;

    private static final double INV_GAMMA1P_M1_C3 = 0.16653861138229148;

    private static final double INV_GAMMA1P_M1_C4 = -0.04219773455554433;

    private static final double INV_GAMMA1P_M1_C5 = -0.009621971527876973;

    private static final double INV_GAMMA1P_M1_C6 = 0.0072189432466631;

    private static final double INV_GAMMA1P_M1_C7 = -0.0011651675918590652;

    private static final double INV_GAMMA1P_M1_C8 = -2.1524167411495098E-4;

    private static final double INV_GAMMA1P_M1_C9 = 1.280502823881162E-4;

    private static final double INV_GAMMA1P_M1_C10 = -2.013485478078824E-5;

    private static final double INV_GAMMA1P_M1_C11 = -1.2504934821426706E-6;

    private static final double INV_GAMMA1P_M1_C12 = 1.133027231981696E-6;

    private static final double INV_GAMMA1P_M1_C13 = -2.056338416977607E-7;

    private Gamma() {
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(140).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.S_LIMIT",org.apache.commons.math3.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("x < 0.5",x < 0.5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS",org.apache.commons.math3.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.SQRT_TWO_PI",org.apache.commons.math3.special.Gamma.SQRT_TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS_G",org.apache.commons.math3.special.Gamma.LANCZOS_G);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.GAMMA",org.apache.commons.math3.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.C_LIMIT",org.apache.commons.math3.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("0.5",0.5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectionEnds();
            }
            if (runtimeAngelicValue) if (x < 0.5) {
                return (org.apache.commons.math3.special.Gamma.logGamma1p(x)) - (org.apache.commons.math3.util.FastMath.log(x));
            }else
                if (x <= 2.5) {
                    return org.apache.commons.math3.special.Gamma.logGamma1p(((x - 0.5) - 0.5));
                }else
                    if (x <= 8.0) {
                        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor((x - 1.5))));
                        double prod = 1.0;
                        for (int i = 1; i <= n; i++) {
                            prod *= x - i;
                        }
                        return (org.apache.commons.math3.special.Gamma.logGamma1p((x - (n + 1)))) + (org.apache.commons.math3.util.FastMath.log(prod));
                    }else {
                        double sum = org.apache.commons.math3.special.Gamma.lanczos(x);
                        double tmp = (x + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
                        ret = ((((x + 0.5) * (org.apache.commons.math3.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math3.util.FastMath.log((sum / x)));
                    }


        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math3.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math3.exception.MaxCountExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math3.util.ContinuedFraction cf = new org.apache.commons.math3.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math3.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math3.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math3.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math3.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }

    public static double lanczos(final double x) {
        double sum = 0.0;
        for (int i = (org.apache.commons.math3.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
            sum = sum + ((org.apache.commons.math3.special.Gamma.LANCZOS[i]) / (x + i));
        }
        return sum + (org.apache.commons.math3.special.Gamma.LANCZOS[0]);
    }

    public static double invGamma1pm1(final double x) {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        final double ret;
        final double t = (x <= 0.5) ? x : (x - 0.5) - 0.5;
        if (t < 0.0) {
            final double a = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0) + (t * (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1));
            double b = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8;
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1) + (t * b);
            b = 1.0 + (t * b);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + (t * (a / b));
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C) + (t * c);
            if (x > 0.5) {
                ret = (t * c) / x;
            }else {
                ret = x * ((c + 0.5) + 0.5);
            }
        }else {
            double p = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6;
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0) + (t * p);
            double q = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4;
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1) + (t * q);
            q = 1.0 + (t * q);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + ((p / q) * t);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0) + (t * c);
            if (x > 0.5) {
                ret = (t / x) * ((c - 0.5) - 0.5);
            }else {
                ret = x * c;
            }
        }
        return ret;
    }

    public static double logGamma1p(final double x) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        return -(org.apache.commons.math3.util.FastMath.log1p(org.apache.commons.math3.special.Gamma.invGamma1pm1(x)));
    }

    public static double gamma(final double x) {
        final double ret;
        final double absX = org.apache.commons.math3.util.FastMath.abs(x);
        if (absX <= 20.0) {
            if (x >= 1.0) {
                double prod = 1.0;
                double t = x;
                while (t > 2.5) {
                    t = t - 1.0;
                    prod *= t;
                } 
                ret = prod / (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1((t - 1.0))));
            }else {
                double prod = x;
                double t = x;
                while (t < (-0.5)) {
                    t = t + 1.0;
                    prod *= t;
                } 
                ret = 1.0 / (prod * (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1(t))));
            }
        }else {
            final double y = (absX + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
            final double gammaAbs = ((((org.apache.commons.math3.special.Gamma.SQRT_TWO_PI) / x) * (org.apache.commons.math3.util.FastMath.pow(y, (absX + 0.5)))) * (org.apache.commons.math3.util.FastMath.exp((-y)))) * (org.apache.commons.math3.special.Gamma.lanczos(absX));
            if (x > 0.0) {
                ret = gammaAbs;
            }else {
                ret = (-(org.apache.commons.math3.util.FastMath.PI)) / ((x * (org.apache.commons.math3.util.FastMath.sin(((org.apache.commons.math3.util.FastMath.PI) * x)))) * gammaAbs);
            }
        }
        return ret;
    }
}
00:36:39.250 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:39.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:39.396 [pool-569-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (141 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:39.720 [pool-570-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math3.exception.NumberIsTooLargeException: 2.5 is larger than the maximum (1.5)
    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:363)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:158)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)
00:36:39.734 [pool-571-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (13 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[2.5 is larger than the maximum (1.5)]
org.apache.commons.math3.exception.NumberIsTooLargeException: 2.5 is larger than the maximum (1.5)    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:363)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:158)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)

00:36:39.735 [pool-568-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:39.735 [pool-568-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): 2.5 is larger than the maximum (1.5)]
00:36:39.735 [pool-568-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:248.
00:36:39.735 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #201
00:36:39.735 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1346 which is executed by 460 tests
1033054629
00:36:40.040 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:40.195 [pool-573-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (149 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:41.511 [pool-574-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (24 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:41.514 [pool-575-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:41.514 [pool-572-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:41.514 [pool-572-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:41.514 [pool-572-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1346.
00:36:41.514 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #202
00:36:41.515 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1342 which is executed by 462 tests
1033054629
00:36:41.818 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:41.970 [pool-577-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (146 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:43.272 [pool-578-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:43.274 [pool-579-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:43.274 [pool-576-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:43.274 [pool-576-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:43.274 [pool-576-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1342.
00:36:43.274 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:43.420 [pool-581-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (140 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:44.723 [pool-582-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:44.725 [pool-583-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:44.725 [pool-580-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:44.725 [pool-580-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:44.725 [pool-580-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1342.
00:36:44.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #203
00:36:44.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.special.Gamma:246 which is executed by 463 tests
68567944
00:36:44.971 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:45.121 [pool-585-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (144 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:45.414 [pool-584-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:178: error: variable ret might not have been initialized
        return ret;
               ^
00:36:45.420 [pool-584-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    public static final double LANCZOS_G = 607.0 / 128.0;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (org.apache.commons.math3.util.FastMath.log((2.0 * (org.apache.commons.math3.util.FastMath.PI))));

    private static final double SQRT_TWO_PI = 2.5066282746310007;

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private static final double INV_GAMMA1P_M1_A0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_A1 = 6.247308301164655E-9;

    private static final double INV_GAMMA1P_M1_B1 = 0.203610414066807;

    private static final double INV_GAMMA1P_M1_B2 = 0.026620534842894922;

    private static final double INV_GAMMA1P_M1_B3 = 4.939449793824468E-4;

    private static final double INV_GAMMA1P_M1_B4 = -8.514194324403149E-6;

    private static final double INV_GAMMA1P_M1_B5 = -6.4304548177935305E-6;

    private static final double INV_GAMMA1P_M1_B6 = 9.926418406727737E-7;

    private static final double INV_GAMMA1P_M1_B7 = -6.077618957228252E-8;

    private static final double INV_GAMMA1P_M1_B8 = 1.9575583661463974E-10;

    private static final double INV_GAMMA1P_M1_P0 = 6.116095104481416E-9;

    private static final double INV_GAMMA1P_M1_P1 = 6.8716741130671986E-9;

    private static final double INV_GAMMA1P_M1_P2 = 6.820161668496171E-10;

    private static final double INV_GAMMA1P_M1_P3 = 4.686843322948848E-11;

    private static final double INV_GAMMA1P_M1_P4 = 1.5728330277104463E-12;

    private static final double INV_GAMMA1P_M1_P5 = -1.2494415722763663E-13;

    private static final double INV_GAMMA1P_M1_P6 = 4.343529937408594E-15;

    private static final double INV_GAMMA1P_M1_Q1 = 0.3056961078365221;

    private static final double INV_GAMMA1P_M1_Q2 = 0.054642130860422966;

    private static final double INV_GAMMA1P_M1_Q3 = 0.004956830093825887;

    private static final double INV_GAMMA1P_M1_Q4 = 2.6923694661863613E-4;

    private static final double INV_GAMMA1P_M1_C = -0.42278433509846713;

    private static final double INV_GAMMA1P_M1_C0 = 0.5772156649015329;

    private static final double INV_GAMMA1P_M1_C1 = -0.6558780715202539;

    private static final double INV_GAMMA1P_M1_C2 = -0.04200263503409524;

    private static final double INV_GAMMA1P_M1_C3 = 0.16653861138229148;

    private static final double INV_GAMMA1P_M1_C4 = -0.04219773455554433;

    private static final double INV_GAMMA1P_M1_C5 = -0.009621971527876973;

    private static final double INV_GAMMA1P_M1_C6 = 0.0072189432466631;

    private static final double INV_GAMMA1P_M1_C7 = -0.0011651675918590652;

    private static final double INV_GAMMA1P_M1_C8 = -2.1524167411495098E-4;

    private static final double INV_GAMMA1P_M1_C9 = 1.280502823881162E-4;

    private static final double INV_GAMMA1P_M1_C10 = -2.013485478078824E-5;

    private static final double INV_GAMMA1P_M1_C11 = -1.2504934821426706E-6;

    private static final double INV_GAMMA1P_M1_C12 = 1.133027231981696E-6;

    private static final double INV_GAMMA1P_M1_C13 = -2.056338416977607E-7;

    private Gamma() {
    }

    public static double logGamma(double x) {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(145).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.S_LIMIT",org.apache.commons.math3.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS",org.apache.commons.math3.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.SQRT_TWO_PI",org.apache.commons.math3.special.Gamma.SQRT_TWO_PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.LANCZOS_G",org.apache.commons.math3.special.Gamma.LANCZOS_G);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.GAMMA",org.apache.commons.math3.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.C_LIMIT",org.apache.commons.math3.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("(x <= 0.0)",(x <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectInput("org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5",org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(145).collectionEnds();
        }
        if (runtimeAngelicValue) if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x < 0.5) {
                return (org.apache.commons.math3.special.Gamma.logGamma1p(x)) - (org.apache.commons.math3.util.FastMath.log(x));
            }else
                if (x <= 2.5) {
                    return org.apache.commons.math3.special.Gamma.logGamma1p(((x - 0.5) - 0.5));
                }else
                    if (x <= 8.0) {
                        final int n = ((int) (org.apache.commons.math3.util.FastMath.floor((x - 1.5))));
                        double prod = 1.0;
                        for (int i = 1; i <= n; i++) {
                            prod *= x - i;
                        }
                        return (org.apache.commons.math3.special.Gamma.logGamma1p((x - (n + 1)))) + (org.apache.commons.math3.util.FastMath.log(prod));
                    }else {
                        double sum = org.apache.commons.math3.special.Gamma.lanczos(x);
                        double tmp = (x + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
                        ret = ((((x + 0.5) * (org.apache.commons.math3.util.FastMath.log(tmp))) - tmp) + (org.apache.commons.math3.special.Gamma.HALF_LOG_2_PI)) + (org.apache.commons.math3.util.FastMath.log((sum / x)));
                    }



        return ret;
    }

    public static double regularizedGammaP(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if (x >= (a + 1)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while ((((org.apache.commons.math3.util.FastMath.abs((an / sum))) > epsilon) && (n < maxIterations)) && (sum < (java.lang.Double.POSITIVE_INFINITY))) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math3.exception.MaxCountExceededException(maxIterations);
                    }else
                        if (java.lang.Double.isInfinite(sum)) {
                            ret = 1.0;
                        }else {
                            ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * sum;
                        }

                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) {
        return org.apache.commons.math3.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math3.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if (x < (a + 1.0)) {
                    ret = 1.0 - (org.apache.commons.math3.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math3.util.ContinuedFraction cf = new org.apache.commons.math3.util.ContinuedFraction() {
                        @java.lang.Override
                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        @java.lang.Override
                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (org.apache.commons.math3.util.FastMath.exp((((-x) + (a * (org.apache.commons.math3.util.FastMath.log(x)))) - (org.apache.commons.math3.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return (-(org.apache.commons.math3.special.Gamma.GAMMA)) - (1 / x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((org.apache.commons.math3.util.FastMath.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return (org.apache.commons.math3.special.Gamma.digamma((x + 1))) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= (org.apache.commons.math3.special.Gamma.S_LIMIT))) {
            return 1 / (x * x);
        }
        if (x >= (org.apache.commons.math3.special.Gamma.C_LIMIT)) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return (org.apache.commons.math3.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
    }

    public static double lanczos(final double x) {
        double sum = 0.0;
        for (int i = (org.apache.commons.math3.special.Gamma.LANCZOS.length) - 1; i > 0; --i) {
            sum = sum + ((org.apache.commons.math3.special.Gamma.LANCZOS[i]) / (x + i));
        }
        return sum + (org.apache.commons.math3.special.Gamma.LANCZOS[0]);
    }

    public static double invGamma1pm1(final double x) {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        final double ret;
        final double t = (x <= 0.5) ? x : (x - 0.5) - 0.5;
        if (t < 0.0) {
            final double a = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A0) + (t * (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_A1));
            double b = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B8;
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B7) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B6) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B5) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B4) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B3) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B2) + (t * b);
            b = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_B1) + (t * b);
            b = 1.0 + (t * b);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + (t * (a / b));
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C) + (t * c);
            if (x > 0.5) {
                ret = (t * c) / x;
            }else {
                ret = x * ((c + 0.5) + 0.5);
            }
        }else {
            double p = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P6;
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P5) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P4) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P3) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P2) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P1) + (t * p);
            p = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_P0) + (t * p);
            double q = org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q4;
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q3) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q2) + (t * q);
            q = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_Q1) + (t * q);
            q = 1.0 + (t * q);
            double c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C13) + ((p / q) * t);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C12) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C11) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C10) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C9) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C8) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C7) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C6) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C5) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C4) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C3) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C2) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C1) + (t * c);
            c = (org.apache.commons.math3.special.Gamma.INV_GAMMA1P_M1_C0) + (t * c);
            if (x > 0.5) {
                ret = (t / x) * ((c - 0.5) - 0.5);
            }else {
                ret = x * c;
            }
        }
        return ret;
    }

    public static double logGamma1p(final double x) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException {
        if (x < (-0.5)) {
            throw new org.apache.commons.math3.exception.NumberIsTooSmallException(x, (-0.5), true);
        }
        if (x > 1.5) {
            throw new org.apache.commons.math3.exception.NumberIsTooLargeException(x, 1.5, true);
        }
        return -(org.apache.commons.math3.util.FastMath.log1p(org.apache.commons.math3.special.Gamma.invGamma1pm1(x)));
    }

    public static double gamma(final double x) {
        final double ret;
        final double absX = org.apache.commons.math3.util.FastMath.abs(x);
        if (absX <= 20.0) {
            if (x >= 1.0) {
                double prod = 1.0;
                double t = x;
                while (t > 2.5) {
                    t = t - 1.0;
                    prod *= t;
                } 
                ret = prod / (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1((t - 1.0))));
            }else {
                double prod = x;
                double t = x;
                while (t < (-0.5)) {
                    t = t + 1.0;
                    prod *= t;
                } 
                ret = 1.0 / (prod * (1.0 + (org.apache.commons.math3.special.Gamma.invGamma1pm1(t))));
            }
        }else {
            final double y = (absX + (org.apache.commons.math3.special.Gamma.LANCZOS_G)) + 0.5;
            final double gammaAbs = ((((org.apache.commons.math3.special.Gamma.SQRT_TWO_PI) / x) * (org.apache.commons.math3.util.FastMath.pow(y, (absX + 0.5)))) * (org.apache.commons.math3.util.FastMath.exp((-y)))) * (org.apache.commons.math3.special.Gamma.lanczos(absX));
            if (x > 0.0) {
                ret = gammaAbs;
            }else {
                ret = (-(org.apache.commons.math3.util.FastMath.PI)) / ((x * (org.apache.commons.math3.util.FastMath.sin(((org.apache.commons.math3.util.FastMath.PI) * x)))) * gammaAbs);
            }
        }
        return ret;
    }
}
00:36:45.421 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:45.421 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:45.573 [pool-587-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (147 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:45.936 [pool-588-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:45.938 [pool-589-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:45.939 [pool-586-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:45.939 [pool-586-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:45.939 [pool-586-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.special.Gamma:246.
00:36:45.939 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #204
00:36:45.939 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1338 which is executed by 463 tests
1033054629
00:36:46.239 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:46.398 [pool-591-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (154 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:47.696 [pool-592-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:47.698 [pool-593-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:47.698 [pool-590-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:47.698 [pool-590-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:47.698 [pool-590-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1338.
00:36:47.698 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:47.850 [pool-595-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (147 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:49.150 [pool-596-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:49.152 [pool-597-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:49.152 [pool-594-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:49.152 [pool-594-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:49.152 [pool-594-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1338.
00:36:49.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #205
00:36:49.152 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:875 which is executed by 658 tests
1033054629
00:36:49.473 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:49.631 [pool-599-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (153 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:50.889 [pool-598-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:488: error: variable intPartB might not have been initialized
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
                                                  ^
00:36:51.737 [pool-598-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastMath {
    public static final double PI = (1.05414357E8 / 3.3554432E7) + 1.984187159361081E-9;

    public static final double E = (2850325.0 / 1048576.0) + 8.254840070411029E-8;

    static final int EXP_INT_TABLE_MAX_INDEX = 750;

    static final int EXP_INT_TABLE_LEN = (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) * 2;

    static final int LN_MANT_LEN = 1024;

    static final int EXP_FRAC_TABLE_LEN = 1025;

    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;

    private static final double LN_2_A = 0.6931470632553101;

    private static final double LN_2_B = 1.1730463525082348E-7;

    private static final double[][] LN_QUICK_COEF = new double[][]{ new double[]{ 1.0, 5.669184079525E-24 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.986821492305628E-8 }, new double[]{ -0.25, -6.663542893624021E-14 }, new double[]{ 0.19999998807907104, 1.1921056801463227E-8 }, new double[]{ -0.1666666567325592, -7.800414592973399E-9 }, new double[]{ 0.1428571343421936, 5.650007086920087E-9 }, new double[]{ -0.12502530217170715, -7.44321345601866E-11 }, new double[]{ 0.11113807559013367, 9.219544613762692E-9 } };

    private static final double[][] LN_HI_PREC_COEF = new double[][]{ new double[]{ 1.0, -6.032174644509064E-23 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.9868161777724352E-8 }, new double[]{ -0.2499999701976776, -2.957007209750105E-8 }, new double[]{ 0.19999954104423523, 1.5830993332061267E-10 }, new double[]{ -0.16624879837036133, -2.6033824355191673E-8 } };

    private static final int SINE_TABLE_LEN = 14;

    private static final double[] SINE_TABLE_A = new double[]{ +0.0, +0.1246747374534607, +0.24740394949913025, +0.366272509098053, +0.4794255495071411, +0.5850973129272461, +0.6816387176513672, +0.7675435543060303, +0.8414709568023682, +0.902267575263977, +0.9489846229553223, +0.9808930158615112, +0.9974949359893799, +0.9985313415527344 };

    private static final double[] SINE_TABLE_B = new double[]{ +0.0, -4.068233003401932E-9, +9.755392680573412E-9, +1.9987994582857286E-8, -1.0902938113007961E-8, -3.9986783938944604E-8, +4.23719669792332E-8, -5.207000323380292E-8, +2.800552834259E-8, +1.883511811213715E-8, -3.5997360512765566E-9, +4.116164446561962E-8, +5.0614674548127384E-8, -1.0129027912496858E-9 };

    private static final double[] COSINE_TABLE_A = new double[]{ +1.0, +0.9921976327896118, +0.9689123630523682, +0.9305076599121094, +0.8775825500488281, +0.8109631538391113, +0.7316888570785522, +0.6409968137741089, +0.5403022766113281, +0.4311765432357788, +0.3153223395347595, +0.19454771280288696, +0.07073719799518585, -0.05417713522911072 };

    private static final double[] COSINE_TABLE_B = new double[]{ +0.0, +3.4439717236742845E-8, +5.865827662008209E-8, -3.7999795083850525E-8, +1.184154459111628E-8, -3.43338934259355E-8, +1.1795268640216787E-8, +4.438921624363781E-8, +2.925681159240093E-8, -2.6437112632041807E-8, +2.2860509143963117E-8, -4.813899778443457E-9, +3.6725170580355583E-9, +2.0217439756338078E-10 };

    private static final double[] TANGENT_TABLE_A = new double[]{ +0.0, +0.1256551444530487, +0.25534194707870483, +0.3936265707015991, +0.5463024377822876, +0.7214844226837158, +0.9315965175628662, +1.1974215507507324, +1.5574076175689697, +2.092571258544922, +3.0095696449279785, +5.041914939880371, +14.101419448852539, -18.430862426757812 };

    private static final double[] TANGENT_TABLE_B = new double[]{ +0.0, -7.877917738262007E-9, -2.5857668567479893E-8, +5.2240336371356666E-9, +5.206150291559893E-8, +1.8307188599677033E-8, -5.7618793749770706E-8, +7.848361555046424E-8, +1.0708593250394448E-7, +1.7827257129423813E-8, +2.893485277253286E-8, +3.1660099222737955E-7, +4.983191803254889E-7, -3.356118100840571E-7 };

    private static final long[] RECIP_2PI = new long[]{ (683565275L << 32) | 2475754826L, (2131351028L << 32) | 2102212464L, (920167782L << 32) | 1326507024L, (2140428522L << 32) | 4155437400L, (1841896334L << 32) | 2425582776L, (26364858L << 32) | 2188665991L, (1065843399L << 32) | 743074255L, (3122695549L << 32) | 1269748001L, (979835913L << 32) | 2904022928L, (1315206542L << 32) | 1624559229L, (656480226L << 32) | 4018031118L, (3355321855L << 32) | 4152452611L, (4224435298L << 32) | 3598883655L, (3679297459L << 32) | 3388129901L, (3553726425L << 32) | 2811755147L, (1565126321L << 32) | 4210654302L, (3477196413L << 32) | 3801392314L, 2600392684L << 32 };

    private static final long[] PI_O_4_BITS = new long[]{ (3373259426L << 32) | 560513588L, (3301335691L << 32) | 2161908945L };

    private static final double[] EIGHTHS = new double[]{ 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625 };

    private static final double[] CBRTTWO = new double[]{ 0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994 };

    private static final long HEX_40000000 = 1073741824L;

    private static final long MASK_30BITS = (-1L) - ((org.apache.commons.math3.util.FastMath.HEX_40000000) - 1);

    private static final double TWO_POWER_52 = 4.503599627370496E15;

    private static final double F_1_3 = 1.0 / 3.0;

    private static final double F_1_5 = 1.0 / 5.0;

    private static final double F_1_7 = 1.0 / 7.0;

    private static final double F_1_9 = 1.0 / 9.0;

    private static final double F_1_11 = 1.0 / 11.0;

    private static final double F_1_13 = 1.0 / 13.0;

    private static final double F_1_15 = 1.0 / 15.0;

    private static final double F_1_17 = 1.0 / 17.0;

    private static final double F_3_4 = 3.0 / 4.0;

    private static final double F_15_16 = 15.0 / 16.0;

    private static final double F_13_14 = 13.0 / 14.0;

    private static final double F_11_12 = 11.0 / 12.0;

    private static final double F_9_10 = 9.0 / 10.0;

    private static final double F_7_8 = 7.0 / 8.0;

    private static final double F_5_6 = 5.0 / 6.0;

    private static final double F_1_2 = 1.0 / 2.0;

    private static final double F_1_4 = 1.0 / 4.0;

    private FastMath() {
    }

    private static double doubleHighPart(double d) {
        if ((d > (-(org.apache.commons.math3.util.Precision.SAFE_MIN))) && (d < (org.apache.commons.math3.util.Precision.SAFE_MIN))) {
            return d;
        }
        long xl = java.lang.Double.doubleToLongBits(d);
        xl = xl & (org.apache.commons.math3.util.FastMath.MASK_30BITS);
        return java.lang.Double.longBitsToDouble(xl);
    }

    public static double sqrt(final double a) {
        return java.lang.Math.sqrt(a);
    }

    public static double cosh(double x) {
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (org.apache.commons.math3.util.FastMath.exp((-x))) / 2.0;
        }
        double[] hiPrec = new double[2];
        if (x < 0.0) {
            x = -x;
        }
        org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
        double ya = (hiPrec[0]) + (hiPrec[1]);
        double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
        double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double yaa = (ya + temp) - temp;
        double yab = ya - yaa;
        double recip = 1.0 / ya;
        temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double recipa = (recip + temp) - temp;
        double recipb = recip - recipa;
        recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
        recipb += ((-yb) * recip) * recip;
        temp = ya + recipa;
        yb += -((temp - ya) - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -((temp - ya) - recipb);
        ya = temp;
        double result = ya + yb;
        result *= 0.5;
        return result;
    }

    public static double sinh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (-(org.apache.commons.math3.util.FastMath.exp((-x)))) / 2.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x > 0.25) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double yaa = (ya + temp) - temp;
            double yab = ya - yaa;
            double recip = 1.0 / ya;
            temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double recipa = (recip + temp) - temp;
            double recipb = recip - recipa;
            recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
            recipb += ((-yb) * recip) * recip;
            recipa = -recipa;
            recipb = -recipb;
            temp = ya + recipa;
            yb += -((temp - ya) - recipa);
            ya = temp;
            temp = ya + recipb;
            yb += -((temp - ya) - recipb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1(x, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            double temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double za = (denom + temp) - temp;
            double zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            temp = ya + ra;
            yb += -((temp - ya) - ra);
            ya = temp;
            temp = ya + rb;
            yb += -((temp - ya) - rb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double tanh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return 1.0;
        }
        if (x < (-20)) {
            return -1.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x >= 0.5) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp((x * 2.0), 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = (-1.0) + ya;
            double nb = -((na + 1.0) - ya);
            double temp = na + yb;
            nb += -((temp - na) - yb);
            na = temp;
            double da = 1.0 + ya;
            double db = -((da - 1.0) - ya);
            temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1((x * 2.0), hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = ya;
            double nb = yb;
            double da = 2.0 + ya;
            double db = -((da - 2.0) - ya);
            double temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double acosh(final double a) {
        return org.apache.commons.math3.util.FastMath.log((a + (org.apache.commons.math3.util.FastMath.sqrt(((a * a) - 1)))));
    }

    public static double asinh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAsinh;
        if (a > 0.167) {
            absAsinh = org.apache.commons.math3.util.FastMath.log(((org.apache.commons.math3.util.FastMath.sqrt(((a * a) + 1))) + a));
        }else {
            final double a2 = a * a;
            if (a > 0.097) {
                absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_17)) * (org.apache.commons.math3.util.FastMath.F_15_16)))) * (org.apache.commons.math3.util.FastMath.F_13_14)))) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
            }else
                if (a > 0.036) {
                    absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13)) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                }else
                    if (a > 0.0036) {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9)) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }else {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5)) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }


        }
        return negative ? -absAsinh : absAsinh;
    }

    public static double atanh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAtanh;
        if (a > 0.15) {
            absAtanh = 0.5 * (org.apache.commons.math3.util.FastMath.log(((1 + a) / (1 - a))));
        }else {
            final double a2 = a * a;
            if (a > 0.087) {
                absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_17)))))))))))))))));
            }else
                if (a > 0.031) {
                    absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13)))))))))))));
                }else
                    if (a > 0.003) {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9)))))))));
                    }else {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5)))));
                    }


        }
        return negative ? -absAtanh : absAtanh;
    }

    public static double signum(final double a) {
        return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a;
    }

    public static float signum(final float a) {
        return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a;
    }

    public static double nextUp(final double a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY);
    }

    public static float nextUp(final float a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY);
    }

    public static double random() {
        return java.lang.Math.random();
    }

    public static double exp(double x) {
        return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null);
    }

    private static double exp(double x, double extra, double[] hiPrec) {
        double intPartA;
        double intPartB;
        int intVal;
        if (x < 0.0) {
            intVal = ((int) (-x));
            if (intVal > 746) {
                if (hiPrec != null) {
                    hiPrec[0] = 0.0;
                    hiPrec[1] = 0.0;
                }
                return 0.0;
            }
            if (intVal > 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 40.19140625), extra, hiPrec)) / 2.85040095144011776E17;
                if (hiPrec != null) {
                    hiPrec[0] /= 2.85040095144011776E17;
                    hiPrec[1] /= 2.85040095144011776E17;
                }
                return result;
            }
            if (intVal == 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 1.494140625), extra, hiPrec)) / 4.455505956692757;
                if (hiPrec != null) {
                    hiPrec[0] /= 4.455505956692757;
                    hiPrec[1] /= 4.455505956692757;
                }
                return result;
            }
            intVal++;
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intVal = -intVal;
        }else {
            intVal = ((int) (x));
            if (intVal > 709) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
                    hiPrec[1] = 0.0;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(149).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_1_13",org.apache.commons.math3.util.FastMath.F_1_13);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_1_11",org.apache.commons.math3.util.FastMath.F_1_11);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_1_17",org.apache.commons.math3.util.FastMath.F_1_17);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_11_12",org.apache.commons.math3.util.FastMath.F_11_12);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_13_14",org.apache.commons.math3.util.FastMath.F_13_14);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_1_15",org.apache.commons.math3.util.FastMath.F_1_15);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_1_2",org.apache.commons.math3.util.FastMath.F_1_2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_15_16",org.apache.commons.math3.util.FastMath.F_15_16);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.EIGHTHS",org.apache.commons.math3.util.FastMath.EIGHTHS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_1_3",org.apache.commons.math3.util.FastMath.F_1_3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.LN_2_A",org.apache.commons.math3.util.FastMath.LN_2_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_1_4",org.apache.commons.math3.util.FastMath.F_1_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.LN_2_B",org.apache.commons.math3.util.FastMath.LN_2_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_1_5",org.apache.commons.math3.util.FastMath.F_1_5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_3_4",org.apache.commons.math3.util.FastMath.F_3_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.PI_O_4_BITS",org.apache.commons.math3.util.FastMath.PI_O_4_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_1_7",org.apache.commons.math3.util.FastMath.F_1_7);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.RECIP_2PI",org.apache.commons.math3.util.FastMath.RECIP_2PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.HEX_40000000",org.apache.commons.math3.util.FastMath.HEX_40000000);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_1_9",org.apache.commons.math3.util.FastMath.F_1_9);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_5_6",org.apache.commons.math3.util.FastMath.F_5_6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("extra",extra);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.LN_MANT_LEN",org.apache.commons.math3.util.FastMath.LN_MANT_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_7_8",org.apache.commons.math3.util.FastMath.F_7_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.MASK_30BITS",org.apache.commons.math3.util.FastMath.MASK_30BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.TWO_POWER_52",org.apache.commons.math3.util.FastMath.TWO_POWER_52);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("hiPrec",hiPrec);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.PI",org.apache.commons.math3.util.FastMath.PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_A",org.apache.commons.math3.util.FastMath.SINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.E",org.apache.commons.math3.util.FastMath.E);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_B",org.apache.commons.math3.util.FastMath.SINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",org.apache.commons.math3.util.FastMath.LN_QUICK_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.CBRTTWO",org.apache.commons.math3.util.FastMath.CBRTTWO);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.F_9_10",org.apache.commons.math3.util.FastMath.F_9_10);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(149).collectionEnds();
            }
            if (runtimeAngelicValue)
                intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];

        }
        final int intFrac = ((int) ((x - intVal) * 1024.0));
        final double fracPartA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
        final double fracPartB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
        final double epsilon = x - (intVal + (intFrac / 1024.0));
        double z = 0.04168701738764507;
        z = (z * epsilon) + 0.1666666505023083;
        z = (z * epsilon) + 0.5000000000042687;
        z = (z * epsilon) + 1.0;
        z = (z * epsilon) + (-3.940510424527919E-20);
        double tempA = intPartA * fracPartA;
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
        final double tempC = tempB + tempA;
        final double result;
        if (extra != 0.0) {
            result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
        }else {
            result = ((tempC * z) + tempB) + tempA;
        }
        if (hiPrec != null) {
            hiPrec[0] = tempA;
            hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
        }
        return result;
    }

    public static double expm1(double x) {
        return org.apache.commons.math3.util.FastMath.expm1(x, null);
    }

    private static double expm1(double x, double[] hiPrecOut) {
        if ((x != x) || (x == 0.0)) {
            return x;
        }
        if ((x <= (-1.0)) || (x >= 1.0)) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            if (x > 0.0) {
                return ((-1.0) + (hiPrec[0])) + (hiPrec[1]);
            }else {
                final double ra = (-1.0) + (hiPrec[0]);
                double rb = -((ra + 1.0) - (hiPrec[0]));
                rb += hiPrec[1];
                return ra + rb;
            }
        }
        double baseA;
        double baseB;
        double epsilon;
        boolean negative = false;
        if (x < 0.0) {
            x = -x;
            negative = true;
        }
        {
            int intFrac = ((int) (x * 1024.0));
            double tempA = (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]) - 1.0;
            double tempB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
            double temp = tempA + tempB;
            tempB = -((temp - tempA) - tempB);
            tempA = temp;
            temp = tempA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            baseA = (tempA + temp) - temp;
            baseB = tempB + (tempA - baseA);
            epsilon = x - (intFrac / 1024.0);
        }
        double zb = 0.008336750013465571;
        zb = (zb * epsilon) + 0.041666663879186654;
        zb = (zb * epsilon) + 0.16666666666745392;
        zb = (zb * epsilon) + 0.49999999999999994;
        zb = zb * epsilon;
        zb = zb * epsilon;
        double za = epsilon;
        double temp = za + zb;
        zb = -((temp - za) - zb);
        za = temp;
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        temp = (za + temp) - temp;
        zb += za - temp;
        za = temp;
        double ya = za * baseA;
        temp = ya + (za * baseB);
        double yb = -((temp - ya) - (za * baseB));
        ya = temp;
        temp = ya + (zb * baseA);
        yb += -((temp - ya) - (zb * baseA));
        ya = temp;
        temp = ya + (zb * baseB);
        yb += -((temp - ya) - (zb * baseB));
        ya = temp;
        temp = ya + baseA;
        yb += -((temp - baseA) - ya);
        ya = temp;
        temp = ya + za;
        yb += -((temp - ya) - za);
        ya = temp;
        temp = ya + baseB;
        yb += -((temp - ya) - baseB);
        ya = temp;
        temp = ya + zb;
        yb += -((temp - ya) - zb);
        ya = temp;
        if (negative) {
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            za = (denom + temp) - temp;
            zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            ya = -ra;
            yb = -rb;
        }
        if (hiPrecOut != null) {
            hiPrecOut[0] = ya;
            hiPrecOut[1] = yb;
        }
        return ya + yb;
    }

    public static double log(final double x) {
        return org.apache.commons.math3.util.FastMath.log(x, null);
    }

    private static double log(final double x, final double[] hiPrec) {
        if (x == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        long bits = java.lang.Double.doubleToLongBits(x);
        if (((bits & -9223372036854775808L) != 0) || (x != x)) {
            if (x != 0.0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NaN;
                }
                return java.lang.Double.NaN;
            }
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (hiPrec != null) {
                hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
            }
            return java.lang.Double.POSITIVE_INFINITY;
        }
        int exp = ((int) (bits >> 52)) - 1023;
        if ((bits & 9218868437227405312L) == 0) {
            if (x == 0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.NEGATIVE_INFINITY;
            }
            bits <<= 1;
            while ((bits & 4503599627370496L) == 0) {
                --exp;
                bits <<= 1;
            } 
        }
        if ((exp == (-1)) || (exp == 0)) {
            if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {
                double xa = x - 1.0;
                double xb = (xa - x) + 1.0;
                double tmp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                double aa = (xa + tmp) - tmp;
                double ab = xa - aa;
                xa = aa;
                xb = ab;
                final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[((org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 1)];
                double ya = lnCoef_last[0];
                double yb = lnCoef_last[1];
                for (int i = (org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 2; i >= 0; i--) {
                    aa = ya * xa;
                    ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                    final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i];
                    aa = ya + (lnCoef_i[0]);
                    ab = yb + (lnCoef_i[1]);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                }
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                return ya + yb;
            }
        }
        final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 4499201580859392L) >> 42))];
        final double epsilon = (bits & 4398046511103L) / ((org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L));
        double lnza = 0.0;
        double lnzb = 0.0;
        if (hiPrec != null) {
            double tmp = epsilon * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double aa = (epsilon + tmp) - tmp;
            double ab = epsilon - aa;
            double xa = aa;
            double xb = ab;
            final double numer = bits & 4398046511103L;
            final double denom = (org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L);
            aa = (numer - (xa * denom)) - (xb * denom);
            xb += aa / denom;
            final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[((org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 1)];
            double ya = lnCoef_last[0];
            double yb = lnCoef_last[1];
            for (int i = (org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 2; i >= 0; i--) {
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i];
                aa = ya + (lnCoef_i[0]);
                ab = yb + (lnCoef_i[1]);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
            }
            aa = ya * xa;
            ab = ((ya * xb) + (yb * xa)) + (yb * xb);
            lnza = aa + ab;
            lnzb = -((lnza - aa) - ab);
        }else {
            lnza = -0.16624882440418567;
            lnza = (lnza * epsilon) + 0.19999954120254515;
            lnza = (lnza * epsilon) + (-0.2499999997677497);
            lnza = (lnza * epsilon) + 0.3333333333332802;
            lnza = (lnza * epsilon) + (-0.5);
            lnza = (lnza * epsilon) + 1.0;
            lnza = lnza * epsilon;
        }
        double a = (org.apache.commons.math3.util.FastMath.LN_2_A) * exp;
        double b = 0.0;
        double c = a + (lnm[0]);
        double d = -((c - a) - (lnm[0]));
        a = c;
        b = b + d;
        c = a + lnza;
        d = -((c - a) - lnza);
        a = c;
        b = b + d;
        c = a + ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp);
        d = -((c - a) - ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp));
        a = c;
        b = b + d;
        c = a + (lnm[1]);
        d = -((c - a) - (lnm[1]));
        a = c;
        b = b + d;
        c = a + lnzb;
        d = -((c - a) - lnzb);
        a = c;
        b = b + d;
        if (hiPrec != null) {
            hiPrec[0] = a;
            hiPrec[1] = b;
        }
        return a + b;
    }

    public static double log1p(final double x) {
        if (x == (-1)) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((x > 1.0E-6) || (x < (-1.0E-6))) {
            final double xpa = 1 + x;
            final double xpb = -((xpa - 1) - x);
            final double[] hiPrec = new double[2];
            final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
            if (java.lang.Double.isInfinite(lores)) {
                return lores;
            }
            final double fx1 = xpb / xpa;
            final double epsilon = (0.5 * fx1) + 1;
            return ((epsilon * fx1) + (hiPrec[1])) + (hiPrec[0]);
        }else {
            final double y = (((x * (org.apache.commons.math3.util.FastMath.F_1_3)) - (org.apache.commons.math3.util.FastMath.F_1_2)) * x) + 1;
            return y * x;
        }
    }

    public static double log10(final double x) {
        final double[] hiPrec = new double[2];
        final double lores = org.apache.commons.math3.util.FastMath.log(x, hiPrec);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        final double tmp = (hiPrec[0]) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double lna = ((hiPrec[0]) + tmp) - tmp;
        final double lnb = ((hiPrec[0]) - lna) + (hiPrec[1]);
        final double rln10a = 0.4342944622039795;
        final double rln10b = 1.9699272335463627E-8;
        return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna);
    }

    public static double log(double base, double x) {
        return (org.apache.commons.math3.util.FastMath.log(x)) / (org.apache.commons.math3.util.FastMath.log(base));
    }

    public static double pow(double x, double y) {
        final double[] lns = new double[2];
        if (y == 0.0) {
            return 1.0;
        }
        if (x != x) {
            return x;
        }
        if (x == 0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if ((bits & -9223372036854775808L) != 0) {
                long yi = ((long) (y));
                if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return -0.0;
                }
            }
            if (y < 0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }
            if (y > 0) {
                return 0.0;
            }
            return java.lang.Double.NaN;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0.0) {
                return 0.0;
            }else {
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) > 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return -0.0;
                }
                return 0.0;
            }
            if (y > 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) < 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x < 0) {
            if ((y >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (y <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
                return org.apache.commons.math3.util.FastMath.pow((-x), y);
            }
            if (y == ((long) (y))) {
                return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow((-x), y) : -(org.apache.commons.math3.util.FastMath.pow((-x), y));
            }else {
                return java.lang.Double.NaN;
            }
        }
        double ya;
        double yb;
        if ((y < 8.0E298) && (y > (-8.0E298))) {
            double tmp1 = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            ya = (y + tmp1) - tmp1;
            yb = y - ya;
        }else {
            double tmp1 = y * 9.313225746154785E-10;
            double tmp2 = tmp1 * 9.313225746154785E-10;
            ya = (((tmp1 + tmp2) - tmp1) * (org.apache.commons.math3.util.FastMath.HEX_40000000)) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            yb = y - ya;
        }
        final double lores = org.apache.commons.math3.util.FastMath.log(x, lns);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        double lna = lns[0];
        double lnb = lns[1];
        double tmp1 = lna * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double tmp2 = (lna + tmp1) - tmp1;
        lnb += lna - tmp2;
        lna = tmp2;
        final double aa = lna * ya;
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
        lna = aa + ab;
        lnb = -((lna - aa) - ab);
        double z = 1.0 / 120.0;
        z = (z * lnb) + (1.0 / 24.0);
        z = (z * lnb) + (1.0 / 6.0);
        z = (z * lnb) + 0.5;
        z = (z * lnb) + 1.0;
        z = z * lnb;
        final double result = org.apache.commons.math3.util.FastMath.exp(lna, z, null);
        return result;
    }

    public static double pow(double d, int e) {
        if (e == 0) {
            return 1.0;
        }else
            if (e < 0) {
                e = -e;
                d = 1.0 / d;
            }

        final int splitFactor = 134217729;
        final double cd = splitFactor * d;
        final double d1High = cd - (cd - d);
        final double d1Low = d - d1High;
        double resultHigh = 1;
        double resultLow = 0;
        double d2p = d;
        double d2pHigh = d1High;
        double d2pLow = d1Low;
        while (e != 0) {
            if ((e & 1) != 0) {
                final double tmpHigh = resultHigh * d2p;
                final double cRH = splitFactor * resultHigh;
                final double rHH = cRH - (cRH - resultHigh);
                final double rHL = resultHigh - rHH;
                final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
                resultHigh = tmpHigh;
                resultLow = (resultLow * d2p) + tmpLow;
            }
            final double tmpHigh = d2pHigh * d2p;
            final double cD2pH = splitFactor * d2pHigh;
            final double d2pHH = cD2pH - (cD2pH - d2pHigh);
            final double d2pHL = d2pHigh - d2pHH;
            final double tmpLow = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow));
            final double cTmpH = splitFactor * tmpHigh;
            d2pHigh = cTmpH - (cTmpH - tmpHigh);
            d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh);
            d2p = d2pHigh + d2pLow;
            e = e >> 1;
        } 
        return resultHigh + resultLow;
    }

    private static double polySine(final double x) {
        double x2 = x * x;
        double p = 2.7553817452272217E-6;
        p = (p * x2) + (-1.9841269659586505E-4);
        p = (p * x2) + 0.008333333333329196;
        p = (p * x2) + (-0.16666666666666666);
        p = (p * x2) * x;
        return p;
    }

    private static double polyCosine(double x) {
        double x2 = x * x;
        double p = 2.479773539153719E-5;
        p = (p * x2) + (-0.0013888888689039883);
        p = (p * x2) + 0.041666666666621166;
        p = (p * x2) + (-0.49999999999999994);
        p *= x2;
        return p;
    }

    private static double sinQ(double xa, double xb) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        final double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double result;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        if (xb != 0.0) {
            t = (((costA + costB) * (cosEpsA + cosEpsB)) - ((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
            c = a + t;
            d = -((c - a) - t);
            a = c;
            b = b + d;
        }
        result = a + b;
        return result;
    }

    private static double cosQ(double xa, double xb) {
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -((a - pi2a) + xa);
        b += pi2b - xb;
        return org.apache.commons.math3.util.FastMath.sinQ(a, b);
    }

    private static double tanQ(double xa, double xb, boolean cotanFlag) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        double sina = a + b;
        double sinb = -((sina - a) - b);
        a = b = c = d = 0.0;
        t = costA * cosEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        t = (-sintA) * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB);
        b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB));
        double cosa = a + b;
        double cosb = -((cosa - a) - b);
        if (cotanFlag) {
            double tmp;
            tmp = cosa;
            cosa = sina;
            sina = tmp;
            tmp = cosb;
            cosb = sinb;
            sinb = tmp;
        }
        double est = sina / cosa;
        temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double esta = (est + temp) - temp;
        double estb = est - esta;
        temp = cosa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double cosaa = (cosa + temp) - temp;
        double cosab = cosa - cosaa;
        double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa;
        err += sinb / cosa;
        err += (((-sina) * cosb) / cosa) / cosa;
        if (xb != 0.0) {
            double xbadj = xb + ((est * est) * xb);
            if (cotanFlag) {
                xbadj = -xbadj;
            }
            err += xbadj;
        }
        return est + err;
    }

    private static void reducePayneHanek(double x, double[] result) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        inbits &= 4503599627370495L;
        inbits |= 4503599627370496L;
        exponent++;
        inbits <<= 11;
        long shpi0;
        long shpiA;
        long shpiB;
        int idx = exponent >> 6;
        int shift = exponent - (idx << 6);
        if (shift != 0) {
            shpi0 = (idx == 0) ? 0 : (org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)]) << shift;
            shpi0 |= (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) >>> (64 - shift);
            shpiA = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) >>> (64 - shift));
            shpiB = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 2)]) >>> (64 - shift));
        }else {
            shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)];
            shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx];
            shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)];
        }
        long a = inbits >>> 32;
        long b = inbits & 4294967295L;
        long c = shpiA >>> 32;
        long d = shpiA & 4294967295L;
        long ac = a * c;
        long bd = b * d;
        long bc = b * c;
        long ad = a * d;
        long prodB = bd + (ad << 32);
        long prodA = ac + (ad >>> 32);
        boolean bita = (bd & -9223372036854775808L) != 0;
        boolean bitb = (ad & 2147483648L) != 0;
        boolean bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prodB = prodB + (bc << 32);
        prodA = prodA + (bc >>> 32);
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpiB >>> 32;
        d = shpiB & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prodB += ac;
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpi0 >>> 32;
        d = shpi0 & 4294967295L;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        prodA += bd + ((bc + ad) << 32);
        int intPart = ((int) (prodA >>> 62));
        prodA <<= 2;
        prodA |= prodB >>> 62;
        prodB <<= 2;
        a = prodA >>> 32;
        b = prodA & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        long prod2B = bd + (ad << 32);
        long prod2A = ac + (ad >>> 32);
        bita = (bd & -9223372036854775808L) != 0;
        bitb = (ad & 2147483648L) != 0;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prod2B = prod2B + (bc << 32);
        prod2A = prod2A + (bc >>> 32);
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        a = prodB >>> 32;
        b = prodB & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        double tmpA = (prod2A >>> 12) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double tmpB = ((((prod2A & 4095L) << 40) + (prod2B >>> 24)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double sumA = tmpA + tmpB;
        double sumB = -((sumA - tmpA) - tmpB);
        result[0] = intPart;
        result[1] = sumA * 2.0;
        result[2] = sumB * 2.0;
    }

    public static double sin(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa;
        double xb = 0.0;
        xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (negative) {
            quadrant ^= 2;
        }
        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            case 1 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 3 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double cos(double x) {
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            xa = -xa;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 1 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            case 3 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double tan(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (xa > 1.5) {
            final double pi2a = 1.5707963267948966;
            final double pi2b = 6.123233995736766E-17;
            final double a = pi2a - xa;
            double b = -((a - pi2a) + xa);
            b += pi2b - xb;
            xa = a + b;
            xb = -((xa - a) - b);
            quadrant ^= 1;
            negative ^= true;
        }
        double result;
        if ((quadrant & 1) == 0) {
            result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false);
        }else {
            result = -(org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true));
        }
        if (negative) {
            result = -result;
        }
        return result;
    }

    public static double atan(double x) {
        return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false);
    }

    private static double atan(double xa, double xb, boolean leftPlane) {
        boolean negate = false;
        int idx;
        if (xa == 0.0) {
            return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
        }
        if (xa < 0) {
            xa = -xa;
            xb = -xb;
            negate = true;
        }
        if (xa > 1.633123935319537E16) {
            return negate ^ leftPlane ? (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2) : (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (xa < 1) {
            idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
        }else {
            final double oneOverXa = 1 / xa;
            idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
        }
        double epsA = xa - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
        double epsB = -((epsA - xa) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]));
        epsB += xb - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
        double temp = epsA + epsB;
        epsB = -((temp - epsA) - epsB);
        epsA = temp;
        temp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (xa + temp) - temp;
        double yb = (xb + xa) - ya;
        xa = ya;
        xb += yb;
        if (idx == 0) {
            final double denom = 1.0 / (1.0 + ((xa + xb) * ((org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]))));
            ya = epsA * denom;
            yb = epsB * denom;
        }else {
            double temp2 = xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
            double za = 1.0 + temp2;
            double zb = -((za - 1.0) - temp2);
            temp2 = (xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])) + (xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]));
            temp = za + temp2;
            zb += -((temp - za) - temp2);
            za = temp;
            zb += xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
            ya = epsA / za;
            temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double yaa = (ya + temp) - temp;
            final double yab = ya - yaa;
            temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double zaa = (za + temp) - temp;
            final double zab = za - zaa;
            yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;
            yb += (((-epsA) * zb) / za) / za;
            yb += epsB / za;
        }
        epsA = ya;
        epsB = yb;
        final double epsA2 = epsA * epsA;
        yb = 0.07490822288864472;
        yb = (yb * epsA2) + (-0.09088450866185192);
        yb = (yb * epsA2) + 0.11111095942313305;
        yb = (yb * epsA2) + (-0.1428571423679182);
        yb = (yb * epsA2) + 0.19999999999923582;
        yb = (yb * epsA2) + (-0.33333333333333287);
        yb = (yb * epsA2) * epsA;
        ya = epsA;
        temp = ya + yb;
        yb = -((temp - ya) - yb);
        ya = temp;
        yb += epsB / (1.0 + (epsA * epsA));
        double za = (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) + ya;
        double zb = -((za - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx])) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double result = za + zb;
        double resultb = -((result - za) - zb);
        if (leftPlane) {
            final double pia = 1.5707963267948966 * 2;
            final double pib = 6.123233995736766E-17 * 2;
            za = pia - result;
            zb = -((za - pia) + result);
            zb += pib - resultb;
            result = za + zb;
            resultb = -((result - za) - zb);
        }
        if (negate ^ leftPlane) {
            result = -result;
        }
        return result;
    }

    public static double atan2(double y, double x) {
        if ((x != x) || (y != y)) {
            return java.lang.Double.NaN;
        }
        if (y == 0) {
            final double result = x * y;
            final double invx = 1.0 / x;
            final double invy = 1.0 / y;
            if (invx == 0) {
                if (x > 0) {
                    return y;
                }else {
                    return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
                }
            }
            if ((x < 0) || (invx < 0)) {
                if ((y < 0) || (invy < 0)) {
                    return -(java.lang.Math.PI);
                }else {
                    return java.lang.Math.PI;
                }
            }else {
                return result;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((y > 0) || ((1 / y) > 0)) {
                return 0.0;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((y > 0.0) || ((1 / y) > 0.0)) {
                return java.lang.Math.PI;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -(java.lang.Math.PI);
            }
        }
        if (x == 0) {
            if ((y > 0) || ((1 / y) > 0)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
        }
        final double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return org.apache.commons.math3.util.FastMath.atan(r, 0, (x < 0));
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        final double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        final double xb = x - xa;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        final double temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        if (ra == 0) {
            ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y);
        }
        final double result = org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
        return result;
    }

    public static double asin(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == 1.0) {
            return (java.lang.Math.PI) / 2.0;
        }
        if (x == (-1.0)) {
            return (-(java.lang.Math.PI)) / 2.0;
        }
        if (x == 0.0) {
            return x;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y;
        y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        double dx = zb / (2.0 * y);
        double r = x / y;
        temp = r * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ra = (r + temp) - temp;
        double rb = r - ra;
        rb += ((((x - (ra * ya)) - (ra * yb)) - (rb * ya)) - (rb * yb)) / y;
        rb += (((-x) * dx) / y) / y;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, false);
    }

    public static double acos(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == (-1.0)) {
            return java.lang.Math.PI;
        }
        if (x == 1.0) {
            return 0.0;
        }
        if (x == 0) {
            return (java.lang.Math.PI) / 2.0;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        yb += zb / (2.0 * y);
        y = ya + yb;
        yb = -((y - ya) - yb);
        double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return (java.lang.Math.PI) / 2;
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        rb += yb / x;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
    }

    public static double cbrt(double x) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        boolean subnormal = false;
        if (exponent == (-1023)) {
            if (x == 0) {
                return x;
            }
            subnormal = true;
            x *= 1.8014398509481984E16;
            inbits = java.lang.Double.doubleToLongBits(x);
            exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        }
        if (exponent == 1024) {
            return x;
        }
        int exp3 = exponent / 3;
        double p2 = java.lang.Double.longBitsToDouble(((inbits & -9223372036854775808L) | (((long) ((exp3 + 1023) & 2047)) << 52)));
        final double mant = java.lang.Double.longBitsToDouble(((inbits & 4503599627370495L) | 4607182418800017408L));
        double est = -0.010714690733195933;
        est = (est * mant) + 0.0875862700108075;
        est = (est * mant) + (-0.3058015757857271);
        est = (est * mant) + 0.7249995199969751;
        est = (est * mant) + 0.5039018405998233;
        est *= org.apache.commons.math3.util.FastMath.CBRTTWO[((exponent % 3) + 2)];
        final double xs = x / ((p2 * p2) * p2);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        double temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (est + temp) - temp;
        double yb = est - ya;
        double za = ya * ya;
        double zb = ((ya * yb) * 2.0) + (yb * yb);
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (za + temp) - temp;
        zb += za - temp2;
        za = temp2;
        zb = ((za * yb) + (ya * zb)) + (zb * yb);
        za = za * ya;
        double na = xs - za;
        double nb = -((na - xs) + za);
        nb -= zb;
        est += (na + nb) / ((3 * est) * est);
        est *= p2;
        if (subnormal) {
            est *= 3.814697265625E-6;
        }
        return est;
    }

    public static double toRadians(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 0.01745329052209854;
        final double factb = 1.997844754509471E-9;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
        if (result == 0) {
            result = result * x;
        }
        return result;
    }

    public static double toDegrees(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 57.2957763671875;
        final double factb = 3.145894820876798E-6;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
    }

    public static int abs(final int x) {
        return x < 0 ? -x : x;
    }

    public static long abs(final long x) {
        return x < 0L ? -x : x;
    }

    public static float abs(final float x) {
        return x < 0.0F ? -x : x == 0.0F ? 0.0F : x;
    }

    public static double abs(double x) {
        return x < 0.0 ? -x : x == 0.0 ? 0.0 : x;
    }

    public static double ulp(double x) {
        if (java.lang.Double.isInfinite(x)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Double.longBitsToDouble(((java.lang.Double.doubleToLongBits(x)) ^ 1)))));
    }

    public static float ulp(float x) {
        if (java.lang.Float.isInfinite(x)) {
            return java.lang.Float.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Float.intBitsToFloat(((java.lang.Float.floatToIntBits(x)) ^ 1)))));
    }

    public static double scalb(final double d, final int n) {
        if ((n > (-1023)) && (n < 1024)) {
            return d * (java.lang.Double.longBitsToDouble((((long) (n + 1023)) << 52)));
        }
        if (((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) || (d == 0)) {
            return d;
        }
        if (n < (-2098)) {
            return d > 0 ? 0.0 : -0.0;
        }
        if (n > 2097) {
            return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        int exponent = ((int) (bits >>> 52)) & 2047;
        long mantissa = bits & 4503599627370495L;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
            }else
                if (scaledExponent > (-53)) {
                    mantissa = mantissa | (1L << 52);
                    final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Double.longBitsToDouble((sign | mantissa));
                }else {
                    return sign == 0L ? 0.0 : -0.0;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 52) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 4503599627370495L;
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }

        }
    }

    public static float scalb(final float f, final int n) {
        if ((n > (-127)) && (n < 128)) {
            return f * (java.lang.Float.intBitsToFloat(((n + 127) << 23)));
        }
        if (((java.lang.Float.isNaN(f)) || (java.lang.Float.isInfinite(f))) || (f == 0.0F)) {
            return f;
        }
        if (n < (-277)) {
            return f > 0 ? 0.0F : -0.0F;
        }
        if (n > 276) {
            return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
        }
        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        int exponent = (bits >>> 23) & 255;
        int mantissa = bits & 8388607;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
            }else
                if (scaledExponent > (-24)) {
                    mantissa = mantissa | (1 << 23);
                    final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Float.intBitsToFloat((sign | mantissa));
                }else {
                    return sign == 0 ? 0.0F : -0.0F;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 23) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 8388607;
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }

        }
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Double.NaN;
        }else
            if (d == direction) {
                return direction;
            }else
                if (java.lang.Double.isInfinite(d)) {
                    return d < 0 ? -(java.lang.Double.MAX_VALUE) : java.lang.Double.MAX_VALUE;
                }else
                    if (d == 0) {
                        return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
                    }



        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        if ((direction < d) ^ (sign == 0L)) {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) + 1)));
        }else {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) - 1)));
        }
    }

    public static float nextAfter(final float f, final double direction) {
        if ((java.lang.Double.isNaN(f)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Float.NaN;
        }else
            if (f == direction) {
                return ((float) (direction));
            }else
                if (java.lang.Float.isInfinite(f)) {
                    return f < 0.0F ? -(java.lang.Float.MAX_VALUE) : java.lang.Float.MAX_VALUE;
                }else
                    if (f == 0.0F) {
                        return direction < 0 ? -(java.lang.Float.MIN_VALUE) : java.lang.Float.MIN_VALUE;
                    }



        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        if ((direction < f) ^ (sign == 0)) {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) + 1)));
        }else {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) - 1)));
        }
    }

    public static double floor(double x) {
        long y;
        if (x != x) {
            return x;
        }
        if ((x >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
            return x;
        }
        y = ((long) (x));
        if ((x < 0) && (y != x)) {
            y--;
        }
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double ceil(double x) {
        double y;
        if (x != x) {
            return x;
        }
        y = org.apache.commons.math3.util.FastMath.floor(x);
        if (y == x) {
            return y;
        }
        y += 1.0;
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double rint(double x) {
        double y = org.apache.commons.math3.util.FastMath.floor(x);
        double d = x - y;
        if (d > 0.5) {
            if (y == (-1.0)) {
                return -0.0;
            }
            return y + 1.0;
        }
        if (d < 0.5) {
            return y;
        }
        long z = ((long) (y));
        return (z & 1) == 0 ? y : y + 1.0;
    }

    public static long round(double x) {
        return ((long) (org.apache.commons.math3.util.FastMath.floor((x + 0.5))));
    }

    public static int round(final float x) {
        return ((int) (org.apache.commons.math3.util.FastMath.floor((x + 0.5F))));
    }

    public static int min(final int a, final int b) {
        return a <= b ? a : b;
    }

    public static long min(final long a, final long b) {
        return a <= b ? a : b;
    }

    public static float min(final float a, final float b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return a;
        }
        return b;
    }

    public static double min(final double a, final double b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return a;
        }
        return b;
    }

    public static int max(final int a, final int b) {
        return a <= b ? b : a;
    }

    public static long max(final long a, final long b) {
        return a <= b ? b : a;
    }

    public static float max(final float a, final float b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return b;
        }
        return a;
    }

    public static double max(final double a, final double b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return b;
        }
        return a;
    }

    public static double hypot(final double x, final double y) {
        if ((java.lang.Double.isInfinite(x)) || (java.lang.Double.isInfinite(y))) {
            return java.lang.Double.POSITIVE_INFINITY;
        }else
            if ((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(y))) {
                return java.lang.Double.NaN;
            }else {
                final int expX = org.apache.commons.math3.util.FastMath.getExponent(x);
                final int expY = org.apache.commons.math3.util.FastMath.getExponent(y);
                if (expX > (expY + 27)) {
                    return org.apache.commons.math3.util.FastMath.abs(x);
                }else
                    if (expY > (expX + 27)) {
                        return org.apache.commons.math3.util.FastMath.abs(y);
                    }else {
                        final int middleExp = (expX + expY) / 2;
                        final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, (-middleExp));
                        final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, (-middleExp));
                        final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(((scaledX * scaledX) + (scaledY * scaledY)));
                        return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp);
                    }

            }

    }

    public static double IEEEremainder(double dividend, double divisor) {
        return java.lang.StrictMath.IEEEremainder(dividend, divisor);
    }

    public static double copySign(double magnitude, double sign) {
        long m = java.lang.Double.doubleToLongBits(magnitude);
        long s = java.lang.Double.doubleToLongBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static float copySign(float magnitude, float sign) {
        int m = java.lang.Float.floatToIntBits(magnitude);
        int s = java.lang.Float.floatToIntBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static int getExponent(final double d) {
        return ((int) (((java.lang.Double.doubleToLongBits(d)) >>> 52) & 2047)) - 1023;
    }

    public static int getExponent(final float f) {
        return (((java.lang.Float.floatToIntBits(f)) >>> 23) & 255) - 127;
    }

    public static void main(java.lang.String[] a) {
        java.io.PrintStream out = java.lang.System.out;
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "LN_MANT", org.apache.commons.math3.util.FastMath.LN_MANT_LEN, org.apache.commons.math3.util.FastMath.lnMant.LN_MANT);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);
    }

    private static class ExpIntTable {
        private static final double[] EXP_INT_TABLE_A;

        private static final double[] EXP_INT_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                final double[] tmp = new double[2];
                final double[] recip = new double[2];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX); i++) {
                    org.apache.commons.math3.util.FastMathCalc.expint(i, tmp);
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[1];
                    if (i != 0) {
                        org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[0];
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[1];
                    }
                }
            }else {
                EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA();
                EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB();
            }
        }
    }

    private static class ExpFracTable {
        private static final double[] EXP_FRAC_TABLE_A;

        private static final double[] EXP_FRAC_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                final double[] tmp = new double[2];
                final double factor = 1.0 / ((org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN) - 1);
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length); i++) {
                    org.apache.commons.math3.util.FastMathCalc.slowexp((i * factor), tmp);
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
                }
            }else {
                EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA();
                EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB();
            }
        }
    }

    private static class lnMant {
        private static final double[][] LN_MANT;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length); i++) {
                    final double d = java.lang.Double.longBitsToDouble(((((long) (i)) << 42) | 4607182418800017408L));
                    org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
                }
            }else {
                LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
            }
        }
    }

    private static class CodyWaite {
        private final int finalK;

        private final double finalRemA;

        private final double finalRemB;

        CodyWaite(double xa, double xb) {
            int k = ((int) (xa * 0.6366197723675814));
            double remA;
            double remB;
            while (true) {
                double a = (-k) * 1.570796251296997;
                remA = xa + a;
                remB = -((remA - xa) - a);
                a = (-k) * 7.549789948768648E-8;
                double b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                a = (-k) * 6.123233995736766E-17;
                b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                if (remA > 0) {
                    break;
                }
                --k;
            } 
            this.finalK = k;
            this.finalRemA = remA;
            this.finalRemB = remB;
        }

        int getK() {
            return finalK;
        }

        double getRemA() {
            return finalRemA;
        }

        double getRemB() {
            return finalRemB;
        }
    }
}
00:36:51.739 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:51.739 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #206
00:36:51.739 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:874 which is executed by 658 tests
1033054629
00:36:52.062 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:52.228 [pool-601-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (161 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:53.439 [pool-600-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:487: error: variable intPartA might not have been initialized
        double tempA = intPartA * fracPartA;
                       ^
00:36:54.117 [pool-600-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastMath {
    public static final double PI = (1.05414357E8 / 3.3554432E7) + 1.984187159361081E-9;

    public static final double E = (2850325.0 / 1048576.0) + 8.254840070411029E-8;

    static final int EXP_INT_TABLE_MAX_INDEX = 750;

    static final int EXP_INT_TABLE_LEN = (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) * 2;

    static final int LN_MANT_LEN = 1024;

    static final int EXP_FRAC_TABLE_LEN = 1025;

    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;

    private static final double LN_2_A = 0.6931470632553101;

    private static final double LN_2_B = 1.1730463525082348E-7;

    private static final double[][] LN_QUICK_COEF = new double[][]{ new double[]{ 1.0, 5.669184079525E-24 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.986821492305628E-8 }, new double[]{ -0.25, -6.663542893624021E-14 }, new double[]{ 0.19999998807907104, 1.1921056801463227E-8 }, new double[]{ -0.1666666567325592, -7.800414592973399E-9 }, new double[]{ 0.1428571343421936, 5.650007086920087E-9 }, new double[]{ -0.12502530217170715, -7.44321345601866E-11 }, new double[]{ 0.11113807559013367, 9.219544613762692E-9 } };

    private static final double[][] LN_HI_PREC_COEF = new double[][]{ new double[]{ 1.0, -6.032174644509064E-23 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.9868161777724352E-8 }, new double[]{ -0.2499999701976776, -2.957007209750105E-8 }, new double[]{ 0.19999954104423523, 1.5830993332061267E-10 }, new double[]{ -0.16624879837036133, -2.6033824355191673E-8 } };

    private static final int SINE_TABLE_LEN = 14;

    private static final double[] SINE_TABLE_A = new double[]{ +0.0, +0.1246747374534607, +0.24740394949913025, +0.366272509098053, +0.4794255495071411, +0.5850973129272461, +0.6816387176513672, +0.7675435543060303, +0.8414709568023682, +0.902267575263977, +0.9489846229553223, +0.9808930158615112, +0.9974949359893799, +0.9985313415527344 };

    private static final double[] SINE_TABLE_B = new double[]{ +0.0, -4.068233003401932E-9, +9.755392680573412E-9, +1.9987994582857286E-8, -1.0902938113007961E-8, -3.9986783938944604E-8, +4.23719669792332E-8, -5.207000323380292E-8, +2.800552834259E-8, +1.883511811213715E-8, -3.5997360512765566E-9, +4.116164446561962E-8, +5.0614674548127384E-8, -1.0129027912496858E-9 };

    private static final double[] COSINE_TABLE_A = new double[]{ +1.0, +0.9921976327896118, +0.9689123630523682, +0.9305076599121094, +0.8775825500488281, +0.8109631538391113, +0.7316888570785522, +0.6409968137741089, +0.5403022766113281, +0.4311765432357788, +0.3153223395347595, +0.19454771280288696, +0.07073719799518585, -0.05417713522911072 };

    private static final double[] COSINE_TABLE_B = new double[]{ +0.0, +3.4439717236742845E-8, +5.865827662008209E-8, -3.7999795083850525E-8, +1.184154459111628E-8, -3.43338934259355E-8, +1.1795268640216787E-8, +4.438921624363781E-8, +2.925681159240093E-8, -2.6437112632041807E-8, +2.2860509143963117E-8, -4.813899778443457E-9, +3.6725170580355583E-9, +2.0217439756338078E-10 };

    private static final double[] TANGENT_TABLE_A = new double[]{ +0.0, +0.1256551444530487, +0.25534194707870483, +0.3936265707015991, +0.5463024377822876, +0.7214844226837158, +0.9315965175628662, +1.1974215507507324, +1.5574076175689697, +2.092571258544922, +3.0095696449279785, +5.041914939880371, +14.101419448852539, -18.430862426757812 };

    private static final double[] TANGENT_TABLE_B = new double[]{ +0.0, -7.877917738262007E-9, -2.5857668567479893E-8, +5.2240336371356666E-9, +5.206150291559893E-8, +1.8307188599677033E-8, -5.7618793749770706E-8, +7.848361555046424E-8, +1.0708593250394448E-7, +1.7827257129423813E-8, +2.893485277253286E-8, +3.1660099222737955E-7, +4.983191803254889E-7, -3.356118100840571E-7 };

    private static final long[] RECIP_2PI = new long[]{ (683565275L << 32) | 2475754826L, (2131351028L << 32) | 2102212464L, (920167782L << 32) | 1326507024L, (2140428522L << 32) | 4155437400L, (1841896334L << 32) | 2425582776L, (26364858L << 32) | 2188665991L, (1065843399L << 32) | 743074255L, (3122695549L << 32) | 1269748001L, (979835913L << 32) | 2904022928L, (1315206542L << 32) | 1624559229L, (656480226L << 32) | 4018031118L, (3355321855L << 32) | 4152452611L, (4224435298L << 32) | 3598883655L, (3679297459L << 32) | 3388129901L, (3553726425L << 32) | 2811755147L, (1565126321L << 32) | 4210654302L, (3477196413L << 32) | 3801392314L, 2600392684L << 32 };

    private static final long[] PI_O_4_BITS = new long[]{ (3373259426L << 32) | 560513588L, (3301335691L << 32) | 2161908945L };

    private static final double[] EIGHTHS = new double[]{ 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625 };

    private static final double[] CBRTTWO = new double[]{ 0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994 };

    private static final long HEX_40000000 = 1073741824L;

    private static final long MASK_30BITS = (-1L) - ((org.apache.commons.math3.util.FastMath.HEX_40000000) - 1);

    private static final double TWO_POWER_52 = 4.503599627370496E15;

    private static final double F_1_3 = 1.0 / 3.0;

    private static final double F_1_5 = 1.0 / 5.0;

    private static final double F_1_7 = 1.0 / 7.0;

    private static final double F_1_9 = 1.0 / 9.0;

    private static final double F_1_11 = 1.0 / 11.0;

    private static final double F_1_13 = 1.0 / 13.0;

    private static final double F_1_15 = 1.0 / 15.0;

    private static final double F_1_17 = 1.0 / 17.0;

    private static final double F_3_4 = 3.0 / 4.0;

    private static final double F_15_16 = 15.0 / 16.0;

    private static final double F_13_14 = 13.0 / 14.0;

    private static final double F_11_12 = 11.0 / 12.0;

    private static final double F_9_10 = 9.0 / 10.0;

    private static final double F_7_8 = 7.0 / 8.0;

    private static final double F_5_6 = 5.0 / 6.0;

    private static final double F_1_2 = 1.0 / 2.0;

    private static final double F_1_4 = 1.0 / 4.0;

    private FastMath() {
    }

    private static double doubleHighPart(double d) {
        if ((d > (-(org.apache.commons.math3.util.Precision.SAFE_MIN))) && (d < (org.apache.commons.math3.util.Precision.SAFE_MIN))) {
            return d;
        }
        long xl = java.lang.Double.doubleToLongBits(d);
        xl = xl & (org.apache.commons.math3.util.FastMath.MASK_30BITS);
        return java.lang.Double.longBitsToDouble(xl);
    }

    public static double sqrt(final double a) {
        return java.lang.Math.sqrt(a);
    }

    public static double cosh(double x) {
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (org.apache.commons.math3.util.FastMath.exp((-x))) / 2.0;
        }
        double[] hiPrec = new double[2];
        if (x < 0.0) {
            x = -x;
        }
        org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
        double ya = (hiPrec[0]) + (hiPrec[1]);
        double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
        double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double yaa = (ya + temp) - temp;
        double yab = ya - yaa;
        double recip = 1.0 / ya;
        temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double recipa = (recip + temp) - temp;
        double recipb = recip - recipa;
        recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
        recipb += ((-yb) * recip) * recip;
        temp = ya + recipa;
        yb += -((temp - ya) - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -((temp - ya) - recipb);
        ya = temp;
        double result = ya + yb;
        result *= 0.5;
        return result;
    }

    public static double sinh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (-(org.apache.commons.math3.util.FastMath.exp((-x)))) / 2.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x > 0.25) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double yaa = (ya + temp) - temp;
            double yab = ya - yaa;
            double recip = 1.0 / ya;
            temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double recipa = (recip + temp) - temp;
            double recipb = recip - recipa;
            recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
            recipb += ((-yb) * recip) * recip;
            recipa = -recipa;
            recipb = -recipb;
            temp = ya + recipa;
            yb += -((temp - ya) - recipa);
            ya = temp;
            temp = ya + recipb;
            yb += -((temp - ya) - recipb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1(x, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            double temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double za = (denom + temp) - temp;
            double zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            temp = ya + ra;
            yb += -((temp - ya) - ra);
            ya = temp;
            temp = ya + rb;
            yb += -((temp - ya) - rb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double tanh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return 1.0;
        }
        if (x < (-20)) {
            return -1.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x >= 0.5) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp((x * 2.0), 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = (-1.0) + ya;
            double nb = -((na + 1.0) - ya);
            double temp = na + yb;
            nb += -((temp - na) - yb);
            na = temp;
            double da = 1.0 + ya;
            double db = -((da - 1.0) - ya);
            temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1((x * 2.0), hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = ya;
            double nb = yb;
            double da = 2.0 + ya;
            double db = -((da - 2.0) - ya);
            double temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double acosh(final double a) {
        return org.apache.commons.math3.util.FastMath.log((a + (org.apache.commons.math3.util.FastMath.sqrt(((a * a) - 1)))));
    }

    public static double asinh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAsinh;
        if (a > 0.167) {
            absAsinh = org.apache.commons.math3.util.FastMath.log(((org.apache.commons.math3.util.FastMath.sqrt(((a * a) + 1))) + a));
        }else {
            final double a2 = a * a;
            if (a > 0.097) {
                absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_17)) * (org.apache.commons.math3.util.FastMath.F_15_16)))) * (org.apache.commons.math3.util.FastMath.F_13_14)))) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
            }else
                if (a > 0.036) {
                    absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13)) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                }else
                    if (a > 0.0036) {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9)) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }else {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5)) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }


        }
        return negative ? -absAsinh : absAsinh;
    }

    public static double atanh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAtanh;
        if (a > 0.15) {
            absAtanh = 0.5 * (org.apache.commons.math3.util.FastMath.log(((1 + a) / (1 - a))));
        }else {
            final double a2 = a * a;
            if (a > 0.087) {
                absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_17)))))))))))))))));
            }else
                if (a > 0.031) {
                    absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13)))))))))))));
                }else
                    if (a > 0.003) {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9)))))))));
                    }else {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5)))));
                    }


        }
        return negative ? -absAtanh : absAtanh;
    }

    public static double signum(final double a) {
        return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a;
    }

    public static float signum(final float a) {
        return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a;
    }

    public static double nextUp(final double a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY);
    }

    public static float nextUp(final float a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY);
    }

    public static double random() {
        return java.lang.Math.random();
    }

    public static double exp(double x) {
        return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null);
    }

    private static double exp(double x, double extra, double[] hiPrec) {
        double intPartA;
        double intPartB;
        int intVal;
        if (x < 0.0) {
            intVal = ((int) (-x));
            if (intVal > 746) {
                if (hiPrec != null) {
                    hiPrec[0] = 0.0;
                    hiPrec[1] = 0.0;
                }
                return 0.0;
            }
            if (intVal > 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 40.19140625), extra, hiPrec)) / 2.85040095144011776E17;
                if (hiPrec != null) {
                    hiPrec[0] /= 2.85040095144011776E17;
                    hiPrec[1] /= 2.85040095144011776E17;
                }
                return result;
            }
            if (intVal == 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 1.494140625), extra, hiPrec)) / 4.455505956692757;
                if (hiPrec != null) {
                    hiPrec[0] /= 4.455505956692757;
                    hiPrec[1] /= 4.455505956692757;
                }
                return result;
            }
            intVal++;
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intVal = -intVal;
        }else {
            intVal = ((int) (x));
            if (intVal > 709) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
                    hiPrec[1] = 0.0;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(150).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_1_13",org.apache.commons.math3.util.FastMath.F_1_13);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_1_11",org.apache.commons.math3.util.FastMath.F_1_11);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_1_17",org.apache.commons.math3.util.FastMath.F_1_17);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_11_12",org.apache.commons.math3.util.FastMath.F_11_12);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_13_14",org.apache.commons.math3.util.FastMath.F_13_14);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_1_15",org.apache.commons.math3.util.FastMath.F_1_15);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_1_2",org.apache.commons.math3.util.FastMath.F_1_2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_15_16",org.apache.commons.math3.util.FastMath.F_15_16);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.EIGHTHS",org.apache.commons.math3.util.FastMath.EIGHTHS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_1_3",org.apache.commons.math3.util.FastMath.F_1_3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.LN_2_A",org.apache.commons.math3.util.FastMath.LN_2_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_1_4",org.apache.commons.math3.util.FastMath.F_1_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.LN_2_B",org.apache.commons.math3.util.FastMath.LN_2_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_1_5",org.apache.commons.math3.util.FastMath.F_1_5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_3_4",org.apache.commons.math3.util.FastMath.F_3_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.PI_O_4_BITS",org.apache.commons.math3.util.FastMath.PI_O_4_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_1_7",org.apache.commons.math3.util.FastMath.F_1_7);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.RECIP_2PI",org.apache.commons.math3.util.FastMath.RECIP_2PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.HEX_40000000",org.apache.commons.math3.util.FastMath.HEX_40000000);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_1_9",org.apache.commons.math3.util.FastMath.F_1_9);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_5_6",org.apache.commons.math3.util.FastMath.F_5_6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("extra",extra);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.LN_MANT_LEN",org.apache.commons.math3.util.FastMath.LN_MANT_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_7_8",org.apache.commons.math3.util.FastMath.F_7_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.MASK_30BITS",org.apache.commons.math3.util.FastMath.MASK_30BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.TWO_POWER_52",org.apache.commons.math3.util.FastMath.TWO_POWER_52);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("hiPrec",hiPrec);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.PI",org.apache.commons.math3.util.FastMath.PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_A",org.apache.commons.math3.util.FastMath.SINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.E",org.apache.commons.math3.util.FastMath.E);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_B",org.apache.commons.math3.util.FastMath.SINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",org.apache.commons.math3.util.FastMath.LN_QUICK_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.CBRTTWO",org.apache.commons.math3.util.FastMath.CBRTTWO);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.F_9_10",org.apache.commons.math3.util.FastMath.F_9_10);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(150).collectionEnds();
            }
            if (runtimeAngelicValue)
                intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];

            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
        }
        final int intFrac = ((int) ((x - intVal) * 1024.0));
        final double fracPartA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
        final double fracPartB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
        final double epsilon = x - (intVal + (intFrac / 1024.0));
        double z = 0.04168701738764507;
        z = (z * epsilon) + 0.1666666505023083;
        z = (z * epsilon) + 0.5000000000042687;
        z = (z * epsilon) + 1.0;
        z = (z * epsilon) + (-3.940510424527919E-20);
        double tempA = intPartA * fracPartA;
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
        final double tempC = tempB + tempA;
        final double result;
        if (extra != 0.0) {
            result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
        }else {
            result = ((tempC * z) + tempB) + tempA;
        }
        if (hiPrec != null) {
            hiPrec[0] = tempA;
            hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
        }
        return result;
    }

    public static double expm1(double x) {
        return org.apache.commons.math3.util.FastMath.expm1(x, null);
    }

    private static double expm1(double x, double[] hiPrecOut) {
        if ((x != x) || (x == 0.0)) {
            return x;
        }
        if ((x <= (-1.0)) || (x >= 1.0)) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            if (x > 0.0) {
                return ((-1.0) + (hiPrec[0])) + (hiPrec[1]);
            }else {
                final double ra = (-1.0) + (hiPrec[0]);
                double rb = -((ra + 1.0) - (hiPrec[0]));
                rb += hiPrec[1];
                return ra + rb;
            }
        }
        double baseA;
        double baseB;
        double epsilon;
        boolean negative = false;
        if (x < 0.0) {
            x = -x;
            negative = true;
        }
        {
            int intFrac = ((int) (x * 1024.0));
            double tempA = (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]) - 1.0;
            double tempB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
            double temp = tempA + tempB;
            tempB = -((temp - tempA) - tempB);
            tempA = temp;
            temp = tempA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            baseA = (tempA + temp) - temp;
            baseB = tempB + (tempA - baseA);
            epsilon = x - (intFrac / 1024.0);
        }
        double zb = 0.008336750013465571;
        zb = (zb * epsilon) + 0.041666663879186654;
        zb = (zb * epsilon) + 0.16666666666745392;
        zb = (zb * epsilon) + 0.49999999999999994;
        zb = zb * epsilon;
        zb = zb * epsilon;
        double za = epsilon;
        double temp = za + zb;
        zb = -((temp - za) - zb);
        za = temp;
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        temp = (za + temp) - temp;
        zb += za - temp;
        za = temp;
        double ya = za * baseA;
        temp = ya + (za * baseB);
        double yb = -((temp - ya) - (za * baseB));
        ya = temp;
        temp = ya + (zb * baseA);
        yb += -((temp - ya) - (zb * baseA));
        ya = temp;
        temp = ya + (zb * baseB);
        yb += -((temp - ya) - (zb * baseB));
        ya = temp;
        temp = ya + baseA;
        yb += -((temp - baseA) - ya);
        ya = temp;
        temp = ya + za;
        yb += -((temp - ya) - za);
        ya = temp;
        temp = ya + baseB;
        yb += -((temp - ya) - baseB);
        ya = temp;
        temp = ya + zb;
        yb += -((temp - ya) - zb);
        ya = temp;
        if (negative) {
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            za = (denom + temp) - temp;
            zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            ya = -ra;
            yb = -rb;
        }
        if (hiPrecOut != null) {
            hiPrecOut[0] = ya;
            hiPrecOut[1] = yb;
        }
        return ya + yb;
    }

    public static double log(final double x) {
        return org.apache.commons.math3.util.FastMath.log(x, null);
    }

    private static double log(final double x, final double[] hiPrec) {
        if (x == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        long bits = java.lang.Double.doubleToLongBits(x);
        if (((bits & -9223372036854775808L) != 0) || (x != x)) {
            if (x != 0.0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NaN;
                }
                return java.lang.Double.NaN;
            }
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (hiPrec != null) {
                hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
            }
            return java.lang.Double.POSITIVE_INFINITY;
        }
        int exp = ((int) (bits >> 52)) - 1023;
        if ((bits & 9218868437227405312L) == 0) {
            if (x == 0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.NEGATIVE_INFINITY;
            }
            bits <<= 1;
            while ((bits & 4503599627370496L) == 0) {
                --exp;
                bits <<= 1;
            } 
        }
        if ((exp == (-1)) || (exp == 0)) {
            if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {
                double xa = x - 1.0;
                double xb = (xa - x) + 1.0;
                double tmp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                double aa = (xa + tmp) - tmp;
                double ab = xa - aa;
                xa = aa;
                xb = ab;
                final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[((org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 1)];
                double ya = lnCoef_last[0];
                double yb = lnCoef_last[1];
                for (int i = (org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 2; i >= 0; i--) {
                    aa = ya * xa;
                    ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                    final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i];
                    aa = ya + (lnCoef_i[0]);
                    ab = yb + (lnCoef_i[1]);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                }
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                return ya + yb;
            }
        }
        final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 4499201580859392L) >> 42))];
        final double epsilon = (bits & 4398046511103L) / ((org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L));
        double lnza = 0.0;
        double lnzb = 0.0;
        if (hiPrec != null) {
            double tmp = epsilon * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double aa = (epsilon + tmp) - tmp;
            double ab = epsilon - aa;
            double xa = aa;
            double xb = ab;
            final double numer = bits & 4398046511103L;
            final double denom = (org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L);
            aa = (numer - (xa * denom)) - (xb * denom);
            xb += aa / denom;
            final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[((org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 1)];
            double ya = lnCoef_last[0];
            double yb = lnCoef_last[1];
            for (int i = (org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 2; i >= 0; i--) {
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i];
                aa = ya + (lnCoef_i[0]);
                ab = yb + (lnCoef_i[1]);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
            }
            aa = ya * xa;
            ab = ((ya * xb) + (yb * xa)) + (yb * xb);
            lnza = aa + ab;
            lnzb = -((lnza - aa) - ab);
        }else {
            lnza = -0.16624882440418567;
            lnza = (lnza * epsilon) + 0.19999954120254515;
            lnza = (lnza * epsilon) + (-0.2499999997677497);
            lnza = (lnza * epsilon) + 0.3333333333332802;
            lnza = (lnza * epsilon) + (-0.5);
            lnza = (lnza * epsilon) + 1.0;
            lnza = lnza * epsilon;
        }
        double a = (org.apache.commons.math3.util.FastMath.LN_2_A) * exp;
        double b = 0.0;
        double c = a + (lnm[0]);
        double d = -((c - a) - (lnm[0]));
        a = c;
        b = b + d;
        c = a + lnza;
        d = -((c - a) - lnza);
        a = c;
        b = b + d;
        c = a + ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp);
        d = -((c - a) - ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp));
        a = c;
        b = b + d;
        c = a + (lnm[1]);
        d = -((c - a) - (lnm[1]));
        a = c;
        b = b + d;
        c = a + lnzb;
        d = -((c - a) - lnzb);
        a = c;
        b = b + d;
        if (hiPrec != null) {
            hiPrec[0] = a;
            hiPrec[1] = b;
        }
        return a + b;
    }

    public static double log1p(final double x) {
        if (x == (-1)) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((x > 1.0E-6) || (x < (-1.0E-6))) {
            final double xpa = 1 + x;
            final double xpb = -((xpa - 1) - x);
            final double[] hiPrec = new double[2];
            final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
            if (java.lang.Double.isInfinite(lores)) {
                return lores;
            }
            final double fx1 = xpb / xpa;
            final double epsilon = (0.5 * fx1) + 1;
            return ((epsilon * fx1) + (hiPrec[1])) + (hiPrec[0]);
        }else {
            final double y = (((x * (org.apache.commons.math3.util.FastMath.F_1_3)) - (org.apache.commons.math3.util.FastMath.F_1_2)) * x) + 1;
            return y * x;
        }
    }

    public static double log10(final double x) {
        final double[] hiPrec = new double[2];
        final double lores = org.apache.commons.math3.util.FastMath.log(x, hiPrec);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        final double tmp = (hiPrec[0]) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double lna = ((hiPrec[0]) + tmp) - tmp;
        final double lnb = ((hiPrec[0]) - lna) + (hiPrec[1]);
        final double rln10a = 0.4342944622039795;
        final double rln10b = 1.9699272335463627E-8;
        return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna);
    }

    public static double log(double base, double x) {
        return (org.apache.commons.math3.util.FastMath.log(x)) / (org.apache.commons.math3.util.FastMath.log(base));
    }

    public static double pow(double x, double y) {
        final double[] lns = new double[2];
        if (y == 0.0) {
            return 1.0;
        }
        if (x != x) {
            return x;
        }
        if (x == 0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if ((bits & -9223372036854775808L) != 0) {
                long yi = ((long) (y));
                if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return -0.0;
                }
            }
            if (y < 0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }
            if (y > 0) {
                return 0.0;
            }
            return java.lang.Double.NaN;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0.0) {
                return 0.0;
            }else {
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) > 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return -0.0;
                }
                return 0.0;
            }
            if (y > 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) < 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x < 0) {
            if ((y >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (y <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
                return org.apache.commons.math3.util.FastMath.pow((-x), y);
            }
            if (y == ((long) (y))) {
                return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow((-x), y) : -(org.apache.commons.math3.util.FastMath.pow((-x), y));
            }else {
                return java.lang.Double.NaN;
            }
        }
        double ya;
        double yb;
        if ((y < 8.0E298) && (y > (-8.0E298))) {
            double tmp1 = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            ya = (y + tmp1) - tmp1;
            yb = y - ya;
        }else {
            double tmp1 = y * 9.313225746154785E-10;
            double tmp2 = tmp1 * 9.313225746154785E-10;
            ya = (((tmp1 + tmp2) - tmp1) * (org.apache.commons.math3.util.FastMath.HEX_40000000)) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            yb = y - ya;
        }
        final double lores = org.apache.commons.math3.util.FastMath.log(x, lns);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        double lna = lns[0];
        double lnb = lns[1];
        double tmp1 = lna * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double tmp2 = (lna + tmp1) - tmp1;
        lnb += lna - tmp2;
        lna = tmp2;
        final double aa = lna * ya;
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
        lna = aa + ab;
        lnb = -((lna - aa) - ab);
        double z = 1.0 / 120.0;
        z = (z * lnb) + (1.0 / 24.0);
        z = (z * lnb) + (1.0 / 6.0);
        z = (z * lnb) + 0.5;
        z = (z * lnb) + 1.0;
        z = z * lnb;
        final double result = org.apache.commons.math3.util.FastMath.exp(lna, z, null);
        return result;
    }

    public static double pow(double d, int e) {
        if (e == 0) {
            return 1.0;
        }else
            if (e < 0) {
                e = -e;
                d = 1.0 / d;
            }

        final int splitFactor = 134217729;
        final double cd = splitFactor * d;
        final double d1High = cd - (cd - d);
        final double d1Low = d - d1High;
        double resultHigh = 1;
        double resultLow = 0;
        double d2p = d;
        double d2pHigh = d1High;
        double d2pLow = d1Low;
        while (e != 0) {
            if ((e & 1) != 0) {
                final double tmpHigh = resultHigh * d2p;
                final double cRH = splitFactor * resultHigh;
                final double rHH = cRH - (cRH - resultHigh);
                final double rHL = resultHigh - rHH;
                final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
                resultHigh = tmpHigh;
                resultLow = (resultLow * d2p) + tmpLow;
            }
            final double tmpHigh = d2pHigh * d2p;
            final double cD2pH = splitFactor * d2pHigh;
            final double d2pHH = cD2pH - (cD2pH - d2pHigh);
            final double d2pHL = d2pHigh - d2pHH;
            final double tmpLow = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow));
            final double cTmpH = splitFactor * tmpHigh;
            d2pHigh = cTmpH - (cTmpH - tmpHigh);
            d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh);
            d2p = d2pHigh + d2pLow;
            e = e >> 1;
        } 
        return resultHigh + resultLow;
    }

    private static double polySine(final double x) {
        double x2 = x * x;
        double p = 2.7553817452272217E-6;
        p = (p * x2) + (-1.9841269659586505E-4);
        p = (p * x2) + 0.008333333333329196;
        p = (p * x2) + (-0.16666666666666666);
        p = (p * x2) * x;
        return p;
    }

    private static double polyCosine(double x) {
        double x2 = x * x;
        double p = 2.479773539153719E-5;
        p = (p * x2) + (-0.0013888888689039883);
        p = (p * x2) + 0.041666666666621166;
        p = (p * x2) + (-0.49999999999999994);
        p *= x2;
        return p;
    }

    private static double sinQ(double xa, double xb) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        final double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double result;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        if (xb != 0.0) {
            t = (((costA + costB) * (cosEpsA + cosEpsB)) - ((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
            c = a + t;
            d = -((c - a) - t);
            a = c;
            b = b + d;
        }
        result = a + b;
        return result;
    }

    private static double cosQ(double xa, double xb) {
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -((a - pi2a) + xa);
        b += pi2b - xb;
        return org.apache.commons.math3.util.FastMath.sinQ(a, b);
    }

    private static double tanQ(double xa, double xb, boolean cotanFlag) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        double sina = a + b;
        double sinb = -((sina - a) - b);
        a = b = c = d = 0.0;
        t = costA * cosEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        t = (-sintA) * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB);
        b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB));
        double cosa = a + b;
        double cosb = -((cosa - a) - b);
        if (cotanFlag) {
            double tmp;
            tmp = cosa;
            cosa = sina;
            sina = tmp;
            tmp = cosb;
            cosb = sinb;
            sinb = tmp;
        }
        double est = sina / cosa;
        temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double esta = (est + temp) - temp;
        double estb = est - esta;
        temp = cosa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double cosaa = (cosa + temp) - temp;
        double cosab = cosa - cosaa;
        double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa;
        err += sinb / cosa;
        err += (((-sina) * cosb) / cosa) / cosa;
        if (xb != 0.0) {
            double xbadj = xb + ((est * est) * xb);
            if (cotanFlag) {
                xbadj = -xbadj;
            }
            err += xbadj;
        }
        return est + err;
    }

    private static void reducePayneHanek(double x, double[] result) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        inbits &= 4503599627370495L;
        inbits |= 4503599627370496L;
        exponent++;
        inbits <<= 11;
        long shpi0;
        long shpiA;
        long shpiB;
        int idx = exponent >> 6;
        int shift = exponent - (idx << 6);
        if (shift != 0) {
            shpi0 = (idx == 0) ? 0 : (org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)]) << shift;
            shpi0 |= (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) >>> (64 - shift);
            shpiA = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) >>> (64 - shift));
            shpiB = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 2)]) >>> (64 - shift));
        }else {
            shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)];
            shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx];
            shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)];
        }
        long a = inbits >>> 32;
        long b = inbits & 4294967295L;
        long c = shpiA >>> 32;
        long d = shpiA & 4294967295L;
        long ac = a * c;
        long bd = b * d;
        long bc = b * c;
        long ad = a * d;
        long prodB = bd + (ad << 32);
        long prodA = ac + (ad >>> 32);
        boolean bita = (bd & -9223372036854775808L) != 0;
        boolean bitb = (ad & 2147483648L) != 0;
        boolean bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prodB = prodB + (bc << 32);
        prodA = prodA + (bc >>> 32);
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpiB >>> 32;
        d = shpiB & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prodB += ac;
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpi0 >>> 32;
        d = shpi0 & 4294967295L;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        prodA += bd + ((bc + ad) << 32);
        int intPart = ((int) (prodA >>> 62));
        prodA <<= 2;
        prodA |= prodB >>> 62;
        prodB <<= 2;
        a = prodA >>> 32;
        b = prodA & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        long prod2B = bd + (ad << 32);
        long prod2A = ac + (ad >>> 32);
        bita = (bd & -9223372036854775808L) != 0;
        bitb = (ad & 2147483648L) != 0;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prod2B = prod2B + (bc << 32);
        prod2A = prod2A + (bc >>> 32);
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        a = prodB >>> 32;
        b = prodB & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        double tmpA = (prod2A >>> 12) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double tmpB = ((((prod2A & 4095L) << 40) + (prod2B >>> 24)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double sumA = tmpA + tmpB;
        double sumB = -((sumA - tmpA) - tmpB);
        result[0] = intPart;
        result[1] = sumA * 2.0;
        result[2] = sumB * 2.0;
    }

    public static double sin(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa;
        double xb = 0.0;
        xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (negative) {
            quadrant ^= 2;
        }
        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            case 1 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 3 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double cos(double x) {
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            xa = -xa;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 1 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            case 3 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double tan(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (xa > 1.5) {
            final double pi2a = 1.5707963267948966;
            final double pi2b = 6.123233995736766E-17;
            final double a = pi2a - xa;
            double b = -((a - pi2a) + xa);
            b += pi2b - xb;
            xa = a + b;
            xb = -((xa - a) - b);
            quadrant ^= 1;
            negative ^= true;
        }
        double result;
        if ((quadrant & 1) == 0) {
            result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false);
        }else {
            result = -(org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true));
        }
        if (negative) {
            result = -result;
        }
        return result;
    }

    public static double atan(double x) {
        return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false);
    }

    private static double atan(double xa, double xb, boolean leftPlane) {
        boolean negate = false;
        int idx;
        if (xa == 0.0) {
            return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
        }
        if (xa < 0) {
            xa = -xa;
            xb = -xb;
            negate = true;
        }
        if (xa > 1.633123935319537E16) {
            return negate ^ leftPlane ? (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2) : (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (xa < 1) {
            idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
        }else {
            final double oneOverXa = 1 / xa;
            idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
        }
        double epsA = xa - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
        double epsB = -((epsA - xa) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]));
        epsB += xb - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
        double temp = epsA + epsB;
        epsB = -((temp - epsA) - epsB);
        epsA = temp;
        temp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (xa + temp) - temp;
        double yb = (xb + xa) - ya;
        xa = ya;
        xb += yb;
        if (idx == 0) {
            final double denom = 1.0 / (1.0 + ((xa + xb) * ((org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]))));
            ya = epsA * denom;
            yb = epsB * denom;
        }else {
            double temp2 = xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
            double za = 1.0 + temp2;
            double zb = -((za - 1.0) - temp2);
            temp2 = (xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])) + (xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]));
            temp = za + temp2;
            zb += -((temp - za) - temp2);
            za = temp;
            zb += xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
            ya = epsA / za;
            temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double yaa = (ya + temp) - temp;
            final double yab = ya - yaa;
            temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double zaa = (za + temp) - temp;
            final double zab = za - zaa;
            yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;
            yb += (((-epsA) * zb) / za) / za;
            yb += epsB / za;
        }
        epsA = ya;
        epsB = yb;
        final double epsA2 = epsA * epsA;
        yb = 0.07490822288864472;
        yb = (yb * epsA2) + (-0.09088450866185192);
        yb = (yb * epsA2) + 0.11111095942313305;
        yb = (yb * epsA2) + (-0.1428571423679182);
        yb = (yb * epsA2) + 0.19999999999923582;
        yb = (yb * epsA2) + (-0.33333333333333287);
        yb = (yb * epsA2) * epsA;
        ya = epsA;
        temp = ya + yb;
        yb = -((temp - ya) - yb);
        ya = temp;
        yb += epsB / (1.0 + (epsA * epsA));
        double za = (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) + ya;
        double zb = -((za - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx])) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double result = za + zb;
        double resultb = -((result - za) - zb);
        if (leftPlane) {
            final double pia = 1.5707963267948966 * 2;
            final double pib = 6.123233995736766E-17 * 2;
            za = pia - result;
            zb = -((za - pia) + result);
            zb += pib - resultb;
            result = za + zb;
            resultb = -((result - za) - zb);
        }
        if (negate ^ leftPlane) {
            result = -result;
        }
        return result;
    }

    public static double atan2(double y, double x) {
        if ((x != x) || (y != y)) {
            return java.lang.Double.NaN;
        }
        if (y == 0) {
            final double result = x * y;
            final double invx = 1.0 / x;
            final double invy = 1.0 / y;
            if (invx == 0) {
                if (x > 0) {
                    return y;
                }else {
                    return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
                }
            }
            if ((x < 0) || (invx < 0)) {
                if ((y < 0) || (invy < 0)) {
                    return -(java.lang.Math.PI);
                }else {
                    return java.lang.Math.PI;
                }
            }else {
                return result;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((y > 0) || ((1 / y) > 0)) {
                return 0.0;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((y > 0.0) || ((1 / y) > 0.0)) {
                return java.lang.Math.PI;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -(java.lang.Math.PI);
            }
        }
        if (x == 0) {
            if ((y > 0) || ((1 / y) > 0)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
        }
        final double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return org.apache.commons.math3.util.FastMath.atan(r, 0, (x < 0));
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        final double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        final double xb = x - xa;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        final double temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        if (ra == 0) {
            ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y);
        }
        final double result = org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
        return result;
    }

    public static double asin(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == 1.0) {
            return (java.lang.Math.PI) / 2.0;
        }
        if (x == (-1.0)) {
            return (-(java.lang.Math.PI)) / 2.0;
        }
        if (x == 0.0) {
            return x;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y;
        y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        double dx = zb / (2.0 * y);
        double r = x / y;
        temp = r * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ra = (r + temp) - temp;
        double rb = r - ra;
        rb += ((((x - (ra * ya)) - (ra * yb)) - (rb * ya)) - (rb * yb)) / y;
        rb += (((-x) * dx) / y) / y;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, false);
    }

    public static double acos(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == (-1.0)) {
            return java.lang.Math.PI;
        }
        if (x == 1.0) {
            return 0.0;
        }
        if (x == 0) {
            return (java.lang.Math.PI) / 2.0;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        yb += zb / (2.0 * y);
        y = ya + yb;
        yb = -((y - ya) - yb);
        double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return (java.lang.Math.PI) / 2;
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        rb += yb / x;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
    }

    public static double cbrt(double x) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        boolean subnormal = false;
        if (exponent == (-1023)) {
            if (x == 0) {
                return x;
            }
            subnormal = true;
            x *= 1.8014398509481984E16;
            inbits = java.lang.Double.doubleToLongBits(x);
            exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        }
        if (exponent == 1024) {
            return x;
        }
        int exp3 = exponent / 3;
        double p2 = java.lang.Double.longBitsToDouble(((inbits & -9223372036854775808L) | (((long) ((exp3 + 1023) & 2047)) << 52)));
        final double mant = java.lang.Double.longBitsToDouble(((inbits & 4503599627370495L) | 4607182418800017408L));
        double est = -0.010714690733195933;
        est = (est * mant) + 0.0875862700108075;
        est = (est * mant) + (-0.3058015757857271);
        est = (est * mant) + 0.7249995199969751;
        est = (est * mant) + 0.5039018405998233;
        est *= org.apache.commons.math3.util.FastMath.CBRTTWO[((exponent % 3) + 2)];
        final double xs = x / ((p2 * p2) * p2);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        double temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (est + temp) - temp;
        double yb = est - ya;
        double za = ya * ya;
        double zb = ((ya * yb) * 2.0) + (yb * yb);
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (za + temp) - temp;
        zb += za - temp2;
        za = temp2;
        zb = ((za * yb) + (ya * zb)) + (zb * yb);
        za = za * ya;
        double na = xs - za;
        double nb = -((na - xs) + za);
        nb -= zb;
        est += (na + nb) / ((3 * est) * est);
        est *= p2;
        if (subnormal) {
            est *= 3.814697265625E-6;
        }
        return est;
    }

    public static double toRadians(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 0.01745329052209854;
        final double factb = 1.997844754509471E-9;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
        if (result == 0) {
            result = result * x;
        }
        return result;
    }

    public static double toDegrees(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 57.2957763671875;
        final double factb = 3.145894820876798E-6;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
    }

    public static int abs(final int x) {
        return x < 0 ? -x : x;
    }

    public static long abs(final long x) {
        return x < 0L ? -x : x;
    }

    public static float abs(final float x) {
        return x < 0.0F ? -x : x == 0.0F ? 0.0F : x;
    }

    public static double abs(double x) {
        return x < 0.0 ? -x : x == 0.0 ? 0.0 : x;
    }

    public static double ulp(double x) {
        if (java.lang.Double.isInfinite(x)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Double.longBitsToDouble(((java.lang.Double.doubleToLongBits(x)) ^ 1)))));
    }

    public static float ulp(float x) {
        if (java.lang.Float.isInfinite(x)) {
            return java.lang.Float.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Float.intBitsToFloat(((java.lang.Float.floatToIntBits(x)) ^ 1)))));
    }

    public static double scalb(final double d, final int n) {
        if ((n > (-1023)) && (n < 1024)) {
            return d * (java.lang.Double.longBitsToDouble((((long) (n + 1023)) << 52)));
        }
        if (((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) || (d == 0)) {
            return d;
        }
        if (n < (-2098)) {
            return d > 0 ? 0.0 : -0.0;
        }
        if (n > 2097) {
            return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        int exponent = ((int) (bits >>> 52)) & 2047;
        long mantissa = bits & 4503599627370495L;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
            }else
                if (scaledExponent > (-53)) {
                    mantissa = mantissa | (1L << 52);
                    final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Double.longBitsToDouble((sign | mantissa));
                }else {
                    return sign == 0L ? 0.0 : -0.0;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 52) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 4503599627370495L;
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }

        }
    }

    public static float scalb(final float f, final int n) {
        if ((n > (-127)) && (n < 128)) {
            return f * (java.lang.Float.intBitsToFloat(((n + 127) << 23)));
        }
        if (((java.lang.Float.isNaN(f)) || (java.lang.Float.isInfinite(f))) || (f == 0.0F)) {
            return f;
        }
        if (n < (-277)) {
            return f > 0 ? 0.0F : -0.0F;
        }
        if (n > 276) {
            return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
        }
        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        int exponent = (bits >>> 23) & 255;
        int mantissa = bits & 8388607;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
            }else
                if (scaledExponent > (-24)) {
                    mantissa = mantissa | (1 << 23);
                    final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Float.intBitsToFloat((sign | mantissa));
                }else {
                    return sign == 0 ? 0.0F : -0.0F;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 23) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 8388607;
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }

        }
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Double.NaN;
        }else
            if (d == direction) {
                return direction;
            }else
                if (java.lang.Double.isInfinite(d)) {
                    return d < 0 ? -(java.lang.Double.MAX_VALUE) : java.lang.Double.MAX_VALUE;
                }else
                    if (d == 0) {
                        return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
                    }



        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        if ((direction < d) ^ (sign == 0L)) {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) + 1)));
        }else {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) - 1)));
        }
    }

    public static float nextAfter(final float f, final double direction) {
        if ((java.lang.Double.isNaN(f)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Float.NaN;
        }else
            if (f == direction) {
                return ((float) (direction));
            }else
                if (java.lang.Float.isInfinite(f)) {
                    return f < 0.0F ? -(java.lang.Float.MAX_VALUE) : java.lang.Float.MAX_VALUE;
                }else
                    if (f == 0.0F) {
                        return direction < 0 ? -(java.lang.Float.MIN_VALUE) : java.lang.Float.MIN_VALUE;
                    }



        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        if ((direction < f) ^ (sign == 0)) {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) + 1)));
        }else {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) - 1)));
        }
    }

    public static double floor(double x) {
        long y;
        if (x != x) {
            return x;
        }
        if ((x >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
            return x;
        }
        y = ((long) (x));
        if ((x < 0) && (y != x)) {
            y--;
        }
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double ceil(double x) {
        double y;
        if (x != x) {
            return x;
        }
        y = org.apache.commons.math3.util.FastMath.floor(x);
        if (y == x) {
            return y;
        }
        y += 1.0;
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double rint(double x) {
        double y = org.apache.commons.math3.util.FastMath.floor(x);
        double d = x - y;
        if (d > 0.5) {
            if (y == (-1.0)) {
                return -0.0;
            }
            return y + 1.0;
        }
        if (d < 0.5) {
            return y;
        }
        long z = ((long) (y));
        return (z & 1) == 0 ? y : y + 1.0;
    }

    public static long round(double x) {
        return ((long) (org.apache.commons.math3.util.FastMath.floor((x + 0.5))));
    }

    public static int round(final float x) {
        return ((int) (org.apache.commons.math3.util.FastMath.floor((x + 0.5F))));
    }

    public static int min(final int a, final int b) {
        return a <= b ? a : b;
    }

    public static long min(final long a, final long b) {
        return a <= b ? a : b;
    }

    public static float min(final float a, final float b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return a;
        }
        return b;
    }

    public static double min(final double a, final double b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return a;
        }
        return b;
    }

    public static int max(final int a, final int b) {
        return a <= b ? b : a;
    }

    public static long max(final long a, final long b) {
        return a <= b ? b : a;
    }

    public static float max(final float a, final float b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return b;
        }
        return a;
    }

    public static double max(final double a, final double b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return b;
        }
        return a;
    }

    public static double hypot(final double x, final double y) {
        if ((java.lang.Double.isInfinite(x)) || (java.lang.Double.isInfinite(y))) {
            return java.lang.Double.POSITIVE_INFINITY;
        }else
            if ((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(y))) {
                return java.lang.Double.NaN;
            }else {
                final int expX = org.apache.commons.math3.util.FastMath.getExponent(x);
                final int expY = org.apache.commons.math3.util.FastMath.getExponent(y);
                if (expX > (expY + 27)) {
                    return org.apache.commons.math3.util.FastMath.abs(x);
                }else
                    if (expY > (expX + 27)) {
                        return org.apache.commons.math3.util.FastMath.abs(y);
                    }else {
                        final int middleExp = (expX + expY) / 2;
                        final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, (-middleExp));
                        final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, (-middleExp));
                        final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(((scaledX * scaledX) + (scaledY * scaledY)));
                        return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp);
                    }

            }

    }

    public static double IEEEremainder(double dividend, double divisor) {
        return java.lang.StrictMath.IEEEremainder(dividend, divisor);
    }

    public static double copySign(double magnitude, double sign) {
        long m = java.lang.Double.doubleToLongBits(magnitude);
        long s = java.lang.Double.doubleToLongBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static float copySign(float magnitude, float sign) {
        int m = java.lang.Float.floatToIntBits(magnitude);
        int s = java.lang.Float.floatToIntBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static int getExponent(final double d) {
        return ((int) (((java.lang.Double.doubleToLongBits(d)) >>> 52) & 2047)) - 1023;
    }

    public static int getExponent(final float f) {
        return (((java.lang.Float.floatToIntBits(f)) >>> 23) & 255) - 127;
    }

    public static void main(java.lang.String[] a) {
        java.io.PrintStream out = java.lang.System.out;
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "LN_MANT", org.apache.commons.math3.util.FastMath.LN_MANT_LEN, org.apache.commons.math3.util.FastMath.lnMant.LN_MANT);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);
    }

    private static class ExpIntTable {
        private static final double[] EXP_INT_TABLE_A;

        private static final double[] EXP_INT_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                final double[] tmp = new double[2];
                final double[] recip = new double[2];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX); i++) {
                    org.apache.commons.math3.util.FastMathCalc.expint(i, tmp);
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[1];
                    if (i != 0) {
                        org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[0];
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[1];
                    }
                }
            }else {
                EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA();
                EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB();
            }
        }
    }

    private static class ExpFracTable {
        private static final double[] EXP_FRAC_TABLE_A;

        private static final double[] EXP_FRAC_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                final double[] tmp = new double[2];
                final double factor = 1.0 / ((org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN) - 1);
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length); i++) {
                    org.apache.commons.math3.util.FastMathCalc.slowexp((i * factor), tmp);
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
                }
            }else {
                EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA();
                EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB();
            }
        }
    }

    private static class lnMant {
        private static final double[][] LN_MANT;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length); i++) {
                    final double d = java.lang.Double.longBitsToDouble(((((long) (i)) << 42) | 4607182418800017408L));
                    org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
                }
            }else {
                LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
            }
        }
    }

    private static class CodyWaite {
        private final int finalK;

        private final double finalRemA;

        private final double finalRemB;

        CodyWaite(double xa, double xb) {
            int k = ((int) (xa * 0.6366197723675814));
            double remA;
            double remB;
            while (true) {
                double a = (-k) * 1.570796251296997;
                remA = xa + a;
                remB = -((remA - xa) - a);
                a = (-k) * 7.549789948768648E-8;
                double b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                a = (-k) * 6.123233995736766E-17;
                b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                if (remA > 0) {
                    break;
                }
                --k;
            } 
            this.finalK = k;
            this.finalRemA = remA;
            this.finalRemB = remB;
        }

        int getK() {
            return finalK;
        }

        double getRemA() {
            return finalRemA;
        }

        double getRemB() {
            return finalRemB;
        }
    }
}
00:36:54.119 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:54.119 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #207
00:36:54.119 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:866 which is executed by 664 tests
1033054629
00:36:54.418 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:54.574 [pool-603-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (150 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:55.892 [pool-604-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:55.894 [pool-605-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:55.894 [pool-602-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:55.894 [pool-602-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:55.894 [pool-602-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:866.
00:36:55.894 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:56.048 [pool-607-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (148 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:57.350 [pool-608-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:57.351 [pool-609-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:57.352 [pool-606-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:57.352 [pool-606-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:36:57.352 [pool-606-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:866.
00:36:57.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #208
00:36:57.352 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:864 which is executed by 664 tests
1033054629
00:36:57.653 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:36:57.808 [pool-611-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (149 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:36:59.066 [pool-610-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:468: error: variable intVal might not have been initialized
            if (intVal > 709) {
                ^
00:36:59.960 [pool-610-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastMath {
    public static final double PI = (1.05414357E8 / 3.3554432E7) + 1.984187159361081E-9;

    public static final double E = (2850325.0 / 1048576.0) + 8.254840070411029E-8;

    static final int EXP_INT_TABLE_MAX_INDEX = 750;

    static final int EXP_INT_TABLE_LEN = (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) * 2;

    static final int LN_MANT_LEN = 1024;

    static final int EXP_FRAC_TABLE_LEN = 1025;

    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;

    private static final double LN_2_A = 0.6931470632553101;

    private static final double LN_2_B = 1.1730463525082348E-7;

    private static final double[][] LN_QUICK_COEF = new double[][]{ new double[]{ 1.0, 5.669184079525E-24 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.986821492305628E-8 }, new double[]{ -0.25, -6.663542893624021E-14 }, new double[]{ 0.19999998807907104, 1.1921056801463227E-8 }, new double[]{ -0.1666666567325592, -7.800414592973399E-9 }, new double[]{ 0.1428571343421936, 5.650007086920087E-9 }, new double[]{ -0.12502530217170715, -7.44321345601866E-11 }, new double[]{ 0.11113807559013367, 9.219544613762692E-9 } };

    private static final double[][] LN_HI_PREC_COEF = new double[][]{ new double[]{ 1.0, -6.032174644509064E-23 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.9868161777724352E-8 }, new double[]{ -0.2499999701976776, -2.957007209750105E-8 }, new double[]{ 0.19999954104423523, 1.5830993332061267E-10 }, new double[]{ -0.16624879837036133, -2.6033824355191673E-8 } };

    private static final int SINE_TABLE_LEN = 14;

    private static final double[] SINE_TABLE_A = new double[]{ +0.0, +0.1246747374534607, +0.24740394949913025, +0.366272509098053, +0.4794255495071411, +0.5850973129272461, +0.6816387176513672, +0.7675435543060303, +0.8414709568023682, +0.902267575263977, +0.9489846229553223, +0.9808930158615112, +0.9974949359893799, +0.9985313415527344 };

    private static final double[] SINE_TABLE_B = new double[]{ +0.0, -4.068233003401932E-9, +9.755392680573412E-9, +1.9987994582857286E-8, -1.0902938113007961E-8, -3.9986783938944604E-8, +4.23719669792332E-8, -5.207000323380292E-8, +2.800552834259E-8, +1.883511811213715E-8, -3.5997360512765566E-9, +4.116164446561962E-8, +5.0614674548127384E-8, -1.0129027912496858E-9 };

    private static final double[] COSINE_TABLE_A = new double[]{ +1.0, +0.9921976327896118, +0.9689123630523682, +0.9305076599121094, +0.8775825500488281, +0.8109631538391113, +0.7316888570785522, +0.6409968137741089, +0.5403022766113281, +0.4311765432357788, +0.3153223395347595, +0.19454771280288696, +0.07073719799518585, -0.05417713522911072 };

    private static final double[] COSINE_TABLE_B = new double[]{ +0.0, +3.4439717236742845E-8, +5.865827662008209E-8, -3.7999795083850525E-8, +1.184154459111628E-8, -3.43338934259355E-8, +1.1795268640216787E-8, +4.438921624363781E-8, +2.925681159240093E-8, -2.6437112632041807E-8, +2.2860509143963117E-8, -4.813899778443457E-9, +3.6725170580355583E-9, +2.0217439756338078E-10 };

    private static final double[] TANGENT_TABLE_A = new double[]{ +0.0, +0.1256551444530487, +0.25534194707870483, +0.3936265707015991, +0.5463024377822876, +0.7214844226837158, +0.9315965175628662, +1.1974215507507324, +1.5574076175689697, +2.092571258544922, +3.0095696449279785, +5.041914939880371, +14.101419448852539, -18.430862426757812 };

    private static final double[] TANGENT_TABLE_B = new double[]{ +0.0, -7.877917738262007E-9, -2.5857668567479893E-8, +5.2240336371356666E-9, +5.206150291559893E-8, +1.8307188599677033E-8, -5.7618793749770706E-8, +7.848361555046424E-8, +1.0708593250394448E-7, +1.7827257129423813E-8, +2.893485277253286E-8, +3.1660099222737955E-7, +4.983191803254889E-7, -3.356118100840571E-7 };

    private static final long[] RECIP_2PI = new long[]{ (683565275L << 32) | 2475754826L, (2131351028L << 32) | 2102212464L, (920167782L << 32) | 1326507024L, (2140428522L << 32) | 4155437400L, (1841896334L << 32) | 2425582776L, (26364858L << 32) | 2188665991L, (1065843399L << 32) | 743074255L, (3122695549L << 32) | 1269748001L, (979835913L << 32) | 2904022928L, (1315206542L << 32) | 1624559229L, (656480226L << 32) | 4018031118L, (3355321855L << 32) | 4152452611L, (4224435298L << 32) | 3598883655L, (3679297459L << 32) | 3388129901L, (3553726425L << 32) | 2811755147L, (1565126321L << 32) | 4210654302L, (3477196413L << 32) | 3801392314L, 2600392684L << 32 };

    private static final long[] PI_O_4_BITS = new long[]{ (3373259426L << 32) | 560513588L, (3301335691L << 32) | 2161908945L };

    private static final double[] EIGHTHS = new double[]{ 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625 };

    private static final double[] CBRTTWO = new double[]{ 0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994 };

    private static final long HEX_40000000 = 1073741824L;

    private static final long MASK_30BITS = (-1L) - ((org.apache.commons.math3.util.FastMath.HEX_40000000) - 1);

    private static final double TWO_POWER_52 = 4.503599627370496E15;

    private static final double F_1_3 = 1.0 / 3.0;

    private static final double F_1_5 = 1.0 / 5.0;

    private static final double F_1_7 = 1.0 / 7.0;

    private static final double F_1_9 = 1.0 / 9.0;

    private static final double F_1_11 = 1.0 / 11.0;

    private static final double F_1_13 = 1.0 / 13.0;

    private static final double F_1_15 = 1.0 / 15.0;

    private static final double F_1_17 = 1.0 / 17.0;

    private static final double F_3_4 = 3.0 / 4.0;

    private static final double F_15_16 = 15.0 / 16.0;

    private static final double F_13_14 = 13.0 / 14.0;

    private static final double F_11_12 = 11.0 / 12.0;

    private static final double F_9_10 = 9.0 / 10.0;

    private static final double F_7_8 = 7.0 / 8.0;

    private static final double F_5_6 = 5.0 / 6.0;

    private static final double F_1_2 = 1.0 / 2.0;

    private static final double F_1_4 = 1.0 / 4.0;

    private FastMath() {
    }

    private static double doubleHighPart(double d) {
        if ((d > (-(org.apache.commons.math3.util.Precision.SAFE_MIN))) && (d < (org.apache.commons.math3.util.Precision.SAFE_MIN))) {
            return d;
        }
        long xl = java.lang.Double.doubleToLongBits(d);
        xl = xl & (org.apache.commons.math3.util.FastMath.MASK_30BITS);
        return java.lang.Double.longBitsToDouble(xl);
    }

    public static double sqrt(final double a) {
        return java.lang.Math.sqrt(a);
    }

    public static double cosh(double x) {
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (org.apache.commons.math3.util.FastMath.exp((-x))) / 2.0;
        }
        double[] hiPrec = new double[2];
        if (x < 0.0) {
            x = -x;
        }
        org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
        double ya = (hiPrec[0]) + (hiPrec[1]);
        double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
        double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double yaa = (ya + temp) - temp;
        double yab = ya - yaa;
        double recip = 1.0 / ya;
        temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double recipa = (recip + temp) - temp;
        double recipb = recip - recipa;
        recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
        recipb += ((-yb) * recip) * recip;
        temp = ya + recipa;
        yb += -((temp - ya) - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -((temp - ya) - recipb);
        ya = temp;
        double result = ya + yb;
        result *= 0.5;
        return result;
    }

    public static double sinh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (-(org.apache.commons.math3.util.FastMath.exp((-x)))) / 2.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x > 0.25) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double yaa = (ya + temp) - temp;
            double yab = ya - yaa;
            double recip = 1.0 / ya;
            temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double recipa = (recip + temp) - temp;
            double recipb = recip - recipa;
            recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
            recipb += ((-yb) * recip) * recip;
            recipa = -recipa;
            recipb = -recipb;
            temp = ya + recipa;
            yb += -((temp - ya) - recipa);
            ya = temp;
            temp = ya + recipb;
            yb += -((temp - ya) - recipb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1(x, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            double temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double za = (denom + temp) - temp;
            double zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            temp = ya + ra;
            yb += -((temp - ya) - ra);
            ya = temp;
            temp = ya + rb;
            yb += -((temp - ya) - rb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double tanh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return 1.0;
        }
        if (x < (-20)) {
            return -1.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x >= 0.5) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp((x * 2.0), 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = (-1.0) + ya;
            double nb = -((na + 1.0) - ya);
            double temp = na + yb;
            nb += -((temp - na) - yb);
            na = temp;
            double da = 1.0 + ya;
            double db = -((da - 1.0) - ya);
            temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1((x * 2.0), hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = ya;
            double nb = yb;
            double da = 2.0 + ya;
            double db = -((da - 2.0) - ya);
            double temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double acosh(final double a) {
        return org.apache.commons.math3.util.FastMath.log((a + (org.apache.commons.math3.util.FastMath.sqrt(((a * a) - 1)))));
    }

    public static double asinh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAsinh;
        if (a > 0.167) {
            absAsinh = org.apache.commons.math3.util.FastMath.log(((org.apache.commons.math3.util.FastMath.sqrt(((a * a) + 1))) + a));
        }else {
            final double a2 = a * a;
            if (a > 0.097) {
                absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_17)) * (org.apache.commons.math3.util.FastMath.F_15_16)))) * (org.apache.commons.math3.util.FastMath.F_13_14)))) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
            }else
                if (a > 0.036) {
                    absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13)) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                }else
                    if (a > 0.0036) {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9)) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }else {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5)) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }


        }
        return negative ? -absAsinh : absAsinh;
    }

    public static double atanh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAtanh;
        if (a > 0.15) {
            absAtanh = 0.5 * (org.apache.commons.math3.util.FastMath.log(((1 + a) / (1 - a))));
        }else {
            final double a2 = a * a;
            if (a > 0.087) {
                absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_17)))))))))))))))));
            }else
                if (a > 0.031) {
                    absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13)))))))))))));
                }else
                    if (a > 0.003) {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9)))))))));
                    }else {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5)))));
                    }


        }
        return negative ? -absAtanh : absAtanh;
    }

    public static double signum(final double a) {
        return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a;
    }

    public static float signum(final float a) {
        return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a;
    }

    public static double nextUp(final double a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY);
    }

    public static float nextUp(final float a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY);
    }

    public static double random() {
        return java.lang.Math.random();
    }

    public static double exp(double x) {
        return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null);
    }

    private static double exp(double x, double extra, double[] hiPrec) {
        double intPartA;
        double intPartB;
        int intVal;
        if (x < 0.0) {
            intVal = ((int) (-x));
            if (intVal > 746) {
                if (hiPrec != null) {
                    hiPrec[0] = 0.0;
                    hiPrec[1] = 0.0;
                }
                return 0.0;
            }
            if (intVal > 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 40.19140625), extra, hiPrec)) / 2.85040095144011776E17;
                if (hiPrec != null) {
                    hiPrec[0] /= 2.85040095144011776E17;
                    hiPrec[1] /= 2.85040095144011776E17;
                }
                return result;
            }
            if (intVal == 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 1.494140625), extra, hiPrec)) / 4.455505956692757;
                if (hiPrec != null) {
                    hiPrec[0] /= 4.455505956692757;
                    hiPrec[1] /= 4.455505956692757;
                }
                return result;
            }
            intVal++;
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intVal = -intVal;
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(153).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_1_13",org.apache.commons.math3.util.FastMath.F_1_13);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_1_11",org.apache.commons.math3.util.FastMath.F_1_11);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_1_17",org.apache.commons.math3.util.FastMath.F_1_17);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_11_12",org.apache.commons.math3.util.FastMath.F_11_12);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_13_14",org.apache.commons.math3.util.FastMath.F_13_14);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_1_15",org.apache.commons.math3.util.FastMath.F_1_15);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_1_2",org.apache.commons.math3.util.FastMath.F_1_2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_15_16",org.apache.commons.math3.util.FastMath.F_15_16);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.EIGHTHS",org.apache.commons.math3.util.FastMath.EIGHTHS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_1_3",org.apache.commons.math3.util.FastMath.F_1_3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.LN_2_A",org.apache.commons.math3.util.FastMath.LN_2_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_1_4",org.apache.commons.math3.util.FastMath.F_1_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.LN_2_B",org.apache.commons.math3.util.FastMath.LN_2_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_1_5",org.apache.commons.math3.util.FastMath.F_1_5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_3_4",org.apache.commons.math3.util.FastMath.F_3_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.PI_O_4_BITS",org.apache.commons.math3.util.FastMath.PI_O_4_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_1_7",org.apache.commons.math3.util.FastMath.F_1_7);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.RECIP_2PI",org.apache.commons.math3.util.FastMath.RECIP_2PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.HEX_40000000",org.apache.commons.math3.util.FastMath.HEX_40000000);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_1_9",org.apache.commons.math3.util.FastMath.F_1_9);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_5_6",org.apache.commons.math3.util.FastMath.F_5_6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("extra",extra);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.LN_MANT_LEN",org.apache.commons.math3.util.FastMath.LN_MANT_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_7_8",org.apache.commons.math3.util.FastMath.F_7_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.MASK_30BITS",org.apache.commons.math3.util.FastMath.MASK_30BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.TWO_POWER_52",org.apache.commons.math3.util.FastMath.TWO_POWER_52);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("hiPrec",hiPrec);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.PI",org.apache.commons.math3.util.FastMath.PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_A",org.apache.commons.math3.util.FastMath.SINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.E",org.apache.commons.math3.util.FastMath.E);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_B",org.apache.commons.math3.util.FastMath.SINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",org.apache.commons.math3.util.FastMath.LN_QUICK_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.CBRTTWO",org.apache.commons.math3.util.FastMath.CBRTTWO);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.F_9_10",org.apache.commons.math3.util.FastMath.F_9_10);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(153).collectionEnds();
            }
            if (runtimeAngelicValue)
                intVal = ((int) (x));

            if (intVal > 709) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
                    hiPrec[1] = 0.0;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
        }
        final int intFrac = ((int) ((x - intVal) * 1024.0));
        final double fracPartA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
        final double fracPartB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
        final double epsilon = x - (intVal + (intFrac / 1024.0));
        double z = 0.04168701738764507;
        z = (z * epsilon) + 0.1666666505023083;
        z = (z * epsilon) + 0.5000000000042687;
        z = (z * epsilon) + 1.0;
        z = (z * epsilon) + (-3.940510424527919E-20);
        double tempA = intPartA * fracPartA;
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
        final double tempC = tempB + tempA;
        final double result;
        if (extra != 0.0) {
            result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
        }else {
            result = ((tempC * z) + tempB) + tempA;
        }
        if (hiPrec != null) {
            hiPrec[0] = tempA;
            hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
        }
        return result;
    }

    public static double expm1(double x) {
        return org.apache.commons.math3.util.FastMath.expm1(x, null);
    }

    private static double expm1(double x, double[] hiPrecOut) {
        if ((x != x) || (x == 0.0)) {
            return x;
        }
        if ((x <= (-1.0)) || (x >= 1.0)) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            if (x > 0.0) {
                return ((-1.0) + (hiPrec[0])) + (hiPrec[1]);
            }else {
                final double ra = (-1.0) + (hiPrec[0]);
                double rb = -((ra + 1.0) - (hiPrec[0]));
                rb += hiPrec[1];
                return ra + rb;
            }
        }
        double baseA;
        double baseB;
        double epsilon;
        boolean negative = false;
        if (x < 0.0) {
            x = -x;
            negative = true;
        }
        {
            int intFrac = ((int) (x * 1024.0));
            double tempA = (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]) - 1.0;
            double tempB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
            double temp = tempA + tempB;
            tempB = -((temp - tempA) - tempB);
            tempA = temp;
            temp = tempA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            baseA = (tempA + temp) - temp;
            baseB = tempB + (tempA - baseA);
            epsilon = x - (intFrac / 1024.0);
        }
        double zb = 0.008336750013465571;
        zb = (zb * epsilon) + 0.041666663879186654;
        zb = (zb * epsilon) + 0.16666666666745392;
        zb = (zb * epsilon) + 0.49999999999999994;
        zb = zb * epsilon;
        zb = zb * epsilon;
        double za = epsilon;
        double temp = za + zb;
        zb = -((temp - za) - zb);
        za = temp;
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        temp = (za + temp) - temp;
        zb += za - temp;
        za = temp;
        double ya = za * baseA;
        temp = ya + (za * baseB);
        double yb = -((temp - ya) - (za * baseB));
        ya = temp;
        temp = ya + (zb * baseA);
        yb += -((temp - ya) - (zb * baseA));
        ya = temp;
        temp = ya + (zb * baseB);
        yb += -((temp - ya) - (zb * baseB));
        ya = temp;
        temp = ya + baseA;
        yb += -((temp - baseA) - ya);
        ya = temp;
        temp = ya + za;
        yb += -((temp - ya) - za);
        ya = temp;
        temp = ya + baseB;
        yb += -((temp - ya) - baseB);
        ya = temp;
        temp = ya + zb;
        yb += -((temp - ya) - zb);
        ya = temp;
        if (negative) {
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            za = (denom + temp) - temp;
            zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            ya = -ra;
            yb = -rb;
        }
        if (hiPrecOut != null) {
            hiPrecOut[0] = ya;
            hiPrecOut[1] = yb;
        }
        return ya + yb;
    }

    public static double log(final double x) {
        return org.apache.commons.math3.util.FastMath.log(x, null);
    }

    private static double log(final double x, final double[] hiPrec) {
        if (x == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        long bits = java.lang.Double.doubleToLongBits(x);
        if (((bits & -9223372036854775808L) != 0) || (x != x)) {
            if (x != 0.0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NaN;
                }
                return java.lang.Double.NaN;
            }
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (hiPrec != null) {
                hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
            }
            return java.lang.Double.POSITIVE_INFINITY;
        }
        int exp = ((int) (bits >> 52)) - 1023;
        if ((bits & 9218868437227405312L) == 0) {
            if (x == 0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.NEGATIVE_INFINITY;
            }
            bits <<= 1;
            while ((bits & 4503599627370496L) == 0) {
                --exp;
                bits <<= 1;
            } 
        }
        if ((exp == (-1)) || (exp == 0)) {
            if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {
                double xa = x - 1.0;
                double xb = (xa - x) + 1.0;
                double tmp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                double aa = (xa + tmp) - tmp;
                double ab = xa - aa;
                xa = aa;
                xb = ab;
                final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[((org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 1)];
                double ya = lnCoef_last[0];
                double yb = lnCoef_last[1];
                for (int i = (org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 2; i >= 0; i--) {
                    aa = ya * xa;
                    ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                    final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i];
                    aa = ya + (lnCoef_i[0]);
                    ab = yb + (lnCoef_i[1]);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                }
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                return ya + yb;
            }
        }
        final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 4499201580859392L) >> 42))];
        final double epsilon = (bits & 4398046511103L) / ((org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L));
        double lnza = 0.0;
        double lnzb = 0.0;
        if (hiPrec != null) {
            double tmp = epsilon * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double aa = (epsilon + tmp) - tmp;
            double ab = epsilon - aa;
            double xa = aa;
            double xb = ab;
            final double numer = bits & 4398046511103L;
            final double denom = (org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L);
            aa = (numer - (xa * denom)) - (xb * denom);
            xb += aa / denom;
            final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[((org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 1)];
            double ya = lnCoef_last[0];
            double yb = lnCoef_last[1];
            for (int i = (org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 2; i >= 0; i--) {
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i];
                aa = ya + (lnCoef_i[0]);
                ab = yb + (lnCoef_i[1]);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
            }
            aa = ya * xa;
            ab = ((ya * xb) + (yb * xa)) + (yb * xb);
            lnza = aa + ab;
            lnzb = -((lnza - aa) - ab);
        }else {
            lnza = -0.16624882440418567;
            lnza = (lnza * epsilon) + 0.19999954120254515;
            lnza = (lnza * epsilon) + (-0.2499999997677497);
            lnza = (lnza * epsilon) + 0.3333333333332802;
            lnza = (lnza * epsilon) + (-0.5);
            lnza = (lnza * epsilon) + 1.0;
            lnza = lnza * epsilon;
        }
        double a = (org.apache.commons.math3.util.FastMath.LN_2_A) * exp;
        double b = 0.0;
        double c = a + (lnm[0]);
        double d = -((c - a) - (lnm[0]));
        a = c;
        b = b + d;
        c = a + lnza;
        d = -((c - a) - lnza);
        a = c;
        b = b + d;
        c = a + ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp);
        d = -((c - a) - ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp));
        a = c;
        b = b + d;
        c = a + (lnm[1]);
        d = -((c - a) - (lnm[1]));
        a = c;
        b = b + d;
        c = a + lnzb;
        d = -((c - a) - lnzb);
        a = c;
        b = b + d;
        if (hiPrec != null) {
            hiPrec[0] = a;
            hiPrec[1] = b;
        }
        return a + b;
    }

    public static double log1p(final double x) {
        if (x == (-1)) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((x > 1.0E-6) || (x < (-1.0E-6))) {
            final double xpa = 1 + x;
            final double xpb = -((xpa - 1) - x);
            final double[] hiPrec = new double[2];
            final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
            if (java.lang.Double.isInfinite(lores)) {
                return lores;
            }
            final double fx1 = xpb / xpa;
            final double epsilon = (0.5 * fx1) + 1;
            return ((epsilon * fx1) + (hiPrec[1])) + (hiPrec[0]);
        }else {
            final double y = (((x * (org.apache.commons.math3.util.FastMath.F_1_3)) - (org.apache.commons.math3.util.FastMath.F_1_2)) * x) + 1;
            return y * x;
        }
    }

    public static double log10(final double x) {
        final double[] hiPrec = new double[2];
        final double lores = org.apache.commons.math3.util.FastMath.log(x, hiPrec);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        final double tmp = (hiPrec[0]) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double lna = ((hiPrec[0]) + tmp) - tmp;
        final double lnb = ((hiPrec[0]) - lna) + (hiPrec[1]);
        final double rln10a = 0.4342944622039795;
        final double rln10b = 1.9699272335463627E-8;
        return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna);
    }

    public static double log(double base, double x) {
        return (org.apache.commons.math3.util.FastMath.log(x)) / (org.apache.commons.math3.util.FastMath.log(base));
    }

    public static double pow(double x, double y) {
        final double[] lns = new double[2];
        if (y == 0.0) {
            return 1.0;
        }
        if (x != x) {
            return x;
        }
        if (x == 0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if ((bits & -9223372036854775808L) != 0) {
                long yi = ((long) (y));
                if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return -0.0;
                }
            }
            if (y < 0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }
            if (y > 0) {
                return 0.0;
            }
            return java.lang.Double.NaN;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0.0) {
                return 0.0;
            }else {
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) > 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return -0.0;
                }
                return 0.0;
            }
            if (y > 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) < 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x < 0) {
            if ((y >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (y <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
                return org.apache.commons.math3.util.FastMath.pow((-x), y);
            }
            if (y == ((long) (y))) {
                return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow((-x), y) : -(org.apache.commons.math3.util.FastMath.pow((-x), y));
            }else {
                return java.lang.Double.NaN;
            }
        }
        double ya;
        double yb;
        if ((y < 8.0E298) && (y > (-8.0E298))) {
            double tmp1 = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            ya = (y + tmp1) - tmp1;
            yb = y - ya;
        }else {
            double tmp1 = y * 9.313225746154785E-10;
            double tmp2 = tmp1 * 9.313225746154785E-10;
            ya = (((tmp1 + tmp2) - tmp1) * (org.apache.commons.math3.util.FastMath.HEX_40000000)) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            yb = y - ya;
        }
        final double lores = org.apache.commons.math3.util.FastMath.log(x, lns);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        double lna = lns[0];
        double lnb = lns[1];
        double tmp1 = lna * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double tmp2 = (lna + tmp1) - tmp1;
        lnb += lna - tmp2;
        lna = tmp2;
        final double aa = lna * ya;
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
        lna = aa + ab;
        lnb = -((lna - aa) - ab);
        double z = 1.0 / 120.0;
        z = (z * lnb) + (1.0 / 24.0);
        z = (z * lnb) + (1.0 / 6.0);
        z = (z * lnb) + 0.5;
        z = (z * lnb) + 1.0;
        z = z * lnb;
        final double result = org.apache.commons.math3.util.FastMath.exp(lna, z, null);
        return result;
    }

    public static double pow(double d, int e) {
        if (e == 0) {
            return 1.0;
        }else
            if (e < 0) {
                e = -e;
                d = 1.0 / d;
            }

        final int splitFactor = 134217729;
        final double cd = splitFactor * d;
        final double d1High = cd - (cd - d);
        final double d1Low = d - d1High;
        double resultHigh = 1;
        double resultLow = 0;
        double d2p = d;
        double d2pHigh = d1High;
        double d2pLow = d1Low;
        while (e != 0) {
            if ((e & 1) != 0) {
                final double tmpHigh = resultHigh * d2p;
                final double cRH = splitFactor * resultHigh;
                final double rHH = cRH - (cRH - resultHigh);
                final double rHL = resultHigh - rHH;
                final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
                resultHigh = tmpHigh;
                resultLow = (resultLow * d2p) + tmpLow;
            }
            final double tmpHigh = d2pHigh * d2p;
            final double cD2pH = splitFactor * d2pHigh;
            final double d2pHH = cD2pH - (cD2pH - d2pHigh);
            final double d2pHL = d2pHigh - d2pHH;
            final double tmpLow = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow));
            final double cTmpH = splitFactor * tmpHigh;
            d2pHigh = cTmpH - (cTmpH - tmpHigh);
            d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh);
            d2p = d2pHigh + d2pLow;
            e = e >> 1;
        } 
        return resultHigh + resultLow;
    }

    private static double polySine(final double x) {
        double x2 = x * x;
        double p = 2.7553817452272217E-6;
        p = (p * x2) + (-1.9841269659586505E-4);
        p = (p * x2) + 0.008333333333329196;
        p = (p * x2) + (-0.16666666666666666);
        p = (p * x2) * x;
        return p;
    }

    private static double polyCosine(double x) {
        double x2 = x * x;
        double p = 2.479773539153719E-5;
        p = (p * x2) + (-0.0013888888689039883);
        p = (p * x2) + 0.041666666666621166;
        p = (p * x2) + (-0.49999999999999994);
        p *= x2;
        return p;
    }

    private static double sinQ(double xa, double xb) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        final double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double result;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        if (xb != 0.0) {
            t = (((costA + costB) * (cosEpsA + cosEpsB)) - ((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
            c = a + t;
            d = -((c - a) - t);
            a = c;
            b = b + d;
        }
        result = a + b;
        return result;
    }

    private static double cosQ(double xa, double xb) {
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -((a - pi2a) + xa);
        b += pi2b - xb;
        return org.apache.commons.math3.util.FastMath.sinQ(a, b);
    }

    private static double tanQ(double xa, double xb, boolean cotanFlag) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        double sina = a + b;
        double sinb = -((sina - a) - b);
        a = b = c = d = 0.0;
        t = costA * cosEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        t = (-sintA) * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB);
        b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB));
        double cosa = a + b;
        double cosb = -((cosa - a) - b);
        if (cotanFlag) {
            double tmp;
            tmp = cosa;
            cosa = sina;
            sina = tmp;
            tmp = cosb;
            cosb = sinb;
            sinb = tmp;
        }
        double est = sina / cosa;
        temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double esta = (est + temp) - temp;
        double estb = est - esta;
        temp = cosa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double cosaa = (cosa + temp) - temp;
        double cosab = cosa - cosaa;
        double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa;
        err += sinb / cosa;
        err += (((-sina) * cosb) / cosa) / cosa;
        if (xb != 0.0) {
            double xbadj = xb + ((est * est) * xb);
            if (cotanFlag) {
                xbadj = -xbadj;
            }
            err += xbadj;
        }
        return est + err;
    }

    private static void reducePayneHanek(double x, double[] result) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        inbits &= 4503599627370495L;
        inbits |= 4503599627370496L;
        exponent++;
        inbits <<= 11;
        long shpi0;
        long shpiA;
        long shpiB;
        int idx = exponent >> 6;
        int shift = exponent - (idx << 6);
        if (shift != 0) {
            shpi0 = (idx == 0) ? 0 : (org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)]) << shift;
            shpi0 |= (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) >>> (64 - shift);
            shpiA = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) >>> (64 - shift));
            shpiB = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 2)]) >>> (64 - shift));
        }else {
            shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)];
            shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx];
            shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)];
        }
        long a = inbits >>> 32;
        long b = inbits & 4294967295L;
        long c = shpiA >>> 32;
        long d = shpiA & 4294967295L;
        long ac = a * c;
        long bd = b * d;
        long bc = b * c;
        long ad = a * d;
        long prodB = bd + (ad << 32);
        long prodA = ac + (ad >>> 32);
        boolean bita = (bd & -9223372036854775808L) != 0;
        boolean bitb = (ad & 2147483648L) != 0;
        boolean bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prodB = prodB + (bc << 32);
        prodA = prodA + (bc >>> 32);
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpiB >>> 32;
        d = shpiB & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prodB += ac;
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpi0 >>> 32;
        d = shpi0 & 4294967295L;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        prodA += bd + ((bc + ad) << 32);
        int intPart = ((int) (prodA >>> 62));
        prodA <<= 2;
        prodA |= prodB >>> 62;
        prodB <<= 2;
        a = prodA >>> 32;
        b = prodA & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        long prod2B = bd + (ad << 32);
        long prod2A = ac + (ad >>> 32);
        bita = (bd & -9223372036854775808L) != 0;
        bitb = (ad & 2147483648L) != 0;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prod2B = prod2B + (bc << 32);
        prod2A = prod2A + (bc >>> 32);
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        a = prodB >>> 32;
        b = prodB & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        double tmpA = (prod2A >>> 12) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double tmpB = ((((prod2A & 4095L) << 40) + (prod2B >>> 24)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double sumA = tmpA + tmpB;
        double sumB = -((sumA - tmpA) - tmpB);
        result[0] = intPart;
        result[1] = sumA * 2.0;
        result[2] = sumB * 2.0;
    }

    public static double sin(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa;
        double xb = 0.0;
        xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (negative) {
            quadrant ^= 2;
        }
        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            case 1 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 3 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double cos(double x) {
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            xa = -xa;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 1 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            case 3 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double tan(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (xa > 1.5) {
            final double pi2a = 1.5707963267948966;
            final double pi2b = 6.123233995736766E-17;
            final double a = pi2a - xa;
            double b = -((a - pi2a) + xa);
            b += pi2b - xb;
            xa = a + b;
            xb = -((xa - a) - b);
            quadrant ^= 1;
            negative ^= true;
        }
        double result;
        if ((quadrant & 1) == 0) {
            result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false);
        }else {
            result = -(org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true));
        }
        if (negative) {
            result = -result;
        }
        return result;
    }

    public static double atan(double x) {
        return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false);
    }

    private static double atan(double xa, double xb, boolean leftPlane) {
        boolean negate = false;
        int idx;
        if (xa == 0.0) {
            return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
        }
        if (xa < 0) {
            xa = -xa;
            xb = -xb;
            negate = true;
        }
        if (xa > 1.633123935319537E16) {
            return negate ^ leftPlane ? (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2) : (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (xa < 1) {
            idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
        }else {
            final double oneOverXa = 1 / xa;
            idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
        }
        double epsA = xa - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
        double epsB = -((epsA - xa) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]));
        epsB += xb - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
        double temp = epsA + epsB;
        epsB = -((temp - epsA) - epsB);
        epsA = temp;
        temp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (xa + temp) - temp;
        double yb = (xb + xa) - ya;
        xa = ya;
        xb += yb;
        if (idx == 0) {
            final double denom = 1.0 / (1.0 + ((xa + xb) * ((org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]))));
            ya = epsA * denom;
            yb = epsB * denom;
        }else {
            double temp2 = xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
            double za = 1.0 + temp2;
            double zb = -((za - 1.0) - temp2);
            temp2 = (xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])) + (xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]));
            temp = za + temp2;
            zb += -((temp - za) - temp2);
            za = temp;
            zb += xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
            ya = epsA / za;
            temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double yaa = (ya + temp) - temp;
            final double yab = ya - yaa;
            temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double zaa = (za + temp) - temp;
            final double zab = za - zaa;
            yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;
            yb += (((-epsA) * zb) / za) / za;
            yb += epsB / za;
        }
        epsA = ya;
        epsB = yb;
        final double epsA2 = epsA * epsA;
        yb = 0.07490822288864472;
        yb = (yb * epsA2) + (-0.09088450866185192);
        yb = (yb * epsA2) + 0.11111095942313305;
        yb = (yb * epsA2) + (-0.1428571423679182);
        yb = (yb * epsA2) + 0.19999999999923582;
        yb = (yb * epsA2) + (-0.33333333333333287);
        yb = (yb * epsA2) * epsA;
        ya = epsA;
        temp = ya + yb;
        yb = -((temp - ya) - yb);
        ya = temp;
        yb += epsB / (1.0 + (epsA * epsA));
        double za = (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) + ya;
        double zb = -((za - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx])) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double result = za + zb;
        double resultb = -((result - za) - zb);
        if (leftPlane) {
            final double pia = 1.5707963267948966 * 2;
            final double pib = 6.123233995736766E-17 * 2;
            za = pia - result;
            zb = -((za - pia) + result);
            zb += pib - resultb;
            result = za + zb;
            resultb = -((result - za) - zb);
        }
        if (negate ^ leftPlane) {
            result = -result;
        }
        return result;
    }

    public static double atan2(double y, double x) {
        if ((x != x) || (y != y)) {
            return java.lang.Double.NaN;
        }
        if (y == 0) {
            final double result = x * y;
            final double invx = 1.0 / x;
            final double invy = 1.0 / y;
            if (invx == 0) {
                if (x > 0) {
                    return y;
                }else {
                    return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
                }
            }
            if ((x < 0) || (invx < 0)) {
                if ((y < 0) || (invy < 0)) {
                    return -(java.lang.Math.PI);
                }else {
                    return java.lang.Math.PI;
                }
            }else {
                return result;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((y > 0) || ((1 / y) > 0)) {
                return 0.0;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((y > 0.0) || ((1 / y) > 0.0)) {
                return java.lang.Math.PI;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -(java.lang.Math.PI);
            }
        }
        if (x == 0) {
            if ((y > 0) || ((1 / y) > 0)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
        }
        final double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return org.apache.commons.math3.util.FastMath.atan(r, 0, (x < 0));
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        final double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        final double xb = x - xa;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        final double temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        if (ra == 0) {
            ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y);
        }
        final double result = org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
        return result;
    }

    public static double asin(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == 1.0) {
            return (java.lang.Math.PI) / 2.0;
        }
        if (x == (-1.0)) {
            return (-(java.lang.Math.PI)) / 2.0;
        }
        if (x == 0.0) {
            return x;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y;
        y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        double dx = zb / (2.0 * y);
        double r = x / y;
        temp = r * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ra = (r + temp) - temp;
        double rb = r - ra;
        rb += ((((x - (ra * ya)) - (ra * yb)) - (rb * ya)) - (rb * yb)) / y;
        rb += (((-x) * dx) / y) / y;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, false);
    }

    public static double acos(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == (-1.0)) {
            return java.lang.Math.PI;
        }
        if (x == 1.0) {
            return 0.0;
        }
        if (x == 0) {
            return (java.lang.Math.PI) / 2.0;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        yb += zb / (2.0 * y);
        y = ya + yb;
        yb = -((y - ya) - yb);
        double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return (java.lang.Math.PI) / 2;
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        rb += yb / x;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
    }

    public static double cbrt(double x) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        boolean subnormal = false;
        if (exponent == (-1023)) {
            if (x == 0) {
                return x;
            }
            subnormal = true;
            x *= 1.8014398509481984E16;
            inbits = java.lang.Double.doubleToLongBits(x);
            exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        }
        if (exponent == 1024) {
            return x;
        }
        int exp3 = exponent / 3;
        double p2 = java.lang.Double.longBitsToDouble(((inbits & -9223372036854775808L) | (((long) ((exp3 + 1023) & 2047)) << 52)));
        final double mant = java.lang.Double.longBitsToDouble(((inbits & 4503599627370495L) | 4607182418800017408L));
        double est = -0.010714690733195933;
        est = (est * mant) + 0.0875862700108075;
        est = (est * mant) + (-0.3058015757857271);
        est = (est * mant) + 0.7249995199969751;
        est = (est * mant) + 0.5039018405998233;
        est *= org.apache.commons.math3.util.FastMath.CBRTTWO[((exponent % 3) + 2)];
        final double xs = x / ((p2 * p2) * p2);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        double temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (est + temp) - temp;
        double yb = est - ya;
        double za = ya * ya;
        double zb = ((ya * yb) * 2.0) + (yb * yb);
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (za + temp) - temp;
        zb += za - temp2;
        za = temp2;
        zb = ((za * yb) + (ya * zb)) + (zb * yb);
        za = za * ya;
        double na = xs - za;
        double nb = -((na - xs) + za);
        nb -= zb;
        est += (na + nb) / ((3 * est) * est);
        est *= p2;
        if (subnormal) {
            est *= 3.814697265625E-6;
        }
        return est;
    }

    public static double toRadians(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 0.01745329052209854;
        final double factb = 1.997844754509471E-9;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
        if (result == 0) {
            result = result * x;
        }
        return result;
    }

    public static double toDegrees(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 57.2957763671875;
        final double factb = 3.145894820876798E-6;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
    }

    public static int abs(final int x) {
        return x < 0 ? -x : x;
    }

    public static long abs(final long x) {
        return x < 0L ? -x : x;
    }

    public static float abs(final float x) {
        return x < 0.0F ? -x : x == 0.0F ? 0.0F : x;
    }

    public static double abs(double x) {
        return x < 0.0 ? -x : x == 0.0 ? 0.0 : x;
    }

    public static double ulp(double x) {
        if (java.lang.Double.isInfinite(x)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Double.longBitsToDouble(((java.lang.Double.doubleToLongBits(x)) ^ 1)))));
    }

    public static float ulp(float x) {
        if (java.lang.Float.isInfinite(x)) {
            return java.lang.Float.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Float.intBitsToFloat(((java.lang.Float.floatToIntBits(x)) ^ 1)))));
    }

    public static double scalb(final double d, final int n) {
        if ((n > (-1023)) && (n < 1024)) {
            return d * (java.lang.Double.longBitsToDouble((((long) (n + 1023)) << 52)));
        }
        if (((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) || (d == 0)) {
            return d;
        }
        if (n < (-2098)) {
            return d > 0 ? 0.0 : -0.0;
        }
        if (n > 2097) {
            return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        int exponent = ((int) (bits >>> 52)) & 2047;
        long mantissa = bits & 4503599627370495L;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
            }else
                if (scaledExponent > (-53)) {
                    mantissa = mantissa | (1L << 52);
                    final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Double.longBitsToDouble((sign | mantissa));
                }else {
                    return sign == 0L ? 0.0 : -0.0;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 52) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 4503599627370495L;
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }

        }
    }

    public static float scalb(final float f, final int n) {
        if ((n > (-127)) && (n < 128)) {
            return f * (java.lang.Float.intBitsToFloat(((n + 127) << 23)));
        }
        if (((java.lang.Float.isNaN(f)) || (java.lang.Float.isInfinite(f))) || (f == 0.0F)) {
            return f;
        }
        if (n < (-277)) {
            return f > 0 ? 0.0F : -0.0F;
        }
        if (n > 276) {
            return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
        }
        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        int exponent = (bits >>> 23) & 255;
        int mantissa = bits & 8388607;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
            }else
                if (scaledExponent > (-24)) {
                    mantissa = mantissa | (1 << 23);
                    final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Float.intBitsToFloat((sign | mantissa));
                }else {
                    return sign == 0 ? 0.0F : -0.0F;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 23) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 8388607;
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }

        }
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Double.NaN;
        }else
            if (d == direction) {
                return direction;
            }else
                if (java.lang.Double.isInfinite(d)) {
                    return d < 0 ? -(java.lang.Double.MAX_VALUE) : java.lang.Double.MAX_VALUE;
                }else
                    if (d == 0) {
                        return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
                    }



        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        if ((direction < d) ^ (sign == 0L)) {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) + 1)));
        }else {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) - 1)));
        }
    }

    public static float nextAfter(final float f, final double direction) {
        if ((java.lang.Double.isNaN(f)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Float.NaN;
        }else
            if (f == direction) {
                return ((float) (direction));
            }else
                if (java.lang.Float.isInfinite(f)) {
                    return f < 0.0F ? -(java.lang.Float.MAX_VALUE) : java.lang.Float.MAX_VALUE;
                }else
                    if (f == 0.0F) {
                        return direction < 0 ? -(java.lang.Float.MIN_VALUE) : java.lang.Float.MIN_VALUE;
                    }



        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        if ((direction < f) ^ (sign == 0)) {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) + 1)));
        }else {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) - 1)));
        }
    }

    public static double floor(double x) {
        long y;
        if (x != x) {
            return x;
        }
        if ((x >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
            return x;
        }
        y = ((long) (x));
        if ((x < 0) && (y != x)) {
            y--;
        }
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double ceil(double x) {
        double y;
        if (x != x) {
            return x;
        }
        y = org.apache.commons.math3.util.FastMath.floor(x);
        if (y == x) {
            return y;
        }
        y += 1.0;
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double rint(double x) {
        double y = org.apache.commons.math3.util.FastMath.floor(x);
        double d = x - y;
        if (d > 0.5) {
            if (y == (-1.0)) {
                return -0.0;
            }
            return y + 1.0;
        }
        if (d < 0.5) {
            return y;
        }
        long z = ((long) (y));
        return (z & 1) == 0 ? y : y + 1.0;
    }

    public static long round(double x) {
        return ((long) (org.apache.commons.math3.util.FastMath.floor((x + 0.5))));
    }

    public static int round(final float x) {
        return ((int) (org.apache.commons.math3.util.FastMath.floor((x + 0.5F))));
    }

    public static int min(final int a, final int b) {
        return a <= b ? a : b;
    }

    public static long min(final long a, final long b) {
        return a <= b ? a : b;
    }

    public static float min(final float a, final float b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return a;
        }
        return b;
    }

    public static double min(final double a, final double b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return a;
        }
        return b;
    }

    public static int max(final int a, final int b) {
        return a <= b ? b : a;
    }

    public static long max(final long a, final long b) {
        return a <= b ? b : a;
    }

    public static float max(final float a, final float b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return b;
        }
        return a;
    }

    public static double max(final double a, final double b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return b;
        }
        return a;
    }

    public static double hypot(final double x, final double y) {
        if ((java.lang.Double.isInfinite(x)) || (java.lang.Double.isInfinite(y))) {
            return java.lang.Double.POSITIVE_INFINITY;
        }else
            if ((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(y))) {
                return java.lang.Double.NaN;
            }else {
                final int expX = org.apache.commons.math3.util.FastMath.getExponent(x);
                final int expY = org.apache.commons.math3.util.FastMath.getExponent(y);
                if (expX > (expY + 27)) {
                    return org.apache.commons.math3.util.FastMath.abs(x);
                }else
                    if (expY > (expX + 27)) {
                        return org.apache.commons.math3.util.FastMath.abs(y);
                    }else {
                        final int middleExp = (expX + expY) / 2;
                        final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, (-middleExp));
                        final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, (-middleExp));
                        final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(((scaledX * scaledX) + (scaledY * scaledY)));
                        return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp);
                    }

            }

    }

    public static double IEEEremainder(double dividend, double divisor) {
        return java.lang.StrictMath.IEEEremainder(dividend, divisor);
    }

    public static double copySign(double magnitude, double sign) {
        long m = java.lang.Double.doubleToLongBits(magnitude);
        long s = java.lang.Double.doubleToLongBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static float copySign(float magnitude, float sign) {
        int m = java.lang.Float.floatToIntBits(magnitude);
        int s = java.lang.Float.floatToIntBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static int getExponent(final double d) {
        return ((int) (((java.lang.Double.doubleToLongBits(d)) >>> 52) & 2047)) - 1023;
    }

    public static int getExponent(final float f) {
        return (((java.lang.Float.floatToIntBits(f)) >>> 23) & 255) - 127;
    }

    public static void main(java.lang.String[] a) {
        java.io.PrintStream out = java.lang.System.out;
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "LN_MANT", org.apache.commons.math3.util.FastMath.LN_MANT_LEN, org.apache.commons.math3.util.FastMath.lnMant.LN_MANT);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);
    }

    private static class ExpIntTable {
        private static final double[] EXP_INT_TABLE_A;

        private static final double[] EXP_INT_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                final double[] tmp = new double[2];
                final double[] recip = new double[2];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX); i++) {
                    org.apache.commons.math3.util.FastMathCalc.expint(i, tmp);
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[1];
                    if (i != 0) {
                        org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[0];
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[1];
                    }
                }
            }else {
                EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA();
                EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB();
            }
        }
    }

    private static class ExpFracTable {
        private static final double[] EXP_FRAC_TABLE_A;

        private static final double[] EXP_FRAC_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                final double[] tmp = new double[2];
                final double factor = 1.0 / ((org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN) - 1);
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length); i++) {
                    org.apache.commons.math3.util.FastMathCalc.slowexp((i * factor), tmp);
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
                }
            }else {
                EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA();
                EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB();
            }
        }
    }

    private static class lnMant {
        private static final double[][] LN_MANT;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length); i++) {
                    final double d = java.lang.Double.longBitsToDouble(((((long) (i)) << 42) | 4607182418800017408L));
                    org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
                }
            }else {
                LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
            }
        }
    }

    private static class CodyWaite {
        private final int finalK;

        private final double finalRemA;

        private final double finalRemB;

        CodyWaite(double xa, double xb) {
            int k = ((int) (xa * 0.6366197723675814));
            double remA;
            double remB;
            while (true) {
                double a = (-k) * 1.570796251296997;
                remA = xa + a;
                remB = -((remA - xa) - a);
                a = (-k) * 7.549789948768648E-8;
                double b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                a = (-k) * 6.123233995736766E-17;
                b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                if (remA > 0) {
                    break;
                }
                --k;
            } 
            this.finalK = k;
            this.finalRemA = remA;
            this.finalRemB = remB;
        }

        int getK() {
            return finalK;
        }

        double getRemA() {
            return finalRemA;
        }

        double getRemB() {
            return finalRemB;
        }
    }
}
00:36:59.963 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:36:59.963 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #209
00:36:59.963 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1325 which is executed by 687 tests
1033054629
00:37:00.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:00.425 [pool-613-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (156 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:01.722 [pool-614-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:01.724 [pool-615-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:01.725 [pool-612-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:01.725 [pool-612-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:01.725 [pool-612-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1325.
00:37:01.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #210
00:37:01.725 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1324 which is executed by 687 tests
1033054629
00:37:02.030 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:02.206 [pool-617-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (170 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:03.504 [pool-618-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:03.506 [pool-619-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:03.506 [pool-616-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:03.506 [pool-616-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:03.506 [pool-616-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1324.
00:37:03.506 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #211
00:37:03.506 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1270 which is executed by 687 tests
1033054629
00:37:03.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #212
00:37:03.813 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1269 which is executed by 687 tests
1033054629
00:37:04.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:04.280 [pool-621-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (161 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:05.579 [pool-622-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:05.580 [pool-623-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:05.580 [pool-620-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:05.580 [pool-620-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:05.581 [pool-620-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1269.
00:37:05.581 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #213
00:37:05.581 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1268 which is executed by 687 tests
1033054629
00:37:05.881 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:06.035 [pool-625-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (148 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:07.374 [pool-626-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:07.376 [pool-627-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:07.376 [pool-624-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:07.377 [pool-624-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:07.377 [pool-624-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1268.
00:37:07.377 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #214
00:37:07.377 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1260 which is executed by 687 tests
1033054629
00:37:07.676 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:07.851 [pool-629-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (170 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:09.146 [pool-630-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:09.148 [pool-631-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:09.148 [pool-628-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:09.148 [pool-628-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:09.148 [pool-628-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1260.
00:37:09.148 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #215
00:37:09.148 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1259 which is executed by 687 tests
1033054629
00:37:09.449 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:09.630 [pool-633-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (176 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:10.929 [pool-634-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:10.931 [pool-635-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:10.932 [pool-632-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:10.932 [pool-632-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:10.932 [pool-632-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1259.
00:37:10.932 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #216
00:37:10.932 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1255 which is executed by 687 tests
1033054629
00:37:11.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:11.389 [pool-637-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (148 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:12.691 [pool-638-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:12.693 [pool-639-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:12.693 [pool-636-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:12.693 [pool-636-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:12.693 [pool-636-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1255.
00:37:12.693 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #217
00:37:12.693 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1254 which is executed by 687 tests
1033054629
00:37:12.992 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:13.156 [pool-641-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (158 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:14.454 [pool-642-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:14.456 [pool-643-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:14.457 [pool-640-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:14.457 [pool-640-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:14.457 [pool-640-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1254.
00:37:14.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #218
00:37:14.457 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1253 which is executed by 687 tests
1033054629
00:37:14.851 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:15.017 [pool-645-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (160 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:16.321 [pool-646-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:16.323 [pool-647-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:16.324 [pool-644-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:16.324 [pool-644-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:16.324 [pool-644-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1253.
00:37:16.324 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #219
00:37:16.324 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1251 which is executed by 687 tests
1033054629
00:37:16.624 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:16.798 [pool-649-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (169 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:18.104 [pool-650-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:18.106 [pool-651-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:18.107 [pool-648-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:18.107 [pool-648-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:18.107 [pool-648-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1251.
00:37:18.107 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #220
00:37:18.107 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1250 which is executed by 687 tests
1033054629
00:37:18.407 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:18.569 [pool-653-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (156 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:19.867 [pool-654-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:19.870 [pool-655-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:19.870 [pool-652-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:19.870 [pool-652-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:19.870 [pool-652-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1250.
00:37:19.870 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #221
00:37:19.871 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1249 which is executed by 687 tests
1033054629
00:37:20.170 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #222
00:37:20.170 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1246 which is executed by 687 tests
1033054629
00:37:20.469 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:20.660 [pool-657-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (186 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:21.966 [pool-658-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:21.969 [pool-659-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:21.977 [pool-656-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:21.977 [pool-656-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:21.977 [pool-656-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1246.
00:37:21.977 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #223
00:37:21.978 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1245 which is executed by 687 tests
1033054629
00:37:22.331 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:22.500 [pool-661-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (163 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:23.816 [pool-662-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:23.821 [pool-663-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:23.821 [pool-660-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:23.821 [pool-660-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:23.821 [pool-660-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1245.
00:37:23.821 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #224
00:37:23.821 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1244 which is executed by 687 tests
1033054629
00:37:24.121 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:24.302 [pool-665-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (176 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:25.606 [pool-666-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:25.608 [pool-667-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:25.608 [pool-664-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:25.608 [pool-664-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:25.608 [pool-664-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1244.
00:37:25.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #225
00:37:25.609 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1242 which is executed by 687 tests
1033054629
00:37:25.907 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:26.092 [pool-669-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (179 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:27.388 [pool-670-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:27.390 [pool-671-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:27.393 [pool-668-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:27.393 [pool-668-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:27.394 [pool-668-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1242.
00:37:27.394 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #226
00:37:27.394 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1241 which is executed by 687 tests
1033054629
00:37:27.697 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:27.873 [pool-673-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (171 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:29.169 [pool-674-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:29.172 [pool-675-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:29.172 [pool-672-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:29.172 [pool-672-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:29.172 [pool-672-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1241.
00:37:29.172 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #227
00:37:29.172 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1239 which is executed by 687 tests
1033054629
00:37:29.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:29.710 [pool-677-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (177 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:31.004 [pool-678-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:31.006 [pool-679-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:31.006 [pool-676-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:31.006 [pool-676-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:31.006 [pool-676-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1239.
00:37:31.006 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #228
00:37:31.006 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1237 which is executed by 687 tests
1033054629
00:37:31.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #229
00:37:31.306 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1236 which is executed by 687 tests
1033054629
00:37:31.604 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #230
00:37:31.605 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1235 which is executed by 687 tests
1033054629
00:37:31.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #231
00:37:31.905 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1232 which is executed by 687 tests
1033054629
00:37:32.203 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:32.384 [pool-681-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (175 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:33.684 [pool-682-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:33.686 [pool-683-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:33.687 [pool-680-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:33.687 [pool-680-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:33.687 [pool-680-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1232.
00:37:33.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #232
00:37:33.687 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1231 which is executed by 687 tests
1033054629
00:37:33.989 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:34.154 [pool-685-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (160 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:35.447 [pool-686-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:35.449 [pool-687-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:35.449 [pool-684-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:35.449 [pool-684-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:35.449 [pool-684-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1231.
00:37:35.449 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #233
00:37:35.450 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1230 which is executed by 687 tests
1033054629
00:37:35.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #234
00:37:35.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1229 which is executed by 687 tests
1033054629
00:37:36.048 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #235
00:37:36.048 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1226 which is executed by 687 tests
1033054629
00:37:36.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #236
00:37:36.349 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1225 which is executed by 687 tests
1033054629
00:37:36.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #237
00:37:36.648 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1224 which is executed by 687 tests
1033054629
00:37:36.948 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #238
00:37:36.948 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1223 which is executed by 687 tests
1033054629
00:37:37.292 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #239
00:37:37.293 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1222 which is executed by 687 tests
1033054629
00:37:37.590 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #240
00:37:37.591 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:807 which is executed by 698 tests
1033054629
00:37:37.887 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #241
00:37:37.887 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1279 which is executed by 702 tests
1033054629
00:37:38.186 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:38.363 [pool-689-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (171 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:39.656 [pool-690-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:39.659 [pool-691-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:39.659 [pool-688-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:39.659 [pool-688-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:39.659 [pool-688-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1279.
00:37:39.659 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #242
00:37:39.660 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1278 which is executed by 702 tests
1033054629
00:37:39.958 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:40.125 [pool-693-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (161 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:41.414 [pool-694-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:41.416 [pool-695-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:41.416 [pool-692-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:41.416 [pool-692-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:41.416 [pool-692-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1278.
00:37:41.416 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #243
00:37:41.416 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1277 which is executed by 702 tests
1033054629
00:37:41.718 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:41.888 [pool-697-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (165 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:43.191 [pool-698-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:43.193 [pool-699-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:43.193 [pool-696-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:43.193 [pool-696-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:43.193 [pool-696-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1277.
00:37:43.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #244
00:37:43.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1276 which is executed by 702 tests
1033054629
00:37:43.492 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:43.674 [pool-701-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (177 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:44.967 [pool-702-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:44.970 [pool-703-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:44.973 [pool-700-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:44.973 [pool-700-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:44.973 [pool-700-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1276.
00:37:44.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #245
00:37:44.973 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1275 which is executed by 702 tests
1033054629
00:37:45.273 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:45.440 [pool-705-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (162 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:46.743 [pool-706-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (24 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:46.745 [pool-707-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:46.745 [pool-704-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:46.745 [pool-704-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:46.745 [pool-704-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1275.
00:37:46.746 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #246
00:37:46.746 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1274 which is executed by 702 tests
1033054629
00:37:47.045 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:47.207 [pool-709-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (156 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:48.501 [pool-710-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:48.503 [pool-711-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:48.503 [pool-708-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:48.503 [pool-708-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:48.503 [pool-708-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1274.
00:37:48.503 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #247
00:37:48.504 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1273 which is executed by 702 tests
1033054629
00:37:48.803 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:48.980 [pool-713-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (171 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:50.275 [pool-714-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:50.283 [pool-715-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:50.283 [pool-712-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:50.284 [pool-712-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:50.284 [pool-712-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1273.
00:37:50.284 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #248
00:37:50.284 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:922 which is executed by 710 tests
1033054629
00:37:50.582 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:50.763 [pool-717-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (176 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:52.059 [pool-716-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:508: error: variable result might not have been initialized
        return result;
               ^
00:37:52.737 [pool-716-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastMath {
    public static final double PI = (1.05414357E8 / 3.3554432E7) + 1.984187159361081E-9;

    public static final double E = (2850325.0 / 1048576.0) + 8.254840070411029E-8;

    static final int EXP_INT_TABLE_MAX_INDEX = 750;

    static final int EXP_INT_TABLE_LEN = (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) * 2;

    static final int LN_MANT_LEN = 1024;

    static final int EXP_FRAC_TABLE_LEN = 1025;

    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;

    private static final double LN_2_A = 0.6931470632553101;

    private static final double LN_2_B = 1.1730463525082348E-7;

    private static final double[][] LN_QUICK_COEF = new double[][]{ new double[]{ 1.0, 5.669184079525E-24 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.986821492305628E-8 }, new double[]{ -0.25, -6.663542893624021E-14 }, new double[]{ 0.19999998807907104, 1.1921056801463227E-8 }, new double[]{ -0.1666666567325592, -7.800414592973399E-9 }, new double[]{ 0.1428571343421936, 5.650007086920087E-9 }, new double[]{ -0.12502530217170715, -7.44321345601866E-11 }, new double[]{ 0.11113807559013367, 9.219544613762692E-9 } };

    private static final double[][] LN_HI_PREC_COEF = new double[][]{ new double[]{ 1.0, -6.032174644509064E-23 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.9868161777724352E-8 }, new double[]{ -0.2499999701976776, -2.957007209750105E-8 }, new double[]{ 0.19999954104423523, 1.5830993332061267E-10 }, new double[]{ -0.16624879837036133, -2.6033824355191673E-8 } };

    private static final int SINE_TABLE_LEN = 14;

    private static final double[] SINE_TABLE_A = new double[]{ +0.0, +0.1246747374534607, +0.24740394949913025, +0.366272509098053, +0.4794255495071411, +0.5850973129272461, +0.6816387176513672, +0.7675435543060303, +0.8414709568023682, +0.902267575263977, +0.9489846229553223, +0.9808930158615112, +0.9974949359893799, +0.9985313415527344 };

    private static final double[] SINE_TABLE_B = new double[]{ +0.0, -4.068233003401932E-9, +9.755392680573412E-9, +1.9987994582857286E-8, -1.0902938113007961E-8, -3.9986783938944604E-8, +4.23719669792332E-8, -5.207000323380292E-8, +2.800552834259E-8, +1.883511811213715E-8, -3.5997360512765566E-9, +4.116164446561962E-8, +5.0614674548127384E-8, -1.0129027912496858E-9 };

    private static final double[] COSINE_TABLE_A = new double[]{ +1.0, +0.9921976327896118, +0.9689123630523682, +0.9305076599121094, +0.8775825500488281, +0.8109631538391113, +0.7316888570785522, +0.6409968137741089, +0.5403022766113281, +0.4311765432357788, +0.3153223395347595, +0.19454771280288696, +0.07073719799518585, -0.05417713522911072 };

    private static final double[] COSINE_TABLE_B = new double[]{ +0.0, +3.4439717236742845E-8, +5.865827662008209E-8, -3.7999795083850525E-8, +1.184154459111628E-8, -3.43338934259355E-8, +1.1795268640216787E-8, +4.438921624363781E-8, +2.925681159240093E-8, -2.6437112632041807E-8, +2.2860509143963117E-8, -4.813899778443457E-9, +3.6725170580355583E-9, +2.0217439756338078E-10 };

    private static final double[] TANGENT_TABLE_A = new double[]{ +0.0, +0.1256551444530487, +0.25534194707870483, +0.3936265707015991, +0.5463024377822876, +0.7214844226837158, +0.9315965175628662, +1.1974215507507324, +1.5574076175689697, +2.092571258544922, +3.0095696449279785, +5.041914939880371, +14.101419448852539, -18.430862426757812 };

    private static final double[] TANGENT_TABLE_B = new double[]{ +0.0, -7.877917738262007E-9, -2.5857668567479893E-8, +5.2240336371356666E-9, +5.206150291559893E-8, +1.8307188599677033E-8, -5.7618793749770706E-8, +7.848361555046424E-8, +1.0708593250394448E-7, +1.7827257129423813E-8, +2.893485277253286E-8, +3.1660099222737955E-7, +4.983191803254889E-7, -3.356118100840571E-7 };

    private static final long[] RECIP_2PI = new long[]{ (683565275L << 32) | 2475754826L, (2131351028L << 32) | 2102212464L, (920167782L << 32) | 1326507024L, (2140428522L << 32) | 4155437400L, (1841896334L << 32) | 2425582776L, (26364858L << 32) | 2188665991L, (1065843399L << 32) | 743074255L, (3122695549L << 32) | 1269748001L, (979835913L << 32) | 2904022928L, (1315206542L << 32) | 1624559229L, (656480226L << 32) | 4018031118L, (3355321855L << 32) | 4152452611L, (4224435298L << 32) | 3598883655L, (3679297459L << 32) | 3388129901L, (3553726425L << 32) | 2811755147L, (1565126321L << 32) | 4210654302L, (3477196413L << 32) | 3801392314L, 2600392684L << 32 };

    private static final long[] PI_O_4_BITS = new long[]{ (3373259426L << 32) | 560513588L, (3301335691L << 32) | 2161908945L };

    private static final double[] EIGHTHS = new double[]{ 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625 };

    private static final double[] CBRTTWO = new double[]{ 0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994 };

    private static final long HEX_40000000 = 1073741824L;

    private static final long MASK_30BITS = (-1L) - ((org.apache.commons.math3.util.FastMath.HEX_40000000) - 1);

    private static final double TWO_POWER_52 = 4.503599627370496E15;

    private static final double F_1_3 = 1.0 / 3.0;

    private static final double F_1_5 = 1.0 / 5.0;

    private static final double F_1_7 = 1.0 / 7.0;

    private static final double F_1_9 = 1.0 / 9.0;

    private static final double F_1_11 = 1.0 / 11.0;

    private static final double F_1_13 = 1.0 / 13.0;

    private static final double F_1_15 = 1.0 / 15.0;

    private static final double F_1_17 = 1.0 / 17.0;

    private static final double F_3_4 = 3.0 / 4.0;

    private static final double F_15_16 = 15.0 / 16.0;

    private static final double F_13_14 = 13.0 / 14.0;

    private static final double F_11_12 = 11.0 / 12.0;

    private static final double F_9_10 = 9.0 / 10.0;

    private static final double F_7_8 = 7.0 / 8.0;

    private static final double F_5_6 = 5.0 / 6.0;

    private static final double F_1_2 = 1.0 / 2.0;

    private static final double F_1_4 = 1.0 / 4.0;

    private FastMath() {
    }

    private static double doubleHighPart(double d) {
        if ((d > (-(org.apache.commons.math3.util.Precision.SAFE_MIN))) && (d < (org.apache.commons.math3.util.Precision.SAFE_MIN))) {
            return d;
        }
        long xl = java.lang.Double.doubleToLongBits(d);
        xl = xl & (org.apache.commons.math3.util.FastMath.MASK_30BITS);
        return java.lang.Double.longBitsToDouble(xl);
    }

    public static double sqrt(final double a) {
        return java.lang.Math.sqrt(a);
    }

    public static double cosh(double x) {
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (org.apache.commons.math3.util.FastMath.exp((-x))) / 2.0;
        }
        double[] hiPrec = new double[2];
        if (x < 0.0) {
            x = -x;
        }
        org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
        double ya = (hiPrec[0]) + (hiPrec[1]);
        double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
        double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double yaa = (ya + temp) - temp;
        double yab = ya - yaa;
        double recip = 1.0 / ya;
        temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double recipa = (recip + temp) - temp;
        double recipb = recip - recipa;
        recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
        recipb += ((-yb) * recip) * recip;
        temp = ya + recipa;
        yb += -((temp - ya) - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -((temp - ya) - recipb);
        ya = temp;
        double result = ya + yb;
        result *= 0.5;
        return result;
    }

    public static double sinh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (-(org.apache.commons.math3.util.FastMath.exp((-x)))) / 2.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x > 0.25) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double yaa = (ya + temp) - temp;
            double yab = ya - yaa;
            double recip = 1.0 / ya;
            temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double recipa = (recip + temp) - temp;
            double recipb = recip - recipa;
            recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
            recipb += ((-yb) * recip) * recip;
            recipa = -recipa;
            recipb = -recipb;
            temp = ya + recipa;
            yb += -((temp - ya) - recipa);
            ya = temp;
            temp = ya + recipb;
            yb += -((temp - ya) - recipb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1(x, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            double temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double za = (denom + temp) - temp;
            double zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            temp = ya + ra;
            yb += -((temp - ya) - ra);
            ya = temp;
            temp = ya + rb;
            yb += -((temp - ya) - rb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double tanh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return 1.0;
        }
        if (x < (-20)) {
            return -1.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x >= 0.5) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp((x * 2.0), 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = (-1.0) + ya;
            double nb = -((na + 1.0) - ya);
            double temp = na + yb;
            nb += -((temp - na) - yb);
            na = temp;
            double da = 1.0 + ya;
            double db = -((da - 1.0) - ya);
            temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1((x * 2.0), hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = ya;
            double nb = yb;
            double da = 2.0 + ya;
            double db = -((da - 2.0) - ya);
            double temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double acosh(final double a) {
        return org.apache.commons.math3.util.FastMath.log((a + (org.apache.commons.math3.util.FastMath.sqrt(((a * a) - 1)))));
    }

    public static double asinh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAsinh;
        if (a > 0.167) {
            absAsinh = org.apache.commons.math3.util.FastMath.log(((org.apache.commons.math3.util.FastMath.sqrt(((a * a) + 1))) + a));
        }else {
            final double a2 = a * a;
            if (a > 0.097) {
                absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_17)) * (org.apache.commons.math3.util.FastMath.F_15_16)))) * (org.apache.commons.math3.util.FastMath.F_13_14)))) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
            }else
                if (a > 0.036) {
                    absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13)) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                }else
                    if (a > 0.0036) {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9)) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }else {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5)) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }


        }
        return negative ? -absAsinh : absAsinh;
    }

    public static double atanh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAtanh;
        if (a > 0.15) {
            absAtanh = 0.5 * (org.apache.commons.math3.util.FastMath.log(((1 + a) / (1 - a))));
        }else {
            final double a2 = a * a;
            if (a > 0.087) {
                absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_17)))))))))))))))));
            }else
                if (a > 0.031) {
                    absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13)))))))))))));
                }else
                    if (a > 0.003) {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9)))))))));
                    }else {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5)))));
                    }


        }
        return negative ? -absAtanh : absAtanh;
    }

    public static double signum(final double a) {
        return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a;
    }

    public static float signum(final float a) {
        return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a;
    }

    public static double nextUp(final double a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY);
    }

    public static float nextUp(final float a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY);
    }

    public static double random() {
        return java.lang.Math.random();
    }

    public static double exp(double x) {
        return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null);
    }

    private static double exp(double x, double extra, double[] hiPrec) {
        double intPartA;
        double intPartB;
        int intVal;
        if (x < 0.0) {
            intVal = ((int) (-x));
            if (intVal > 746) {
                if (hiPrec != null) {
                    hiPrec[0] = 0.0;
                    hiPrec[1] = 0.0;
                }
                return 0.0;
            }
            if (intVal > 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 40.19140625), extra, hiPrec)) / 2.85040095144011776E17;
                if (hiPrec != null) {
                    hiPrec[0] /= 2.85040095144011776E17;
                    hiPrec[1] /= 2.85040095144011776E17;
                }
                return result;
            }
            if (intVal == 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 1.494140625), extra, hiPrec)) / 4.455505956692757;
                if (hiPrec != null) {
                    hiPrec[0] /= 4.455505956692757;
                    hiPrec[1] /= 4.455505956692757;
                }
                return result;
            }
            intVal++;
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intVal = -intVal;
        }else {
            intVal = ((int) (x));
            if (intVal > 709) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
                    hiPrec[1] = 0.0;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
        }
        final int intFrac = ((int) ((x - intVal) * 1024.0));
        final double fracPartA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
        final double fracPartB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
        final double epsilon = x - (intVal + (intFrac / 1024.0));
        double z = 0.04168701738764507;
        z = (z * epsilon) + 0.1666666505023083;
        z = (z * epsilon) + 0.5000000000042687;
        z = (z * epsilon) + 1.0;
        z = (z * epsilon) + (-3.940510424527919E-20);
        double tempA = intPartA * fracPartA;
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
        final double tempC = tempB + tempA;
        final double result;
        if (extra != 0.0) {
            result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
        }else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(180).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_1_13",org.apache.commons.math3.util.FastMath.F_1_13);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_1_11",org.apache.commons.math3.util.FastMath.F_1_11);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_1_17",org.apache.commons.math3.util.FastMath.F_1_17);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_11_12",org.apache.commons.math3.util.FastMath.F_11_12);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_1_15",org.apache.commons.math3.util.FastMath.F_1_15);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_15_16",org.apache.commons.math3.util.FastMath.F_15_16);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.EIGHTHS",org.apache.commons.math3.util.FastMath.EIGHTHS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.LN_2_A",org.apache.commons.math3.util.FastMath.LN_2_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.LN_2_B",org.apache.commons.math3.util.FastMath.LN_2_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.PI_O_4_BITS",org.apache.commons.math3.util.FastMath.PI_O_4_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.LN_MANT_LEN",org.apache.commons.math3.util.FastMath.LN_MANT_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.MASK_30BITS",org.apache.commons.math3.util.FastMath.MASK_30BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.TWO_POWER_52",org.apache.commons.math3.util.FastMath.TWO_POWER_52);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("hiPrec",hiPrec);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("fracPartB",fracPartB);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("fracPartA",fracPartA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.PI",org.apache.commons.math3.util.FastMath.PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.E",org.apache.commons.math3.util.FastMath.E);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",org.apache.commons.math3.util.FastMath.LN_QUICK_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.CBRTTWO",org.apache.commons.math3.util.FastMath.CBRTTWO);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_9_10",org.apache.commons.math3.util.FastMath.F_9_10);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_13_14",org.apache.commons.math3.util.FastMath.F_13_14);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_1_2",org.apache.commons.math3.util.FastMath.F_1_2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_1_3",org.apache.commons.math3.util.FastMath.F_1_3);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_1_4",org.apache.commons.math3.util.FastMath.F_1_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_1_5",org.apache.commons.math3.util.FastMath.F_1_5);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_3_4",org.apache.commons.math3.util.FastMath.F_3_4);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_1_7",org.apache.commons.math3.util.FastMath.F_1_7);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.RECIP_2PI",org.apache.commons.math3.util.FastMath.RECIP_2PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.HEX_40000000",org.apache.commons.math3.util.FastMath.HEX_40000000);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_1_9",org.apache.commons.math3.util.FastMath.F_1_9);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_5_6",org.apache.commons.math3.util.FastMath.F_5_6);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("extra",extra);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.F_7_8",org.apache.commons.math3.util.FastMath.F_7_8);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("intFrac",intFrac);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_A",org.apache.commons.math3.util.FastMath.SINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_B",org.apache.commons.math3.util.FastMath.SINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("z",z);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("tempB",tempB);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("tempC",tempC);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectInput("tempA",tempA);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(180).collectionEnds();
            }
            if (runtimeAngelicValue)
                result = ((tempC * z) + tempB) + tempA;

        }
        if (hiPrec != null) {
            hiPrec[0] = tempA;
            hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
        }
        return result;
    }

    public static double expm1(double x) {
        return org.apache.commons.math3.util.FastMath.expm1(x, null);
    }

    private static double expm1(double x, double[] hiPrecOut) {
        if ((x != x) || (x == 0.0)) {
            return x;
        }
        if ((x <= (-1.0)) || (x >= 1.0)) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            if (x > 0.0) {
                return ((-1.0) + (hiPrec[0])) + (hiPrec[1]);
            }else {
                final double ra = (-1.0) + (hiPrec[0]);
                double rb = -((ra + 1.0) - (hiPrec[0]));
                rb += hiPrec[1];
                return ra + rb;
            }
        }
        double baseA;
        double baseB;
        double epsilon;
        boolean negative = false;
        if (x < 0.0) {
            x = -x;
            negative = true;
        }
        {
            int intFrac = ((int) (x * 1024.0));
            double tempA = (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]) - 1.0;
            double tempB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
            double temp = tempA + tempB;
            tempB = -((temp - tempA) - tempB);
            tempA = temp;
            temp = tempA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            baseA = (tempA + temp) - temp;
            baseB = tempB + (tempA - baseA);
            epsilon = x - (intFrac / 1024.0);
        }
        double zb = 0.008336750013465571;
        zb = (zb * epsilon) + 0.041666663879186654;
        zb = (zb * epsilon) + 0.16666666666745392;
        zb = (zb * epsilon) + 0.49999999999999994;
        zb = zb * epsilon;
        zb = zb * epsilon;
        double za = epsilon;
        double temp = za + zb;
        zb = -((temp - za) - zb);
        za = temp;
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        temp = (za + temp) - temp;
        zb += za - temp;
        za = temp;
        double ya = za * baseA;
        temp = ya + (za * baseB);
        double yb = -((temp - ya) - (za * baseB));
        ya = temp;
        temp = ya + (zb * baseA);
        yb += -((temp - ya) - (zb * baseA));
        ya = temp;
        temp = ya + (zb * baseB);
        yb += -((temp - ya) - (zb * baseB));
        ya = temp;
        temp = ya + baseA;
        yb += -((temp - baseA) - ya);
        ya = temp;
        temp = ya + za;
        yb += -((temp - ya) - za);
        ya = temp;
        temp = ya + baseB;
        yb += -((temp - ya) - baseB);
        ya = temp;
        temp = ya + zb;
        yb += -((temp - ya) - zb);
        ya = temp;
        if (negative) {
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            za = (denom + temp) - temp;
            zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            ya = -ra;
            yb = -rb;
        }
        if (hiPrecOut != null) {
            hiPrecOut[0] = ya;
            hiPrecOut[1] = yb;
        }
        return ya + yb;
    }

    public static double log(final double x) {
        return org.apache.commons.math3.util.FastMath.log(x, null);
    }

    private static double log(final double x, final double[] hiPrec) {
        if (x == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        long bits = java.lang.Double.doubleToLongBits(x);
        if (((bits & -9223372036854775808L) != 0) || (x != x)) {
            if (x != 0.0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NaN;
                }
                return java.lang.Double.NaN;
            }
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (hiPrec != null) {
                hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
            }
            return java.lang.Double.POSITIVE_INFINITY;
        }
        int exp = ((int) (bits >> 52)) - 1023;
        if ((bits & 9218868437227405312L) == 0) {
            if (x == 0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.NEGATIVE_INFINITY;
            }
            bits <<= 1;
            while ((bits & 4503599627370496L) == 0) {
                --exp;
                bits <<= 1;
            } 
        }
        if ((exp == (-1)) || (exp == 0)) {
            if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {
                double xa = x - 1.0;
                double xb = (xa - x) + 1.0;
                double tmp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                double aa = (xa + tmp) - tmp;
                double ab = xa - aa;
                xa = aa;
                xb = ab;
                final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[((org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 1)];
                double ya = lnCoef_last[0];
                double yb = lnCoef_last[1];
                for (int i = (org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 2; i >= 0; i--) {
                    aa = ya * xa;
                    ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                    final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i];
                    aa = ya + (lnCoef_i[0]);
                    ab = yb + (lnCoef_i[1]);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                }
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                return ya + yb;
            }
        }
        final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 4499201580859392L) >> 42))];
        final double epsilon = (bits & 4398046511103L) / ((org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L));
        double lnza = 0.0;
        double lnzb = 0.0;
        if (hiPrec != null) {
            double tmp = epsilon * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double aa = (epsilon + tmp) - tmp;
            double ab = epsilon - aa;
            double xa = aa;
            double xb = ab;
            final double numer = bits & 4398046511103L;
            final double denom = (org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L);
            aa = (numer - (xa * denom)) - (xb * denom);
            xb += aa / denom;
            final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[((org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 1)];
            double ya = lnCoef_last[0];
            double yb = lnCoef_last[1];
            for (int i = (org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 2; i >= 0; i--) {
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i];
                aa = ya + (lnCoef_i[0]);
                ab = yb + (lnCoef_i[1]);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
            }
            aa = ya * xa;
            ab = ((ya * xb) + (yb * xa)) + (yb * xb);
            lnza = aa + ab;
            lnzb = -((lnza - aa) - ab);
        }else {
            lnza = -0.16624882440418567;
            lnza = (lnza * epsilon) + 0.19999954120254515;
            lnza = (lnza * epsilon) + (-0.2499999997677497);
            lnza = (lnza * epsilon) + 0.3333333333332802;
            lnza = (lnza * epsilon) + (-0.5);
            lnza = (lnza * epsilon) + 1.0;
            lnza = lnza * epsilon;
        }
        double a = (org.apache.commons.math3.util.FastMath.LN_2_A) * exp;
        double b = 0.0;
        double c = a + (lnm[0]);
        double d = -((c - a) - (lnm[0]));
        a = c;
        b = b + d;
        c = a + lnza;
        d = -((c - a) - lnza);
        a = c;
        b = b + d;
        c = a + ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp);
        d = -((c - a) - ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp));
        a = c;
        b = b + d;
        c = a + (lnm[1]);
        d = -((c - a) - (lnm[1]));
        a = c;
        b = b + d;
        c = a + lnzb;
        d = -((c - a) - lnzb);
        a = c;
        b = b + d;
        if (hiPrec != null) {
            hiPrec[0] = a;
            hiPrec[1] = b;
        }
        return a + b;
    }

    public static double log1p(final double x) {
        if (x == (-1)) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((x > 1.0E-6) || (x < (-1.0E-6))) {
            final double xpa = 1 + x;
            final double xpb = -((xpa - 1) - x);
            final double[] hiPrec = new double[2];
            final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
            if (java.lang.Double.isInfinite(lores)) {
                return lores;
            }
            final double fx1 = xpb / xpa;
            final double epsilon = (0.5 * fx1) + 1;
            return ((epsilon * fx1) + (hiPrec[1])) + (hiPrec[0]);
        }else {
            final double y = (((x * (org.apache.commons.math3.util.FastMath.F_1_3)) - (org.apache.commons.math3.util.FastMath.F_1_2)) * x) + 1;
            return y * x;
        }
    }

    public static double log10(final double x) {
        final double[] hiPrec = new double[2];
        final double lores = org.apache.commons.math3.util.FastMath.log(x, hiPrec);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        final double tmp = (hiPrec[0]) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double lna = ((hiPrec[0]) + tmp) - tmp;
        final double lnb = ((hiPrec[0]) - lna) + (hiPrec[1]);
        final double rln10a = 0.4342944622039795;
        final double rln10b = 1.9699272335463627E-8;
        return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna);
    }

    public static double log(double base, double x) {
        return (org.apache.commons.math3.util.FastMath.log(x)) / (org.apache.commons.math3.util.FastMath.log(base));
    }

    public static double pow(double x, double y) {
        final double[] lns = new double[2];
        if (y == 0.0) {
            return 1.0;
        }
        if (x != x) {
            return x;
        }
        if (x == 0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if ((bits & -9223372036854775808L) != 0) {
                long yi = ((long) (y));
                if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return -0.0;
                }
            }
            if (y < 0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }
            if (y > 0) {
                return 0.0;
            }
            return java.lang.Double.NaN;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0.0) {
                return 0.0;
            }else {
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) > 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return -0.0;
                }
                return 0.0;
            }
            if (y > 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) < 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x < 0) {
            if ((y >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (y <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
                return org.apache.commons.math3.util.FastMath.pow((-x), y);
            }
            if (y == ((long) (y))) {
                return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow((-x), y) : -(org.apache.commons.math3.util.FastMath.pow((-x), y));
            }else {
                return java.lang.Double.NaN;
            }
        }
        double ya;
        double yb;
        if ((y < 8.0E298) && (y > (-8.0E298))) {
            double tmp1 = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            ya = (y + tmp1) - tmp1;
            yb = y - ya;
        }else {
            double tmp1 = y * 9.313225746154785E-10;
            double tmp2 = tmp1 * 9.313225746154785E-10;
            ya = (((tmp1 + tmp2) - tmp1) * (org.apache.commons.math3.util.FastMath.HEX_40000000)) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            yb = y - ya;
        }
        final double lores = org.apache.commons.math3.util.FastMath.log(x, lns);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        double lna = lns[0];
        double lnb = lns[1];
        double tmp1 = lna * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double tmp2 = (lna + tmp1) - tmp1;
        lnb += lna - tmp2;
        lna = tmp2;
        final double aa = lna * ya;
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
        lna = aa + ab;
        lnb = -((lna - aa) - ab);
        double z = 1.0 / 120.0;
        z = (z * lnb) + (1.0 / 24.0);
        z = (z * lnb) + (1.0 / 6.0);
        z = (z * lnb) + 0.5;
        z = (z * lnb) + 1.0;
        z = z * lnb;
        final double result = org.apache.commons.math3.util.FastMath.exp(lna, z, null);
        return result;
    }

    public static double pow(double d, int e) {
        if (e == 0) {
            return 1.0;
        }else
            if (e < 0) {
                e = -e;
                d = 1.0 / d;
            }

        final int splitFactor = 134217729;
        final double cd = splitFactor * d;
        final double d1High = cd - (cd - d);
        final double d1Low = d - d1High;
        double resultHigh = 1;
        double resultLow = 0;
        double d2p = d;
        double d2pHigh = d1High;
        double d2pLow = d1Low;
        while (e != 0) {
            if ((e & 1) != 0) {
                final double tmpHigh = resultHigh * d2p;
                final double cRH = splitFactor * resultHigh;
                final double rHH = cRH - (cRH - resultHigh);
                final double rHL = resultHigh - rHH;
                final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
                resultHigh = tmpHigh;
                resultLow = (resultLow * d2p) + tmpLow;
            }
            final double tmpHigh = d2pHigh * d2p;
            final double cD2pH = splitFactor * d2pHigh;
            final double d2pHH = cD2pH - (cD2pH - d2pHigh);
            final double d2pHL = d2pHigh - d2pHH;
            final double tmpLow = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow));
            final double cTmpH = splitFactor * tmpHigh;
            d2pHigh = cTmpH - (cTmpH - tmpHigh);
            d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh);
            d2p = d2pHigh + d2pLow;
            e = e >> 1;
        } 
        return resultHigh + resultLow;
    }

    private static double polySine(final double x) {
        double x2 = x * x;
        double p = 2.7553817452272217E-6;
        p = (p * x2) + (-1.9841269659586505E-4);
        p = (p * x2) + 0.008333333333329196;
        p = (p * x2) + (-0.16666666666666666);
        p = (p * x2) * x;
        return p;
    }

    private static double polyCosine(double x) {
        double x2 = x * x;
        double p = 2.479773539153719E-5;
        p = (p * x2) + (-0.0013888888689039883);
        p = (p * x2) + 0.041666666666621166;
        p = (p * x2) + (-0.49999999999999994);
        p *= x2;
        return p;
    }

    private static double sinQ(double xa, double xb) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        final double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double result;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        if (xb != 0.0) {
            t = (((costA + costB) * (cosEpsA + cosEpsB)) - ((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
            c = a + t;
            d = -((c - a) - t);
            a = c;
            b = b + d;
        }
        result = a + b;
        return result;
    }

    private static double cosQ(double xa, double xb) {
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -((a - pi2a) + xa);
        b += pi2b - xb;
        return org.apache.commons.math3.util.FastMath.sinQ(a, b);
    }

    private static double tanQ(double xa, double xb, boolean cotanFlag) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        double sina = a + b;
        double sinb = -((sina - a) - b);
        a = b = c = d = 0.0;
        t = costA * cosEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        t = (-sintA) * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB);
        b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB));
        double cosa = a + b;
        double cosb = -((cosa - a) - b);
        if (cotanFlag) {
            double tmp;
            tmp = cosa;
            cosa = sina;
            sina = tmp;
            tmp = cosb;
            cosb = sinb;
            sinb = tmp;
        }
        double est = sina / cosa;
        temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double esta = (est + temp) - temp;
        double estb = est - esta;
        temp = cosa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double cosaa = (cosa + temp) - temp;
        double cosab = cosa - cosaa;
        double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa;
        err += sinb / cosa;
        err += (((-sina) * cosb) / cosa) / cosa;
        if (xb != 0.0) {
            double xbadj = xb + ((est * est) * xb);
            if (cotanFlag) {
                xbadj = -xbadj;
            }
            err += xbadj;
        }
        return est + err;
    }

    private static void reducePayneHanek(double x, double[] result) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        inbits &= 4503599627370495L;
        inbits |= 4503599627370496L;
        exponent++;
        inbits <<= 11;
        long shpi0;
        long shpiA;
        long shpiB;
        int idx = exponent >> 6;
        int shift = exponent - (idx << 6);
        if (shift != 0) {
            shpi0 = (idx == 0) ? 0 : (org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)]) << shift;
            shpi0 |= (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) >>> (64 - shift);
            shpiA = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) >>> (64 - shift));
            shpiB = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 2)]) >>> (64 - shift));
        }else {
            shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)];
            shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx];
            shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)];
        }
        long a = inbits >>> 32;
        long b = inbits & 4294967295L;
        long c = shpiA >>> 32;
        long d = shpiA & 4294967295L;
        long ac = a * c;
        long bd = b * d;
        long bc = b * c;
        long ad = a * d;
        long prodB = bd + (ad << 32);
        long prodA = ac + (ad >>> 32);
        boolean bita = (bd & -9223372036854775808L) != 0;
        boolean bitb = (ad & 2147483648L) != 0;
        boolean bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prodB = prodB + (bc << 32);
        prodA = prodA + (bc >>> 32);
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpiB >>> 32;
        d = shpiB & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prodB += ac;
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpi0 >>> 32;
        d = shpi0 & 4294967295L;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        prodA += bd + ((bc + ad) << 32);
        int intPart = ((int) (prodA >>> 62));
        prodA <<= 2;
        prodA |= prodB >>> 62;
        prodB <<= 2;
        a = prodA >>> 32;
        b = prodA & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        long prod2B = bd + (ad << 32);
        long prod2A = ac + (ad >>> 32);
        bita = (bd & -9223372036854775808L) != 0;
        bitb = (ad & 2147483648L) != 0;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prod2B = prod2B + (bc << 32);
        prod2A = prod2A + (bc >>> 32);
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        a = prodB >>> 32;
        b = prodB & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        double tmpA = (prod2A >>> 12) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double tmpB = ((((prod2A & 4095L) << 40) + (prod2B >>> 24)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double sumA = tmpA + tmpB;
        double sumB = -((sumA - tmpA) - tmpB);
        result[0] = intPart;
        result[1] = sumA * 2.0;
        result[2] = sumB * 2.0;
    }

    public static double sin(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa;
        double xb = 0.0;
        xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (negative) {
            quadrant ^= 2;
        }
        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            case 1 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 3 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double cos(double x) {
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            xa = -xa;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 1 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            case 3 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double tan(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (xa > 1.5) {
            final double pi2a = 1.5707963267948966;
            final double pi2b = 6.123233995736766E-17;
            final double a = pi2a - xa;
            double b = -((a - pi2a) + xa);
            b += pi2b - xb;
            xa = a + b;
            xb = -((xa - a) - b);
            quadrant ^= 1;
            negative ^= true;
        }
        double result;
        if ((quadrant & 1) == 0) {
            result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false);
        }else {
            result = -(org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true));
        }
        if (negative) {
            result = -result;
        }
        return result;
    }

    public static double atan(double x) {
        return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false);
    }

    private static double atan(double xa, double xb, boolean leftPlane) {
        boolean negate = false;
        int idx;
        if (xa == 0.0) {
            return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
        }
        if (xa < 0) {
            xa = -xa;
            xb = -xb;
            negate = true;
        }
        if (xa > 1.633123935319537E16) {
            return negate ^ leftPlane ? (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2) : (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (xa < 1) {
            idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
        }else {
            final double oneOverXa = 1 / xa;
            idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
        }
        double epsA = xa - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
        double epsB = -((epsA - xa) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]));
        epsB += xb - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
        double temp = epsA + epsB;
        epsB = -((temp - epsA) - epsB);
        epsA = temp;
        temp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (xa + temp) - temp;
        double yb = (xb + xa) - ya;
        xa = ya;
        xb += yb;
        if (idx == 0) {
            final double denom = 1.0 / (1.0 + ((xa + xb) * ((org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]))));
            ya = epsA * denom;
            yb = epsB * denom;
        }else {
            double temp2 = xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
            double za = 1.0 + temp2;
            double zb = -((za - 1.0) - temp2);
            temp2 = (xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])) + (xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]));
            temp = za + temp2;
            zb += -((temp - za) - temp2);
            za = temp;
            zb += xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
            ya = epsA / za;
            temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double yaa = (ya + temp) - temp;
            final double yab = ya - yaa;
            temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double zaa = (za + temp) - temp;
            final double zab = za - zaa;
            yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;
            yb += (((-epsA) * zb) / za) / za;
            yb += epsB / za;
        }
        epsA = ya;
        epsB = yb;
        final double epsA2 = epsA * epsA;
        yb = 0.07490822288864472;
        yb = (yb * epsA2) + (-0.09088450866185192);
        yb = (yb * epsA2) + 0.11111095942313305;
        yb = (yb * epsA2) + (-0.1428571423679182);
        yb = (yb * epsA2) + 0.19999999999923582;
        yb = (yb * epsA2) + (-0.33333333333333287);
        yb = (yb * epsA2) * epsA;
        ya = epsA;
        temp = ya + yb;
        yb = -((temp - ya) - yb);
        ya = temp;
        yb += epsB / (1.0 + (epsA * epsA));
        double za = (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) + ya;
        double zb = -((za - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx])) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double result = za + zb;
        double resultb = -((result - za) - zb);
        if (leftPlane) {
            final double pia = 1.5707963267948966 * 2;
            final double pib = 6.123233995736766E-17 * 2;
            za = pia - result;
            zb = -((za - pia) + result);
            zb += pib - resultb;
            result = za + zb;
            resultb = -((result - za) - zb);
        }
        if (negate ^ leftPlane) {
            result = -result;
        }
        return result;
    }

    public static double atan2(double y, double x) {
        if ((x != x) || (y != y)) {
            return java.lang.Double.NaN;
        }
        if (y == 0) {
            final double result = x * y;
            final double invx = 1.0 / x;
            final double invy = 1.0 / y;
            if (invx == 0) {
                if (x > 0) {
                    return y;
                }else {
                    return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
                }
            }
            if ((x < 0) || (invx < 0)) {
                if ((y < 0) || (invy < 0)) {
                    return -(java.lang.Math.PI);
                }else {
                    return java.lang.Math.PI;
                }
            }else {
                return result;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((y > 0) || ((1 / y) > 0)) {
                return 0.0;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((y > 0.0) || ((1 / y) > 0.0)) {
                return java.lang.Math.PI;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -(java.lang.Math.PI);
            }
        }
        if (x == 0) {
            if ((y > 0) || ((1 / y) > 0)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
        }
        final double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return org.apache.commons.math3.util.FastMath.atan(r, 0, (x < 0));
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        final double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        final double xb = x - xa;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        final double temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        if (ra == 0) {
            ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y);
        }
        final double result = org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
        return result;
    }

    public static double asin(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == 1.0) {
            return (java.lang.Math.PI) / 2.0;
        }
        if (x == (-1.0)) {
            return (-(java.lang.Math.PI)) / 2.0;
        }
        if (x == 0.0) {
            return x;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y;
        y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        double dx = zb / (2.0 * y);
        double r = x / y;
        temp = r * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ra = (r + temp) - temp;
        double rb = r - ra;
        rb += ((((x - (ra * ya)) - (ra * yb)) - (rb * ya)) - (rb * yb)) / y;
        rb += (((-x) * dx) / y) / y;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, false);
    }

    public static double acos(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == (-1.0)) {
            return java.lang.Math.PI;
        }
        if (x == 1.0) {
            return 0.0;
        }
        if (x == 0) {
            return (java.lang.Math.PI) / 2.0;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        yb += zb / (2.0 * y);
        y = ya + yb;
        yb = -((y - ya) - yb);
        double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return (java.lang.Math.PI) / 2;
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        rb += yb / x;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
    }

    public static double cbrt(double x) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        boolean subnormal = false;
        if (exponent == (-1023)) {
            if (x == 0) {
                return x;
            }
            subnormal = true;
            x *= 1.8014398509481984E16;
            inbits = java.lang.Double.doubleToLongBits(x);
            exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        }
        if (exponent == 1024) {
            return x;
        }
        int exp3 = exponent / 3;
        double p2 = java.lang.Double.longBitsToDouble(((inbits & -9223372036854775808L) | (((long) ((exp3 + 1023) & 2047)) << 52)));
        final double mant = java.lang.Double.longBitsToDouble(((inbits & 4503599627370495L) | 4607182418800017408L));
        double est = -0.010714690733195933;
        est = (est * mant) + 0.0875862700108075;
        est = (est * mant) + (-0.3058015757857271);
        est = (est * mant) + 0.7249995199969751;
        est = (est * mant) + 0.5039018405998233;
        est *= org.apache.commons.math3.util.FastMath.CBRTTWO[((exponent % 3) + 2)];
        final double xs = x / ((p2 * p2) * p2);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        double temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (est + temp) - temp;
        double yb = est - ya;
        double za = ya * ya;
        double zb = ((ya * yb) * 2.0) + (yb * yb);
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (za + temp) - temp;
        zb += za - temp2;
        za = temp2;
        zb = ((za * yb) + (ya * zb)) + (zb * yb);
        za = za * ya;
        double na = xs - za;
        double nb = -((na - xs) + za);
        nb -= zb;
        est += (na + nb) / ((3 * est) * est);
        est *= p2;
        if (subnormal) {
            est *= 3.814697265625E-6;
        }
        return est;
    }

    public static double toRadians(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 0.01745329052209854;
        final double factb = 1.997844754509471E-9;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
        if (result == 0) {
            result = result * x;
        }
        return result;
    }

    public static double toDegrees(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 57.2957763671875;
        final double factb = 3.145894820876798E-6;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
    }

    public static int abs(final int x) {
        return x < 0 ? -x : x;
    }

    public static long abs(final long x) {
        return x < 0L ? -x : x;
    }

    public static float abs(final float x) {
        return x < 0.0F ? -x : x == 0.0F ? 0.0F : x;
    }

    public static double abs(double x) {
        return x < 0.0 ? -x : x == 0.0 ? 0.0 : x;
    }

    public static double ulp(double x) {
        if (java.lang.Double.isInfinite(x)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Double.longBitsToDouble(((java.lang.Double.doubleToLongBits(x)) ^ 1)))));
    }

    public static float ulp(float x) {
        if (java.lang.Float.isInfinite(x)) {
            return java.lang.Float.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Float.intBitsToFloat(((java.lang.Float.floatToIntBits(x)) ^ 1)))));
    }

    public static double scalb(final double d, final int n) {
        if ((n > (-1023)) && (n < 1024)) {
            return d * (java.lang.Double.longBitsToDouble((((long) (n + 1023)) << 52)));
        }
        if (((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) || (d == 0)) {
            return d;
        }
        if (n < (-2098)) {
            return d > 0 ? 0.0 : -0.0;
        }
        if (n > 2097) {
            return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        int exponent = ((int) (bits >>> 52)) & 2047;
        long mantissa = bits & 4503599627370495L;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
            }else
                if (scaledExponent > (-53)) {
                    mantissa = mantissa | (1L << 52);
                    final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Double.longBitsToDouble((sign | mantissa));
                }else {
                    return sign == 0L ? 0.0 : -0.0;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 52) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 4503599627370495L;
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }

        }
    }

    public static float scalb(final float f, final int n) {
        if ((n > (-127)) && (n < 128)) {
            return f * (java.lang.Float.intBitsToFloat(((n + 127) << 23)));
        }
        if (((java.lang.Float.isNaN(f)) || (java.lang.Float.isInfinite(f))) || (f == 0.0F)) {
            return f;
        }
        if (n < (-277)) {
            return f > 0 ? 0.0F : -0.0F;
        }
        if (n > 276) {
            return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
        }
        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        int exponent = (bits >>> 23) & 255;
        int mantissa = bits & 8388607;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
            }else
                if (scaledExponent > (-24)) {
                    mantissa = mantissa | (1 << 23);
                    final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Float.intBitsToFloat((sign | mantissa));
                }else {
                    return sign == 0 ? 0.0F : -0.0F;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 23) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 8388607;
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }

        }
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Double.NaN;
        }else
            if (d == direction) {
                return direction;
            }else
                if (java.lang.Double.isInfinite(d)) {
                    return d < 0 ? -(java.lang.Double.MAX_VALUE) : java.lang.Double.MAX_VALUE;
                }else
                    if (d == 0) {
                        return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
                    }



        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        if ((direction < d) ^ (sign == 0L)) {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) + 1)));
        }else {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) - 1)));
        }
    }

    public static float nextAfter(final float f, final double direction) {
        if ((java.lang.Double.isNaN(f)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Float.NaN;
        }else
            if (f == direction) {
                return ((float) (direction));
            }else
                if (java.lang.Float.isInfinite(f)) {
                    return f < 0.0F ? -(java.lang.Float.MAX_VALUE) : java.lang.Float.MAX_VALUE;
                }else
                    if (f == 0.0F) {
                        return direction < 0 ? -(java.lang.Float.MIN_VALUE) : java.lang.Float.MIN_VALUE;
                    }



        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        if ((direction < f) ^ (sign == 0)) {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) + 1)));
        }else {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) - 1)));
        }
    }

    public static double floor(double x) {
        long y;
        if (x != x) {
            return x;
        }
        if ((x >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
            return x;
        }
        y = ((long) (x));
        if ((x < 0) && (y != x)) {
            y--;
        }
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double ceil(double x) {
        double y;
        if (x != x) {
            return x;
        }
        y = org.apache.commons.math3.util.FastMath.floor(x);
        if (y == x) {
            return y;
        }
        y += 1.0;
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double rint(double x) {
        double y = org.apache.commons.math3.util.FastMath.floor(x);
        double d = x - y;
        if (d > 0.5) {
            if (y == (-1.0)) {
                return -0.0;
            }
            return y + 1.0;
        }
        if (d < 0.5) {
            return y;
        }
        long z = ((long) (y));
        return (z & 1) == 0 ? y : y + 1.0;
    }

    public static long round(double x) {
        return ((long) (org.apache.commons.math3.util.FastMath.floor((x + 0.5))));
    }

    public static int round(final float x) {
        return ((int) (org.apache.commons.math3.util.FastMath.floor((x + 0.5F))));
    }

    public static int min(final int a, final int b) {
        return a <= b ? a : b;
    }

    public static long min(final long a, final long b) {
        return a <= b ? a : b;
    }

    public static float min(final float a, final float b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return a;
        }
        return b;
    }

    public static double min(final double a, final double b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return a;
        }
        return b;
    }

    public static int max(final int a, final int b) {
        return a <= b ? b : a;
    }

    public static long max(final long a, final long b) {
        return a <= b ? b : a;
    }

    public static float max(final float a, final float b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return b;
        }
        return a;
    }

    public static double max(final double a, final double b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return b;
        }
        return a;
    }

    public static double hypot(final double x, final double y) {
        if ((java.lang.Double.isInfinite(x)) || (java.lang.Double.isInfinite(y))) {
            return java.lang.Double.POSITIVE_INFINITY;
        }else
            if ((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(y))) {
                return java.lang.Double.NaN;
            }else {
                final int expX = org.apache.commons.math3.util.FastMath.getExponent(x);
                final int expY = org.apache.commons.math3.util.FastMath.getExponent(y);
                if (expX > (expY + 27)) {
                    return org.apache.commons.math3.util.FastMath.abs(x);
                }else
                    if (expY > (expX + 27)) {
                        return org.apache.commons.math3.util.FastMath.abs(y);
                    }else {
                        final int middleExp = (expX + expY) / 2;
                        final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, (-middleExp));
                        final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, (-middleExp));
                        final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(((scaledX * scaledX) + (scaledY * scaledY)));
                        return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp);
                    }

            }

    }

    public static double IEEEremainder(double dividend, double divisor) {
        return java.lang.StrictMath.IEEEremainder(dividend, divisor);
    }

    public static double copySign(double magnitude, double sign) {
        long m = java.lang.Double.doubleToLongBits(magnitude);
        long s = java.lang.Double.doubleToLongBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static float copySign(float magnitude, float sign) {
        int m = java.lang.Float.floatToIntBits(magnitude);
        int s = java.lang.Float.floatToIntBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static int getExponent(final double d) {
        return ((int) (((java.lang.Double.doubleToLongBits(d)) >>> 52) & 2047)) - 1023;
    }

    public static int getExponent(final float f) {
        return (((java.lang.Float.floatToIntBits(f)) >>> 23) & 255) - 127;
    }

    public static void main(java.lang.String[] a) {
        java.io.PrintStream out = java.lang.System.out;
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "LN_MANT", org.apache.commons.math3.util.FastMath.LN_MANT_LEN, org.apache.commons.math3.util.FastMath.lnMant.LN_MANT);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);
    }

    private static class ExpIntTable {
        private static final double[] EXP_INT_TABLE_A;

        private static final double[] EXP_INT_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                final double[] tmp = new double[2];
                final double[] recip = new double[2];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX); i++) {
                    org.apache.commons.math3.util.FastMathCalc.expint(i, tmp);
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[1];
                    if (i != 0) {
                        org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[0];
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[1];
                    }
                }
            }else {
                EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA();
                EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB();
            }
        }
    }

    private static class ExpFracTable {
        private static final double[] EXP_FRAC_TABLE_A;

        private static final double[] EXP_FRAC_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                final double[] tmp = new double[2];
                final double factor = 1.0 / ((org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN) - 1);
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length); i++) {
                    org.apache.commons.math3.util.FastMathCalc.slowexp((i * factor), tmp);
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
                }
            }else {
                EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA();
                EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB();
            }
        }
    }

    private static class lnMant {
        private static final double[][] LN_MANT;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length); i++) {
                    final double d = java.lang.Double.longBitsToDouble(((((long) (i)) << 42) | 4607182418800017408L));
                    org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
                }
            }else {
                LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
            }
        }
    }

    private static class CodyWaite {
        private final int finalK;

        private final double finalRemA;

        private final double finalRemB;

        CodyWaite(double xa, double xb) {
            int k = ((int) (xa * 0.6366197723675814));
            double remA;
            double remB;
            while (true) {
                double a = (-k) * 1.570796251296997;
                remA = xa + a;
                remB = -((remA - xa) - a);
                a = (-k) * 7.549789948768648E-8;
                double b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                a = (-k) * 6.123233995736766E-17;
                b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                if (remA > 0) {
                    break;
                }
                --k;
            } 
            this.finalK = k;
            this.finalRemA = remA;
            this.finalRemB = remB;
        }

        int getK() {
            return finalK;
        }

        double getRemA() {
            return finalRemA;
        }

        double getRemB() {
            return finalRemB;
        }
    }
}
00:37:52.739 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:37:52.739 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #249
00:37:52.740 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1096 which is executed by 719 tests
1033054629
00:37:53.039 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #250
00:37:53.039 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:3323 which is executed by 750 tests
1033054629
00:37:53.344 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #251
00:37:53.344 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1155 which is executed by 752 tests
1033054629
00:37:53.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:53.813 [pool-719-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (164 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:55.114 [pool-720-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:55.116 [pool-721-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:55.117 [pool-718-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:55.117 [pool-718-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:55.117 [pool-718-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1155.
00:37:55.117 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:55.284 [pool-723-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (162 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:56.575 [pool-724-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:56.577 [pool-725-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:56.577 [pool-722-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:56.577 [pool-722-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:56.577 [pool-722-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1155.
00:37:56.577 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #252
00:37:56.578 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:3319 which is executed by 797 tests
1033054629
00:37:56.884 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:57.046 [pool-727-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (157 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:58.336 [pool-728-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:58.338 [pool-729-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:37:58.338 [pool-726-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:58.338 [pool-726-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:37:58.338 [pool-726-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:3319.
00:37:58.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:37:58.515 [pool-731-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (171 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:00.208 [pool-732-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (508 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math3.exception.NumberIsTooSmallException: -11.5 is smaller than the minimum (-0.5)
    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:625)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:258)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)
00:38:00.233 [pool-733-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[-11.5 is smaller than the minimum (-0.5)]
org.apache.commons.math3.exception.NumberIsTooSmallException: -11.5 is smaller than the minimum (-0.5)    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:625)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:258)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)

00:38:00.233 [pool-730-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:00.234 [pool-730-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): -11.5 is smaller than the minimum (-0.5)]
00:38:00.234 [pool-730-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:3319.
00:38:00.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #253
00:38:00.234 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:3315 which is executed by 797 tests
1033054629
00:38:00.550 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:00.715 [pool-735-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (159 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:02.028 [pool-736-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:02.029 [pool-737-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:02.031 [pool-734-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:02.031 [pool-734-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:02.032 [pool-734-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:3315.
00:38:02.032 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:02.312 [pool-739-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (275 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:03.599 [pool-740-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math3.exception.NumberIsTooLargeException: 2 is larger than the maximum (1.5)
    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:628)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:258)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)
00:38:03.613 [pool-741-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[2 is larger than the maximum (1.5)]
org.apache.commons.math3.exception.NumberIsTooLargeException: 2 is larger than the maximum (1.5)    at org.apache.commons.math3.special.Gamma.logGamma1p(Gamma.java:628)
    at org.apache.commons.math3.special.Gamma.logGamma(Gamma.java:258)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:201)
    at org.apache.commons.math3.special.Beta.logBeta(Beta.java:170)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)

00:38:03.613 [pool-738-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:03.613 [pool-738-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): 2 is larger than the maximum (1.5)]
00:38:03.613 [pool-738-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:3315.
00:38:03.613 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #254
00:38:03.613 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:3314 which is executed by 797 tests
1033054629
00:38:03.918 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:04.069 [pool-743-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (145 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:05.316 [pool-742-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:1927: error: variable y might not have been initialized
        if ((x < 0) && (y != x)) {
                        ^
FastMath.java:1930: error: variable y might not have been initialized
        if (y == 0) {
            ^
00:38:06.162 [pool-742-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastMath {
    public static final double PI = (1.05414357E8 / 3.3554432E7) + 1.984187159361081E-9;

    public static final double E = (2850325.0 / 1048576.0) + 8.254840070411029E-8;

    static final int EXP_INT_TABLE_MAX_INDEX = 750;

    static final int EXP_INT_TABLE_LEN = (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) * 2;

    static final int LN_MANT_LEN = 1024;

    static final int EXP_FRAC_TABLE_LEN = 1025;

    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;

    private static final double LN_2_A = 0.6931470632553101;

    private static final double LN_2_B = 1.1730463525082348E-7;

    private static final double[][] LN_QUICK_COEF = new double[][]{ new double[]{ 1.0, 5.669184079525E-24 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.986821492305628E-8 }, new double[]{ -0.25, -6.663542893624021E-14 }, new double[]{ 0.19999998807907104, 1.1921056801463227E-8 }, new double[]{ -0.1666666567325592, -7.800414592973399E-9 }, new double[]{ 0.1428571343421936, 5.650007086920087E-9 }, new double[]{ -0.12502530217170715, -7.44321345601866E-11 }, new double[]{ 0.11113807559013367, 9.219544613762692E-9 } };

    private static final double[][] LN_HI_PREC_COEF = new double[][]{ new double[]{ 1.0, -6.032174644509064E-23 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.9868161777724352E-8 }, new double[]{ -0.2499999701976776, -2.957007209750105E-8 }, new double[]{ 0.19999954104423523, 1.5830993332061267E-10 }, new double[]{ -0.16624879837036133, -2.6033824355191673E-8 } };

    private static final int SINE_TABLE_LEN = 14;

    private static final double[] SINE_TABLE_A = new double[]{ +0.0, +0.1246747374534607, +0.24740394949913025, +0.366272509098053, +0.4794255495071411, +0.5850973129272461, +0.6816387176513672, +0.7675435543060303, +0.8414709568023682, +0.902267575263977, +0.9489846229553223, +0.9808930158615112, +0.9974949359893799, +0.9985313415527344 };

    private static final double[] SINE_TABLE_B = new double[]{ +0.0, -4.068233003401932E-9, +9.755392680573412E-9, +1.9987994582857286E-8, -1.0902938113007961E-8, -3.9986783938944604E-8, +4.23719669792332E-8, -5.207000323380292E-8, +2.800552834259E-8, +1.883511811213715E-8, -3.5997360512765566E-9, +4.116164446561962E-8, +5.0614674548127384E-8, -1.0129027912496858E-9 };

    private static final double[] COSINE_TABLE_A = new double[]{ +1.0, +0.9921976327896118, +0.9689123630523682, +0.9305076599121094, +0.8775825500488281, +0.8109631538391113, +0.7316888570785522, +0.6409968137741089, +0.5403022766113281, +0.4311765432357788, +0.3153223395347595, +0.19454771280288696, +0.07073719799518585, -0.05417713522911072 };

    private static final double[] COSINE_TABLE_B = new double[]{ +0.0, +3.4439717236742845E-8, +5.865827662008209E-8, -3.7999795083850525E-8, +1.184154459111628E-8, -3.43338934259355E-8, +1.1795268640216787E-8, +4.438921624363781E-8, +2.925681159240093E-8, -2.6437112632041807E-8, +2.2860509143963117E-8, -4.813899778443457E-9, +3.6725170580355583E-9, +2.0217439756338078E-10 };

    private static final double[] TANGENT_TABLE_A = new double[]{ +0.0, +0.1256551444530487, +0.25534194707870483, +0.3936265707015991, +0.5463024377822876, +0.7214844226837158, +0.9315965175628662, +1.1974215507507324, +1.5574076175689697, +2.092571258544922, +3.0095696449279785, +5.041914939880371, +14.101419448852539, -18.430862426757812 };

    private static final double[] TANGENT_TABLE_B = new double[]{ +0.0, -7.877917738262007E-9, -2.5857668567479893E-8, +5.2240336371356666E-9, +5.206150291559893E-8, +1.8307188599677033E-8, -5.7618793749770706E-8, +7.848361555046424E-8, +1.0708593250394448E-7, +1.7827257129423813E-8, +2.893485277253286E-8, +3.1660099222737955E-7, +4.983191803254889E-7, -3.356118100840571E-7 };

    private static final long[] RECIP_2PI = new long[]{ (683565275L << 32) | 2475754826L, (2131351028L << 32) | 2102212464L, (920167782L << 32) | 1326507024L, (2140428522L << 32) | 4155437400L, (1841896334L << 32) | 2425582776L, (26364858L << 32) | 2188665991L, (1065843399L << 32) | 743074255L, (3122695549L << 32) | 1269748001L, (979835913L << 32) | 2904022928L, (1315206542L << 32) | 1624559229L, (656480226L << 32) | 4018031118L, (3355321855L << 32) | 4152452611L, (4224435298L << 32) | 3598883655L, (3679297459L << 32) | 3388129901L, (3553726425L << 32) | 2811755147L, (1565126321L << 32) | 4210654302L, (3477196413L << 32) | 3801392314L, 2600392684L << 32 };

    private static final long[] PI_O_4_BITS = new long[]{ (3373259426L << 32) | 560513588L, (3301335691L << 32) | 2161908945L };

    private static final double[] EIGHTHS = new double[]{ 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625 };

    private static final double[] CBRTTWO = new double[]{ 0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994 };

    private static final long HEX_40000000 = 1073741824L;

    private static final long MASK_30BITS = (-1L) - ((org.apache.commons.math3.util.FastMath.HEX_40000000) - 1);

    private static final double TWO_POWER_52 = 4.503599627370496E15;

    private static final double F_1_3 = 1.0 / 3.0;

    private static final double F_1_5 = 1.0 / 5.0;

    private static final double F_1_7 = 1.0 / 7.0;

    private static final double F_1_9 = 1.0 / 9.0;

    private static final double F_1_11 = 1.0 / 11.0;

    private static final double F_1_13 = 1.0 / 13.0;

    private static final double F_1_15 = 1.0 / 15.0;

    private static final double F_1_17 = 1.0 / 17.0;

    private static final double F_3_4 = 3.0 / 4.0;

    private static final double F_15_16 = 15.0 / 16.0;

    private static final double F_13_14 = 13.0 / 14.0;

    private static final double F_11_12 = 11.0 / 12.0;

    private static final double F_9_10 = 9.0 / 10.0;

    private static final double F_7_8 = 7.0 / 8.0;

    private static final double F_5_6 = 5.0 / 6.0;

    private static final double F_1_2 = 1.0 / 2.0;

    private static final double F_1_4 = 1.0 / 4.0;

    private FastMath() {
    }

    private static double doubleHighPart(double d) {
        if ((d > (-(org.apache.commons.math3.util.Precision.SAFE_MIN))) && (d < (org.apache.commons.math3.util.Precision.SAFE_MIN))) {
            return d;
        }
        long xl = java.lang.Double.doubleToLongBits(d);
        xl = xl & (org.apache.commons.math3.util.FastMath.MASK_30BITS);
        return java.lang.Double.longBitsToDouble(xl);
    }

    public static double sqrt(final double a) {
        return java.lang.Math.sqrt(a);
    }

    public static double cosh(double x) {
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (org.apache.commons.math3.util.FastMath.exp((-x))) / 2.0;
        }
        double[] hiPrec = new double[2];
        if (x < 0.0) {
            x = -x;
        }
        org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
        double ya = (hiPrec[0]) + (hiPrec[1]);
        double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
        double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double yaa = (ya + temp) - temp;
        double yab = ya - yaa;
        double recip = 1.0 / ya;
        temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double recipa = (recip + temp) - temp;
        double recipb = recip - recipa;
        recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
        recipb += ((-yb) * recip) * recip;
        temp = ya + recipa;
        yb += -((temp - ya) - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -((temp - ya) - recipb);
        ya = temp;
        double result = ya + yb;
        result *= 0.5;
        return result;
    }

    public static double sinh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (-(org.apache.commons.math3.util.FastMath.exp((-x)))) / 2.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x > 0.25) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double yaa = (ya + temp) - temp;
            double yab = ya - yaa;
            double recip = 1.0 / ya;
            temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double recipa = (recip + temp) - temp;
            double recipb = recip - recipa;
            recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
            recipb += ((-yb) * recip) * recip;
            recipa = -recipa;
            recipb = -recipb;
            temp = ya + recipa;
            yb += -((temp - ya) - recipa);
            ya = temp;
            temp = ya + recipb;
            yb += -((temp - ya) - recipb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1(x, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            double temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double za = (denom + temp) - temp;
            double zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            temp = ya + ra;
            yb += -((temp - ya) - ra);
            ya = temp;
            temp = ya + rb;
            yb += -((temp - ya) - rb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double tanh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return 1.0;
        }
        if (x < (-20)) {
            return -1.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x >= 0.5) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp((x * 2.0), 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = (-1.0) + ya;
            double nb = -((na + 1.0) - ya);
            double temp = na + yb;
            nb += -((temp - na) - yb);
            na = temp;
            double da = 1.0 + ya;
            double db = -((da - 1.0) - ya);
            temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1((x * 2.0), hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = ya;
            double nb = yb;
            double da = 2.0 + ya;
            double db = -((da - 2.0) - ya);
            double temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double acosh(final double a) {
        return org.apache.commons.math3.util.FastMath.log((a + (org.apache.commons.math3.util.FastMath.sqrt(((a * a) - 1)))));
    }

    public static double asinh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAsinh;
        if (a > 0.167) {
            absAsinh = org.apache.commons.math3.util.FastMath.log(((org.apache.commons.math3.util.FastMath.sqrt(((a * a) + 1))) + a));
        }else {
            final double a2 = a * a;
            if (a > 0.097) {
                absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_17)) * (org.apache.commons.math3.util.FastMath.F_15_16)))) * (org.apache.commons.math3.util.FastMath.F_13_14)))) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
            }else
                if (a > 0.036) {
                    absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13)) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                }else
                    if (a > 0.0036) {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9)) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }else {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5)) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }


        }
        return negative ? -absAsinh : absAsinh;
    }

    public static double atanh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAtanh;
        if (a > 0.15) {
            absAtanh = 0.5 * (org.apache.commons.math3.util.FastMath.log(((1 + a) / (1 - a))));
        }else {
            final double a2 = a * a;
            if (a > 0.087) {
                absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_17)))))))))))))))));
            }else
                if (a > 0.031) {
                    absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13)))))))))))));
                }else
                    if (a > 0.003) {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9)))))))));
                    }else {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5)))));
                    }


        }
        return negative ? -absAtanh : absAtanh;
    }

    public static double signum(final double a) {
        return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a;
    }

    public static float signum(final float a) {
        return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a;
    }

    public static double nextUp(final double a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY);
    }

    public static float nextUp(final float a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY);
    }

    public static double random() {
        return java.lang.Math.random();
    }

    public static double exp(double x) {
        return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null);
    }

    private static double exp(double x, double extra, double[] hiPrec) {
        double intPartA;
        double intPartB;
        int intVal;
        if (x < 0.0) {
            intVal = ((int) (-x));
            if (intVal > 746) {
                if (hiPrec != null) {
                    hiPrec[0] = 0.0;
                    hiPrec[1] = 0.0;
                }
                return 0.0;
            }
            if (intVal > 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 40.19140625), extra, hiPrec)) / 2.85040095144011776E17;
                if (hiPrec != null) {
                    hiPrec[0] /= 2.85040095144011776E17;
                    hiPrec[1] /= 2.85040095144011776E17;
                }
                return result;
            }
            if (intVal == 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 1.494140625), extra, hiPrec)) / 4.455505956692757;
                if (hiPrec != null) {
                    hiPrec[0] /= 4.455505956692757;
                    hiPrec[1] /= 4.455505956692757;
                }
                return result;
            }
            intVal++;
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intVal = -intVal;
        }else {
            intVal = ((int) (x));
            if (intVal > 709) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
                    hiPrec[1] = 0.0;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
        }
        final int intFrac = ((int) ((x - intVal) * 1024.0));
        final double fracPartA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
        final double fracPartB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
        final double epsilon = x - (intVal + (intFrac / 1024.0));
        double z = 0.04168701738764507;
        z = (z * epsilon) + 0.1666666505023083;
        z = (z * epsilon) + 0.5000000000042687;
        z = (z * epsilon) + 1.0;
        z = (z * epsilon) + (-3.940510424527919E-20);
        double tempA = intPartA * fracPartA;
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
        final double tempC = tempB + tempA;
        final double result;
        if (extra != 0.0) {
            result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
        }else {
            result = ((tempC * z) + tempB) + tempA;
        }
        if (hiPrec != null) {
            hiPrec[0] = tempA;
            hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
        }
        return result;
    }

    public static double expm1(double x) {
        return org.apache.commons.math3.util.FastMath.expm1(x, null);
    }

    private static double expm1(double x, double[] hiPrecOut) {
        if ((x != x) || (x == 0.0)) {
            return x;
        }
        if ((x <= (-1.0)) || (x >= 1.0)) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            if (x > 0.0) {
                return ((-1.0) + (hiPrec[0])) + (hiPrec[1]);
            }else {
                final double ra = (-1.0) + (hiPrec[0]);
                double rb = -((ra + 1.0) - (hiPrec[0]));
                rb += hiPrec[1];
                return ra + rb;
            }
        }
        double baseA;
        double baseB;
        double epsilon;
        boolean negative = false;
        if (x < 0.0) {
            x = -x;
            negative = true;
        }
        {
            int intFrac = ((int) (x * 1024.0));
            double tempA = (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]) - 1.0;
            double tempB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
            double temp = tempA + tempB;
            tempB = -((temp - tempA) - tempB);
            tempA = temp;
            temp = tempA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            baseA = (tempA + temp) - temp;
            baseB = tempB + (tempA - baseA);
            epsilon = x - (intFrac / 1024.0);
        }
        double zb = 0.008336750013465571;
        zb = (zb * epsilon) + 0.041666663879186654;
        zb = (zb * epsilon) + 0.16666666666745392;
        zb = (zb * epsilon) + 0.49999999999999994;
        zb = zb * epsilon;
        zb = zb * epsilon;
        double za = epsilon;
        double temp = za + zb;
        zb = -((temp - za) - zb);
        za = temp;
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        temp = (za + temp) - temp;
        zb += za - temp;
        za = temp;
        double ya = za * baseA;
        temp = ya + (za * baseB);
        double yb = -((temp - ya) - (za * baseB));
        ya = temp;
        temp = ya + (zb * baseA);
        yb += -((temp - ya) - (zb * baseA));
        ya = temp;
        temp = ya + (zb * baseB);
        yb += -((temp - ya) - (zb * baseB));
        ya = temp;
        temp = ya + baseA;
        yb += -((temp - baseA) - ya);
        ya = temp;
        temp = ya + za;
        yb += -((temp - ya) - za);
        ya = temp;
        temp = ya + baseB;
        yb += -((temp - ya) - baseB);
        ya = temp;
        temp = ya + zb;
        yb += -((temp - ya) - zb);
        ya = temp;
        if (negative) {
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            za = (denom + temp) - temp;
            zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            ya = -ra;
            yb = -rb;
        }
        if (hiPrecOut != null) {
            hiPrecOut[0] = ya;
            hiPrecOut[1] = yb;
        }
        return ya + yb;
    }

    public static double log(final double x) {
        return org.apache.commons.math3.util.FastMath.log(x, null);
    }

    private static double log(final double x, final double[] hiPrec) {
        if (x == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        long bits = java.lang.Double.doubleToLongBits(x);
        if (((bits & -9223372036854775808L) != 0) || (x != x)) {
            if (x != 0.0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NaN;
                }
                return java.lang.Double.NaN;
            }
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (hiPrec != null) {
                hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
            }
            return java.lang.Double.POSITIVE_INFINITY;
        }
        int exp = ((int) (bits >> 52)) - 1023;
        if ((bits & 9218868437227405312L) == 0) {
            if (x == 0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.NEGATIVE_INFINITY;
            }
            bits <<= 1;
            while ((bits & 4503599627370496L) == 0) {
                --exp;
                bits <<= 1;
            } 
        }
        if ((exp == (-1)) || (exp == 0)) {
            if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {
                double xa = x - 1.0;
                double xb = (xa - x) + 1.0;
                double tmp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                double aa = (xa + tmp) - tmp;
                double ab = xa - aa;
                xa = aa;
                xb = ab;
                final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[((org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 1)];
                double ya = lnCoef_last[0];
                double yb = lnCoef_last[1];
                for (int i = (org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 2; i >= 0; i--) {
                    aa = ya * xa;
                    ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                    final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i];
                    aa = ya + (lnCoef_i[0]);
                    ab = yb + (lnCoef_i[1]);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                }
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                return ya + yb;
            }
        }
        final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 4499201580859392L) >> 42))];
        final double epsilon = (bits & 4398046511103L) / ((org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L));
        double lnza = 0.0;
        double lnzb = 0.0;
        if (hiPrec != null) {
            double tmp = epsilon * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double aa = (epsilon + tmp) - tmp;
            double ab = epsilon - aa;
            double xa = aa;
            double xb = ab;
            final double numer = bits & 4398046511103L;
            final double denom = (org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L);
            aa = (numer - (xa * denom)) - (xb * denom);
            xb += aa / denom;
            final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[((org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 1)];
            double ya = lnCoef_last[0];
            double yb = lnCoef_last[1];
            for (int i = (org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 2; i >= 0; i--) {
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i];
                aa = ya + (lnCoef_i[0]);
                ab = yb + (lnCoef_i[1]);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
            }
            aa = ya * xa;
            ab = ((ya * xb) + (yb * xa)) + (yb * xb);
            lnza = aa + ab;
            lnzb = -((lnza - aa) - ab);
        }else {
            lnza = -0.16624882440418567;
            lnza = (lnza * epsilon) + 0.19999954120254515;
            lnza = (lnza * epsilon) + (-0.2499999997677497);
            lnza = (lnza * epsilon) + 0.3333333333332802;
            lnza = (lnza * epsilon) + (-0.5);
            lnza = (lnza * epsilon) + 1.0;
            lnza = lnza * epsilon;
        }
        double a = (org.apache.commons.math3.util.FastMath.LN_2_A) * exp;
        double b = 0.0;
        double c = a + (lnm[0]);
        double d = -((c - a) - (lnm[0]));
        a = c;
        b = b + d;
        c = a + lnza;
        d = -((c - a) - lnza);
        a = c;
        b = b + d;
        c = a + ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp);
        d = -((c - a) - ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp));
        a = c;
        b = b + d;
        c = a + (lnm[1]);
        d = -((c - a) - (lnm[1]));
        a = c;
        b = b + d;
        c = a + lnzb;
        d = -((c - a) - lnzb);
        a = c;
        b = b + d;
        if (hiPrec != null) {
            hiPrec[0] = a;
            hiPrec[1] = b;
        }
        return a + b;
    }

    public static double log1p(final double x) {
        if (x == (-1)) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((x > 1.0E-6) || (x < (-1.0E-6))) {
            final double xpa = 1 + x;
            final double xpb = -((xpa - 1) - x);
            final double[] hiPrec = new double[2];
            final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
            if (java.lang.Double.isInfinite(lores)) {
                return lores;
            }
            final double fx1 = xpb / xpa;
            final double epsilon = (0.5 * fx1) + 1;
            return ((epsilon * fx1) + (hiPrec[1])) + (hiPrec[0]);
        }else {
            final double y = (((x * (org.apache.commons.math3.util.FastMath.F_1_3)) - (org.apache.commons.math3.util.FastMath.F_1_2)) * x) + 1;
            return y * x;
        }
    }

    public static double log10(final double x) {
        final double[] hiPrec = new double[2];
        final double lores = org.apache.commons.math3.util.FastMath.log(x, hiPrec);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        final double tmp = (hiPrec[0]) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double lna = ((hiPrec[0]) + tmp) - tmp;
        final double lnb = ((hiPrec[0]) - lna) + (hiPrec[1]);
        final double rln10a = 0.4342944622039795;
        final double rln10b = 1.9699272335463627E-8;
        return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna);
    }

    public static double log(double base, double x) {
        return (org.apache.commons.math3.util.FastMath.log(x)) / (org.apache.commons.math3.util.FastMath.log(base));
    }

    public static double pow(double x, double y) {
        final double[] lns = new double[2];
        if (y == 0.0) {
            return 1.0;
        }
        if (x != x) {
            return x;
        }
        if (x == 0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if ((bits & -9223372036854775808L) != 0) {
                long yi = ((long) (y));
                if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return -0.0;
                }
            }
            if (y < 0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }
            if (y > 0) {
                return 0.0;
            }
            return java.lang.Double.NaN;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0.0) {
                return 0.0;
            }else {
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) > 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return -0.0;
                }
                return 0.0;
            }
            if (y > 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) < 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x < 0) {
            if ((y >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (y <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
                return org.apache.commons.math3.util.FastMath.pow((-x), y);
            }
            if (y == ((long) (y))) {
                return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow((-x), y) : -(org.apache.commons.math3.util.FastMath.pow((-x), y));
            }else {
                return java.lang.Double.NaN;
            }
        }
        double ya;
        double yb;
        if ((y < 8.0E298) && (y > (-8.0E298))) {
            double tmp1 = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            ya = (y + tmp1) - tmp1;
            yb = y - ya;
        }else {
            double tmp1 = y * 9.313225746154785E-10;
            double tmp2 = tmp1 * 9.313225746154785E-10;
            ya = (((tmp1 + tmp2) - tmp1) * (org.apache.commons.math3.util.FastMath.HEX_40000000)) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            yb = y - ya;
        }
        final double lores = org.apache.commons.math3.util.FastMath.log(x, lns);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        double lna = lns[0];
        double lnb = lns[1];
        double tmp1 = lna * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double tmp2 = (lna + tmp1) - tmp1;
        lnb += lna - tmp2;
        lna = tmp2;
        final double aa = lna * ya;
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
        lna = aa + ab;
        lnb = -((lna - aa) - ab);
        double z = 1.0 / 120.0;
        z = (z * lnb) + (1.0 / 24.0);
        z = (z * lnb) + (1.0 / 6.0);
        z = (z * lnb) + 0.5;
        z = (z * lnb) + 1.0;
        z = z * lnb;
        final double result = org.apache.commons.math3.util.FastMath.exp(lna, z, null);
        return result;
    }

    public static double pow(double d, int e) {
        if (e == 0) {
            return 1.0;
        }else
            if (e < 0) {
                e = -e;
                d = 1.0 / d;
            }

        final int splitFactor = 134217729;
        final double cd = splitFactor * d;
        final double d1High = cd - (cd - d);
        final double d1Low = d - d1High;
        double resultHigh = 1;
        double resultLow = 0;
        double d2p = d;
        double d2pHigh = d1High;
        double d2pLow = d1Low;
        while (e != 0) {
            if ((e & 1) != 0) {
                final double tmpHigh = resultHigh * d2p;
                final double cRH = splitFactor * resultHigh;
                final double rHH = cRH - (cRH - resultHigh);
                final double rHL = resultHigh - rHH;
                final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
                resultHigh = tmpHigh;
                resultLow = (resultLow * d2p) + tmpLow;
            }
            final double tmpHigh = d2pHigh * d2p;
            final double cD2pH = splitFactor * d2pHigh;
            final double d2pHH = cD2pH - (cD2pH - d2pHigh);
            final double d2pHL = d2pHigh - d2pHH;
            final double tmpLow = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow));
            final double cTmpH = splitFactor * tmpHigh;
            d2pHigh = cTmpH - (cTmpH - tmpHigh);
            d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh);
            d2p = d2pHigh + d2pLow;
            e = e >> 1;
        } 
        return resultHigh + resultLow;
    }

    private static double polySine(final double x) {
        double x2 = x * x;
        double p = 2.7553817452272217E-6;
        p = (p * x2) + (-1.9841269659586505E-4);
        p = (p * x2) + 0.008333333333329196;
        p = (p * x2) + (-0.16666666666666666);
        p = (p * x2) * x;
        return p;
    }

    private static double polyCosine(double x) {
        double x2 = x * x;
        double p = 2.479773539153719E-5;
        p = (p * x2) + (-0.0013888888689039883);
        p = (p * x2) + 0.041666666666621166;
        p = (p * x2) + (-0.49999999999999994);
        p *= x2;
        return p;
    }

    private static double sinQ(double xa, double xb) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        final double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double result;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        if (xb != 0.0) {
            t = (((costA + costB) * (cosEpsA + cosEpsB)) - ((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
            c = a + t;
            d = -((c - a) - t);
            a = c;
            b = b + d;
        }
        result = a + b;
        return result;
    }

    private static double cosQ(double xa, double xb) {
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -((a - pi2a) + xa);
        b += pi2b - xb;
        return org.apache.commons.math3.util.FastMath.sinQ(a, b);
    }

    private static double tanQ(double xa, double xb, boolean cotanFlag) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        double sina = a + b;
        double sinb = -((sina - a) - b);
        a = b = c = d = 0.0;
        t = costA * cosEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        t = (-sintA) * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB);
        b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB));
        double cosa = a + b;
        double cosb = -((cosa - a) - b);
        if (cotanFlag) {
            double tmp;
            tmp = cosa;
            cosa = sina;
            sina = tmp;
            tmp = cosb;
            cosb = sinb;
            sinb = tmp;
        }
        double est = sina / cosa;
        temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double esta = (est + temp) - temp;
        double estb = est - esta;
        temp = cosa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double cosaa = (cosa + temp) - temp;
        double cosab = cosa - cosaa;
        double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa;
        err += sinb / cosa;
        err += (((-sina) * cosb) / cosa) / cosa;
        if (xb != 0.0) {
            double xbadj = xb + ((est * est) * xb);
            if (cotanFlag) {
                xbadj = -xbadj;
            }
            err += xbadj;
        }
        return est + err;
    }

    private static void reducePayneHanek(double x, double[] result) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        inbits &= 4503599627370495L;
        inbits |= 4503599627370496L;
        exponent++;
        inbits <<= 11;
        long shpi0;
        long shpiA;
        long shpiB;
        int idx = exponent >> 6;
        int shift = exponent - (idx << 6);
        if (shift != 0) {
            shpi0 = (idx == 0) ? 0 : (org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)]) << shift;
            shpi0 |= (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) >>> (64 - shift);
            shpiA = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) >>> (64 - shift));
            shpiB = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 2)]) >>> (64 - shift));
        }else {
            shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)];
            shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx];
            shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)];
        }
        long a = inbits >>> 32;
        long b = inbits & 4294967295L;
        long c = shpiA >>> 32;
        long d = shpiA & 4294967295L;
        long ac = a * c;
        long bd = b * d;
        long bc = b * c;
        long ad = a * d;
        long prodB = bd + (ad << 32);
        long prodA = ac + (ad >>> 32);
        boolean bita = (bd & -9223372036854775808L) != 0;
        boolean bitb = (ad & 2147483648L) != 0;
        boolean bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prodB = prodB + (bc << 32);
        prodA = prodA + (bc >>> 32);
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpiB >>> 32;
        d = shpiB & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prodB += ac;
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpi0 >>> 32;
        d = shpi0 & 4294967295L;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        prodA += bd + ((bc + ad) << 32);
        int intPart = ((int) (prodA >>> 62));
        prodA <<= 2;
        prodA |= prodB >>> 62;
        prodB <<= 2;
        a = prodA >>> 32;
        b = prodA & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        long prod2B = bd + (ad << 32);
        long prod2A = ac + (ad >>> 32);
        bita = (bd & -9223372036854775808L) != 0;
        bitb = (ad & 2147483648L) != 0;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prod2B = prod2B + (bc << 32);
        prod2A = prod2A + (bc >>> 32);
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        a = prodB >>> 32;
        b = prodB & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        double tmpA = (prod2A >>> 12) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double tmpB = ((((prod2A & 4095L) << 40) + (prod2B >>> 24)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double sumA = tmpA + tmpB;
        double sumB = -((sumA - tmpA) - tmpB);
        result[0] = intPart;
        result[1] = sumA * 2.0;
        result[2] = sumB * 2.0;
    }

    public static double sin(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa;
        double xb = 0.0;
        xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (negative) {
            quadrant ^= 2;
        }
        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            case 1 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 3 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double cos(double x) {
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            xa = -xa;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 1 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            case 3 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double tan(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (xa > 1.5) {
            final double pi2a = 1.5707963267948966;
            final double pi2b = 6.123233995736766E-17;
            final double a = pi2a - xa;
            double b = -((a - pi2a) + xa);
            b += pi2b - xb;
            xa = a + b;
            xb = -((xa - a) - b);
            quadrant ^= 1;
            negative ^= true;
        }
        double result;
        if ((quadrant & 1) == 0) {
            result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false);
        }else {
            result = -(org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true));
        }
        if (negative) {
            result = -result;
        }
        return result;
    }

    public static double atan(double x) {
        return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false);
    }

    private static double atan(double xa, double xb, boolean leftPlane) {
        boolean negate = false;
        int idx;
        if (xa == 0.0) {
            return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
        }
        if (xa < 0) {
            xa = -xa;
            xb = -xb;
            negate = true;
        }
        if (xa > 1.633123935319537E16) {
            return negate ^ leftPlane ? (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2) : (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (xa < 1) {
            idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
        }else {
            final double oneOverXa = 1 / xa;
            idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
        }
        double epsA = xa - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
        double epsB = -((epsA - xa) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]));
        epsB += xb - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
        double temp = epsA + epsB;
        epsB = -((temp - epsA) - epsB);
        epsA = temp;
        temp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (xa + temp) - temp;
        double yb = (xb + xa) - ya;
        xa = ya;
        xb += yb;
        if (idx == 0) {
            final double denom = 1.0 / (1.0 + ((xa + xb) * ((org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]))));
            ya = epsA * denom;
            yb = epsB * denom;
        }else {
            double temp2 = xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
            double za = 1.0 + temp2;
            double zb = -((za - 1.0) - temp2);
            temp2 = (xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])) + (xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]));
            temp = za + temp2;
            zb += -((temp - za) - temp2);
            za = temp;
            zb += xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
            ya = epsA / za;
            temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double yaa = (ya + temp) - temp;
            final double yab = ya - yaa;
            temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double zaa = (za + temp) - temp;
            final double zab = za - zaa;
            yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;
            yb += (((-epsA) * zb) / za) / za;
            yb += epsB / za;
        }
        epsA = ya;
        epsB = yb;
        final double epsA2 = epsA * epsA;
        yb = 0.07490822288864472;
        yb = (yb * epsA2) + (-0.09088450866185192);
        yb = (yb * epsA2) + 0.11111095942313305;
        yb = (yb * epsA2) + (-0.1428571423679182);
        yb = (yb * epsA2) + 0.19999999999923582;
        yb = (yb * epsA2) + (-0.33333333333333287);
        yb = (yb * epsA2) * epsA;
        ya = epsA;
        temp = ya + yb;
        yb = -((temp - ya) - yb);
        ya = temp;
        yb += epsB / (1.0 + (epsA * epsA));
        double za = (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) + ya;
        double zb = -((za - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx])) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double result = za + zb;
        double resultb = -((result - za) - zb);
        if (leftPlane) {
            final double pia = 1.5707963267948966 * 2;
            final double pib = 6.123233995736766E-17 * 2;
            za = pia - result;
            zb = -((za - pia) + result);
            zb += pib - resultb;
            result = za + zb;
            resultb = -((result - za) - zb);
        }
        if (negate ^ leftPlane) {
            result = -result;
        }
        return result;
    }

    public static double atan2(double y, double x) {
        if ((x != x) || (y != y)) {
            return java.lang.Double.NaN;
        }
        if (y == 0) {
            final double result = x * y;
            final double invx = 1.0 / x;
            final double invy = 1.0 / y;
            if (invx == 0) {
                if (x > 0) {
                    return y;
                }else {
                    return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
                }
            }
            if ((x < 0) || (invx < 0)) {
                if ((y < 0) || (invy < 0)) {
                    return -(java.lang.Math.PI);
                }else {
                    return java.lang.Math.PI;
                }
            }else {
                return result;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((y > 0) || ((1 / y) > 0)) {
                return 0.0;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((y > 0.0) || ((1 / y) > 0.0)) {
                return java.lang.Math.PI;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -(java.lang.Math.PI);
            }
        }
        if (x == 0) {
            if ((y > 0) || ((1 / y) > 0)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
        }
        final double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return org.apache.commons.math3.util.FastMath.atan(r, 0, (x < 0));
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        final double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        final double xb = x - xa;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        final double temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        if (ra == 0) {
            ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y);
        }
        final double result = org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
        return result;
    }

    public static double asin(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == 1.0) {
            return (java.lang.Math.PI) / 2.0;
        }
        if (x == (-1.0)) {
            return (-(java.lang.Math.PI)) / 2.0;
        }
        if (x == 0.0) {
            return x;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y;
        y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        double dx = zb / (2.0 * y);
        double r = x / y;
        temp = r * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ra = (r + temp) - temp;
        double rb = r - ra;
        rb += ((((x - (ra * ya)) - (ra * yb)) - (rb * ya)) - (rb * yb)) / y;
        rb += (((-x) * dx) / y) / y;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, false);
    }

    public static double acos(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == (-1.0)) {
            return java.lang.Math.PI;
        }
        if (x == 1.0) {
            return 0.0;
        }
        if (x == 0) {
            return (java.lang.Math.PI) / 2.0;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        yb += zb / (2.0 * y);
        y = ya + yb;
        yb = -((y - ya) - yb);
        double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return (java.lang.Math.PI) / 2;
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        rb += yb / x;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
    }

    public static double cbrt(double x) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        boolean subnormal = false;
        if (exponent == (-1023)) {
            if (x == 0) {
                return x;
            }
            subnormal = true;
            x *= 1.8014398509481984E16;
            inbits = java.lang.Double.doubleToLongBits(x);
            exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        }
        if (exponent == 1024) {
            return x;
        }
        int exp3 = exponent / 3;
        double p2 = java.lang.Double.longBitsToDouble(((inbits & -9223372036854775808L) | (((long) ((exp3 + 1023) & 2047)) << 52)));
        final double mant = java.lang.Double.longBitsToDouble(((inbits & 4503599627370495L) | 4607182418800017408L));
        double est = -0.010714690733195933;
        est = (est * mant) + 0.0875862700108075;
        est = (est * mant) + (-0.3058015757857271);
        est = (est * mant) + 0.7249995199969751;
        est = (est * mant) + 0.5039018405998233;
        est *= org.apache.commons.math3.util.FastMath.CBRTTWO[((exponent % 3) + 2)];
        final double xs = x / ((p2 * p2) * p2);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        double temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (est + temp) - temp;
        double yb = est - ya;
        double za = ya * ya;
        double zb = ((ya * yb) * 2.0) + (yb * yb);
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (za + temp) - temp;
        zb += za - temp2;
        za = temp2;
        zb = ((za * yb) + (ya * zb)) + (zb * yb);
        za = za * ya;
        double na = xs - za;
        double nb = -((na - xs) + za);
        nb -= zb;
        est += (na + nb) / ((3 * est) * est);
        est *= p2;
        if (subnormal) {
            est *= 3.814697265625E-6;
        }
        return est;
    }

    public static double toRadians(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 0.01745329052209854;
        final double factb = 1.997844754509471E-9;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
        if (result == 0) {
            result = result * x;
        }
        return result;
    }

    public static double toDegrees(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 57.2957763671875;
        final double factb = 3.145894820876798E-6;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
    }

    public static int abs(final int x) {
        return x < 0 ? -x : x;
    }

    public static long abs(final long x) {
        return x < 0L ? -x : x;
    }

    public static float abs(final float x) {
        return x < 0.0F ? -x : x == 0.0F ? 0.0F : x;
    }

    public static double abs(double x) {
        return x < 0.0 ? -x : x == 0.0 ? 0.0 : x;
    }

    public static double ulp(double x) {
        if (java.lang.Double.isInfinite(x)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Double.longBitsToDouble(((java.lang.Double.doubleToLongBits(x)) ^ 1)))));
    }

    public static float ulp(float x) {
        if (java.lang.Float.isInfinite(x)) {
            return java.lang.Float.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Float.intBitsToFloat(((java.lang.Float.floatToIntBits(x)) ^ 1)))));
    }

    public static double scalb(final double d, final int n) {
        if ((n > (-1023)) && (n < 1024)) {
            return d * (java.lang.Double.longBitsToDouble((((long) (n + 1023)) << 52)));
        }
        if (((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) || (d == 0)) {
            return d;
        }
        if (n < (-2098)) {
            return d > 0 ? 0.0 : -0.0;
        }
        if (n > 2097) {
            return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        int exponent = ((int) (bits >>> 52)) & 2047;
        long mantissa = bits & 4503599627370495L;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
            }else
                if (scaledExponent > (-53)) {
                    mantissa = mantissa | (1L << 52);
                    final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Double.longBitsToDouble((sign | mantissa));
                }else {
                    return sign == 0L ? 0.0 : -0.0;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 52) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 4503599627370495L;
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }

        }
    }

    public static float scalb(final float f, final int n) {
        if ((n > (-127)) && (n < 128)) {
            return f * (java.lang.Float.intBitsToFloat(((n + 127) << 23)));
        }
        if (((java.lang.Float.isNaN(f)) || (java.lang.Float.isInfinite(f))) || (f == 0.0F)) {
            return f;
        }
        if (n < (-277)) {
            return f > 0 ? 0.0F : -0.0F;
        }
        if (n > 276) {
            return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
        }
        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        int exponent = (bits >>> 23) & 255;
        int mantissa = bits & 8388607;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
            }else
                if (scaledExponent > (-24)) {
                    mantissa = mantissa | (1 << 23);
                    final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Float.intBitsToFloat((sign | mantissa));
                }else {
                    return sign == 0 ? 0.0F : -0.0F;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 23) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 8388607;
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }

        }
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Double.NaN;
        }else
            if (d == direction) {
                return direction;
            }else
                if (java.lang.Double.isInfinite(d)) {
                    return d < 0 ? -(java.lang.Double.MAX_VALUE) : java.lang.Double.MAX_VALUE;
                }else
                    if (d == 0) {
                        return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
                    }



        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        if ((direction < d) ^ (sign == 0L)) {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) + 1)));
        }else {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) - 1)));
        }
    }

    public static float nextAfter(final float f, final double direction) {
        if ((java.lang.Double.isNaN(f)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Float.NaN;
        }else
            if (f == direction) {
                return ((float) (direction));
            }else
                if (java.lang.Float.isInfinite(f)) {
                    return f < 0.0F ? -(java.lang.Float.MAX_VALUE) : java.lang.Float.MAX_VALUE;
                }else
                    if (f == 0.0F) {
                        return direction < 0 ? -(java.lang.Float.MIN_VALUE) : java.lang.Float.MIN_VALUE;
                    }



        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        if ((direction < f) ^ (sign == 0)) {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) + 1)));
        }else {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) - 1)));
        }
    }

    public static double floor(double x) {
        long y;
        if (x != x) {
            return x;
        }
        if ((x >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
            return x;
        }
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(187).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_1_13",org.apache.commons.math3.util.FastMath.F_1_13);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_1_11",org.apache.commons.math3.util.FastMath.F_1_11);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_1_17",org.apache.commons.math3.util.FastMath.F_1_17);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_11_12",org.apache.commons.math3.util.FastMath.F_11_12);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_13_14",org.apache.commons.math3.util.FastMath.F_13_14);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_1_15",org.apache.commons.math3.util.FastMath.F_1_15);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_1_2",org.apache.commons.math3.util.FastMath.F_1_2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_15_16",org.apache.commons.math3.util.FastMath.F_15_16);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.EIGHTHS",org.apache.commons.math3.util.FastMath.EIGHTHS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_1_3",org.apache.commons.math3.util.FastMath.F_1_3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.LN_2_A",org.apache.commons.math3.util.FastMath.LN_2_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_1_4",org.apache.commons.math3.util.FastMath.F_1_4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.LN_2_B",org.apache.commons.math3.util.FastMath.LN_2_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_1_5",org.apache.commons.math3.util.FastMath.F_1_5);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_3_4",org.apache.commons.math3.util.FastMath.F_3_4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.PI_O_4_BITS",org.apache.commons.math3.util.FastMath.PI_O_4_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_1_7",org.apache.commons.math3.util.FastMath.F_1_7);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.RECIP_2PI",org.apache.commons.math3.util.FastMath.RECIP_2PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.HEX_40000000",org.apache.commons.math3.util.FastMath.HEX_40000000);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_1_9",org.apache.commons.math3.util.FastMath.F_1_9);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_5_6",org.apache.commons.math3.util.FastMath.F_5_6);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.LN_MANT_LEN",org.apache.commons.math3.util.FastMath.LN_MANT_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_7_8",org.apache.commons.math3.util.FastMath.F_7_8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.MASK_30BITS",org.apache.commons.math3.util.FastMath.MASK_30BITS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.TWO_POWER_52",org.apache.commons.math3.util.FastMath.TWO_POWER_52);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.PI",org.apache.commons.math3.util.FastMath.PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_A",org.apache.commons.math3.util.FastMath.SINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.E",org.apache.commons.math3.util.FastMath.E);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_B",org.apache.commons.math3.util.FastMath.SINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",org.apache.commons.math3.util.FastMath.LN_QUICK_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.CBRTTWO",org.apache.commons.math3.util.FastMath.CBRTTWO);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.F_9_10",org.apache.commons.math3.util.FastMath.F_9_10);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(187).collectionEnds();
        }
        if (runtimeAngelicValue)
            y = ((long) (x));

        if ((x < 0) && (y != x)) {
            y--;
        }
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double ceil(double x) {
        double y;
        if (x != x) {
            return x;
        }
        y = org.apache.commons.math3.util.FastMath.floor(x);
        if (y == x) {
            return y;
        }
        y += 1.0;
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double rint(double x) {
        double y = org.apache.commons.math3.util.FastMath.floor(x);
        double d = x - y;
        if (d > 0.5) {
            if (y == (-1.0)) {
                return -0.0;
            }
            return y + 1.0;
        }
        if (d < 0.5) {
            return y;
        }
        long z = ((long) (y));
        return (z & 1) == 0 ? y : y + 1.0;
    }

    public static long round(double x) {
        return ((long) (org.apache.commons.math3.util.FastMath.floor((x + 0.5))));
    }

    public static int round(final float x) {
        return ((int) (org.apache.commons.math3.util.FastMath.floor((x + 0.5F))));
    }

    public static int min(final int a, final int b) {
        return a <= b ? a : b;
    }

    public static long min(final long a, final long b) {
        return a <= b ? a : b;
    }

    public static float min(final float a, final float b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return a;
        }
        return b;
    }

    public static double min(final double a, final double b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return a;
        }
        return b;
    }

    public static int max(final int a, final int b) {
        return a <= b ? b : a;
    }

    public static long max(final long a, final long b) {
        return a <= b ? b : a;
    }

    public static float max(final float a, final float b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return b;
        }
        return a;
    }

    public static double max(final double a, final double b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return b;
        }
        return a;
    }

    public static double hypot(final double x, final double y) {
        if ((java.lang.Double.isInfinite(x)) || (java.lang.Double.isInfinite(y))) {
            return java.lang.Double.POSITIVE_INFINITY;
        }else
            if ((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(y))) {
                return java.lang.Double.NaN;
            }else {
                final int expX = org.apache.commons.math3.util.FastMath.getExponent(x);
                final int expY = org.apache.commons.math3.util.FastMath.getExponent(y);
                if (expX > (expY + 27)) {
                    return org.apache.commons.math3.util.FastMath.abs(x);
                }else
                    if (expY > (expX + 27)) {
                        return org.apache.commons.math3.util.FastMath.abs(y);
                    }else {
                        final int middleExp = (expX + expY) / 2;
                        final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, (-middleExp));
                        final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, (-middleExp));
                        final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(((scaledX * scaledX) + (scaledY * scaledY)));
                        return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp);
                    }

            }

    }

    public static double IEEEremainder(double dividend, double divisor) {
        return java.lang.StrictMath.IEEEremainder(dividend, divisor);
    }

    public static double copySign(double magnitude, double sign) {
        long m = java.lang.Double.doubleToLongBits(magnitude);
        long s = java.lang.Double.doubleToLongBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static float copySign(float magnitude, float sign) {
        int m = java.lang.Float.floatToIntBits(magnitude);
        int s = java.lang.Float.floatToIntBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static int getExponent(final double d) {
        return ((int) (((java.lang.Double.doubleToLongBits(d)) >>> 52) & 2047)) - 1023;
    }

    public static int getExponent(final float f) {
        return (((java.lang.Float.floatToIntBits(f)) >>> 23) & 255) - 127;
    }

    public static void main(java.lang.String[] a) {
        java.io.PrintStream out = java.lang.System.out;
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "LN_MANT", org.apache.commons.math3.util.FastMath.LN_MANT_LEN, org.apache.commons.math3.util.FastMath.lnMant.LN_MANT);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);
    }

    private static class ExpIntTable {
        private static final double[] EXP_INT_TABLE_A;

        private static final double[] EXP_INT_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                final double[] tmp = new double[2];
                final double[] recip = new double[2];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX); i++) {
                    org.apache.commons.math3.util.FastMathCalc.expint(i, tmp);
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[1];
                    if (i != 0) {
                        org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[0];
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[1];
                    }
                }
            }else {
                EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA();
                EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB();
            }
        }
    }

    private static class ExpFracTable {
        private static final double[] EXP_FRAC_TABLE_A;

        private static final double[] EXP_FRAC_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                final double[] tmp = new double[2];
                final double factor = 1.0 / ((org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN) - 1);
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length); i++) {
                    org.apache.commons.math3.util.FastMathCalc.slowexp((i * factor), tmp);
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
                }
            }else {
                EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA();
                EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB();
            }
        }
    }

    private static class lnMant {
        private static final double[][] LN_MANT;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length); i++) {
                    final double d = java.lang.Double.longBitsToDouble(((((long) (i)) << 42) | 4607182418800017408L));
                    org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
                }
            }else {
                LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
            }
        }
    }

    private static class CodyWaite {
        private final int finalK;

        private final double finalRemA;

        private final double finalRemB;

        CodyWaite(double xa, double xb) {
            int k = ((int) (xa * 0.6366197723675814));
            double remA;
            double remB;
            while (true) {
                double a = (-k) * 1.570796251296997;
                remA = xa + a;
                remB = -((remA - xa) - a);
                a = (-k) * 7.549789948768648E-8;
                double b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                a = (-k) * 6.123233995736766E-17;
                b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                if (remA > 0) {
                    break;
                }
                --k;
            } 
            this.finalK = k;
            this.finalRemA = remA;
            this.finalRemB = remB;
        }

        int getK() {
            return finalK;
        }

        double getRemA() {
            return finalRemA;
        }

        double getRemB() {
            return finalRemB;
        }
    }
}
00:38:06.164 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:38:06.164 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #255
00:38:06.165 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:3310 which is executed by 810 tests
1033054629
00:38:06.469 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:06.638 [pool-745-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (164 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:07.886 [pool-746-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:07.888 [pool-747-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:07.888 [pool-744-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:07.888 [pool-744-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:07.888 [pool-744-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:3310.
00:38:07.888 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:08.047 [pool-749-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (154 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:09.331 [pool-750-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:09.333 [pool-751-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:09.333 [pool-748-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:09.333 [pool-748-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:09.333 [pool-748-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:3310.
00:38:09.333 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #256
00:38:09.334 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:3306 which is executed by 810 tests
1033054629
00:38:09.638 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:09.787 [pool-753-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (144 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:11.074 [pool-754-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:11.076 [pool-755-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:11.076 [pool-752-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:11.076 [pool-752-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:11.076 [pool-752-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:3306.
00:38:11.076 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:11.224 [pool-757-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (142 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:12.508 [pool-758-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:12.510 [pool-759-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:12.510 [pool-756-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:12.511 [pool-756-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:12.511 [pool-756-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:3306.
00:38:12.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #257
00:38:12.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath$ExpIntTable:3680 which is executed by 1798 tests
1033054629
00:38:12.817 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #258
00:38:12.817 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:931 which is executed by 899 tests
1033054629
00:38:13.114 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #259
00:38:13.114 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:925 which is executed by 899 tests
1033054629
00:38:13.419 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:13.592 [pool-761-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (168 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:14.880 [pool-762-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:14.882 [pool-763-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:14.882 [pool-760-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:14.882 [pool-760-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:14.882 [pool-760-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:925.
00:38:14.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:15.031 [pool-765-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (144 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:16.323 [pool-766-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (22 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math3.util.FastMath.exp(FastMath.java:505)
    at org.apache.commons.math3.util.FastMath.exp(FastMath.java:372)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:38:16.325 [pool-767-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.util.FastMath.exp(FastMath.java:505)
    at org.apache.commons.math3.util.FastMath.exp(FastMath.java:372)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:136)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

00:38:16.326 [pool-764-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:16.326 [pool-764-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): null]
00:38:16.326 [pool-764-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:925.
00:38:16.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #260
00:38:16.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:919 which is executed by 899 tests
1033054629
00:38:16.624 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:16.771 [pool-769-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (142 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:18.022 [pool-768-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:508: error: variable result might not have been initialized
        return result;
               ^
00:38:18.867 [pool-768-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastMath {
    public static final double PI = (1.05414357E8 / 3.3554432E7) + 1.984187159361081E-9;

    public static final double E = (2850325.0 / 1048576.0) + 8.254840070411029E-8;

    static final int EXP_INT_TABLE_MAX_INDEX = 750;

    static final int EXP_INT_TABLE_LEN = (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) * 2;

    static final int LN_MANT_LEN = 1024;

    static final int EXP_FRAC_TABLE_LEN = 1025;

    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;

    private static final double LN_2_A = 0.6931470632553101;

    private static final double LN_2_B = 1.1730463525082348E-7;

    private static final double[][] LN_QUICK_COEF = new double[][]{ new double[]{ 1.0, 5.669184079525E-24 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.986821492305628E-8 }, new double[]{ -0.25, -6.663542893624021E-14 }, new double[]{ 0.19999998807907104, 1.1921056801463227E-8 }, new double[]{ -0.1666666567325592, -7.800414592973399E-9 }, new double[]{ 0.1428571343421936, 5.650007086920087E-9 }, new double[]{ -0.12502530217170715, -7.44321345601866E-11 }, new double[]{ 0.11113807559013367, 9.219544613762692E-9 } };

    private static final double[][] LN_HI_PREC_COEF = new double[][]{ new double[]{ 1.0, -6.032174644509064E-23 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.9868161777724352E-8 }, new double[]{ -0.2499999701976776, -2.957007209750105E-8 }, new double[]{ 0.19999954104423523, 1.5830993332061267E-10 }, new double[]{ -0.16624879837036133, -2.6033824355191673E-8 } };

    private static final int SINE_TABLE_LEN = 14;

    private static final double[] SINE_TABLE_A = new double[]{ +0.0, +0.1246747374534607, +0.24740394949913025, +0.366272509098053, +0.4794255495071411, +0.5850973129272461, +0.6816387176513672, +0.7675435543060303, +0.8414709568023682, +0.902267575263977, +0.9489846229553223, +0.9808930158615112, +0.9974949359893799, +0.9985313415527344 };

    private static final double[] SINE_TABLE_B = new double[]{ +0.0, -4.068233003401932E-9, +9.755392680573412E-9, +1.9987994582857286E-8, -1.0902938113007961E-8, -3.9986783938944604E-8, +4.23719669792332E-8, -5.207000323380292E-8, +2.800552834259E-8, +1.883511811213715E-8, -3.5997360512765566E-9, +4.116164446561962E-8, +5.0614674548127384E-8, -1.0129027912496858E-9 };

    private static final double[] COSINE_TABLE_A = new double[]{ +1.0, +0.9921976327896118, +0.9689123630523682, +0.9305076599121094, +0.8775825500488281, +0.8109631538391113, +0.7316888570785522, +0.6409968137741089, +0.5403022766113281, +0.4311765432357788, +0.3153223395347595, +0.19454771280288696, +0.07073719799518585, -0.05417713522911072 };

    private static final double[] COSINE_TABLE_B = new double[]{ +0.0, +3.4439717236742845E-8, +5.865827662008209E-8, -3.7999795083850525E-8, +1.184154459111628E-8, -3.43338934259355E-8, +1.1795268640216787E-8, +4.438921624363781E-8, +2.925681159240093E-8, -2.6437112632041807E-8, +2.2860509143963117E-8, -4.813899778443457E-9, +3.6725170580355583E-9, +2.0217439756338078E-10 };

    private static final double[] TANGENT_TABLE_A = new double[]{ +0.0, +0.1256551444530487, +0.25534194707870483, +0.3936265707015991, +0.5463024377822876, +0.7214844226837158, +0.9315965175628662, +1.1974215507507324, +1.5574076175689697, +2.092571258544922, +3.0095696449279785, +5.041914939880371, +14.101419448852539, -18.430862426757812 };

    private static final double[] TANGENT_TABLE_B = new double[]{ +0.0, -7.877917738262007E-9, -2.5857668567479893E-8, +5.2240336371356666E-9, +5.206150291559893E-8, +1.8307188599677033E-8, -5.7618793749770706E-8, +7.848361555046424E-8, +1.0708593250394448E-7, +1.7827257129423813E-8, +2.893485277253286E-8, +3.1660099222737955E-7, +4.983191803254889E-7, -3.356118100840571E-7 };

    private static final long[] RECIP_2PI = new long[]{ (683565275L << 32) | 2475754826L, (2131351028L << 32) | 2102212464L, (920167782L << 32) | 1326507024L, (2140428522L << 32) | 4155437400L, (1841896334L << 32) | 2425582776L, (26364858L << 32) | 2188665991L, (1065843399L << 32) | 743074255L, (3122695549L << 32) | 1269748001L, (979835913L << 32) | 2904022928L, (1315206542L << 32) | 1624559229L, (656480226L << 32) | 4018031118L, (3355321855L << 32) | 4152452611L, (4224435298L << 32) | 3598883655L, (3679297459L << 32) | 3388129901L, (3553726425L << 32) | 2811755147L, (1565126321L << 32) | 4210654302L, (3477196413L << 32) | 3801392314L, 2600392684L << 32 };

    private static final long[] PI_O_4_BITS = new long[]{ (3373259426L << 32) | 560513588L, (3301335691L << 32) | 2161908945L };

    private static final double[] EIGHTHS = new double[]{ 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625 };

    private static final double[] CBRTTWO = new double[]{ 0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994 };

    private static final long HEX_40000000 = 1073741824L;

    private static final long MASK_30BITS = (-1L) - ((org.apache.commons.math3.util.FastMath.HEX_40000000) - 1);

    private static final double TWO_POWER_52 = 4.503599627370496E15;

    private static final double F_1_3 = 1.0 / 3.0;

    private static final double F_1_5 = 1.0 / 5.0;

    private static final double F_1_7 = 1.0 / 7.0;

    private static final double F_1_9 = 1.0 / 9.0;

    private static final double F_1_11 = 1.0 / 11.0;

    private static final double F_1_13 = 1.0 / 13.0;

    private static final double F_1_15 = 1.0 / 15.0;

    private static final double F_1_17 = 1.0 / 17.0;

    private static final double F_3_4 = 3.0 / 4.0;

    private static final double F_15_16 = 15.0 / 16.0;

    private static final double F_13_14 = 13.0 / 14.0;

    private static final double F_11_12 = 11.0 / 12.0;

    private static final double F_9_10 = 9.0 / 10.0;

    private static final double F_7_8 = 7.0 / 8.0;

    private static final double F_5_6 = 5.0 / 6.0;

    private static final double F_1_2 = 1.0 / 2.0;

    private static final double F_1_4 = 1.0 / 4.0;

    private FastMath() {
    }

    private static double doubleHighPart(double d) {
        if ((d > (-(org.apache.commons.math3.util.Precision.SAFE_MIN))) && (d < (org.apache.commons.math3.util.Precision.SAFE_MIN))) {
            return d;
        }
        long xl = java.lang.Double.doubleToLongBits(d);
        xl = xl & (org.apache.commons.math3.util.FastMath.MASK_30BITS);
        return java.lang.Double.longBitsToDouble(xl);
    }

    public static double sqrt(final double a) {
        return java.lang.Math.sqrt(a);
    }

    public static double cosh(double x) {
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (org.apache.commons.math3.util.FastMath.exp((-x))) / 2.0;
        }
        double[] hiPrec = new double[2];
        if (x < 0.0) {
            x = -x;
        }
        org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
        double ya = (hiPrec[0]) + (hiPrec[1]);
        double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
        double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double yaa = (ya + temp) - temp;
        double yab = ya - yaa;
        double recip = 1.0 / ya;
        temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double recipa = (recip + temp) - temp;
        double recipb = recip - recipa;
        recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
        recipb += ((-yb) * recip) * recip;
        temp = ya + recipa;
        yb += -((temp - ya) - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -((temp - ya) - recipb);
        ya = temp;
        double result = ya + yb;
        result *= 0.5;
        return result;
    }

    public static double sinh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (-(org.apache.commons.math3.util.FastMath.exp((-x)))) / 2.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x > 0.25) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double yaa = (ya + temp) - temp;
            double yab = ya - yaa;
            double recip = 1.0 / ya;
            temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double recipa = (recip + temp) - temp;
            double recipb = recip - recipa;
            recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
            recipb += ((-yb) * recip) * recip;
            recipa = -recipa;
            recipb = -recipb;
            temp = ya + recipa;
            yb += -((temp - ya) - recipa);
            ya = temp;
            temp = ya + recipb;
            yb += -((temp - ya) - recipb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1(x, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            double temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double za = (denom + temp) - temp;
            double zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            temp = ya + ra;
            yb += -((temp - ya) - ra);
            ya = temp;
            temp = ya + rb;
            yb += -((temp - ya) - rb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double tanh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return 1.0;
        }
        if (x < (-20)) {
            return -1.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x >= 0.5) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp((x * 2.0), 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = (-1.0) + ya;
            double nb = -((na + 1.0) - ya);
            double temp = na + yb;
            nb += -((temp - na) - yb);
            na = temp;
            double da = 1.0 + ya;
            double db = -((da - 1.0) - ya);
            temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1((x * 2.0), hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = ya;
            double nb = yb;
            double da = 2.0 + ya;
            double db = -((da - 2.0) - ya);
            double temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double acosh(final double a) {
        return org.apache.commons.math3.util.FastMath.log((a + (org.apache.commons.math3.util.FastMath.sqrt(((a * a) - 1)))));
    }

    public static double asinh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAsinh;
        if (a > 0.167) {
            absAsinh = org.apache.commons.math3.util.FastMath.log(((org.apache.commons.math3.util.FastMath.sqrt(((a * a) + 1))) + a));
        }else {
            final double a2 = a * a;
            if (a > 0.097) {
                absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_17)) * (org.apache.commons.math3.util.FastMath.F_15_16)))) * (org.apache.commons.math3.util.FastMath.F_13_14)))) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
            }else
                if (a > 0.036) {
                    absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13)) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                }else
                    if (a > 0.0036) {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9)) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }else {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5)) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }


        }
        return negative ? -absAsinh : absAsinh;
    }

    public static double atanh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAtanh;
        if (a > 0.15) {
            absAtanh = 0.5 * (org.apache.commons.math3.util.FastMath.log(((1 + a) / (1 - a))));
        }else {
            final double a2 = a * a;
            if (a > 0.087) {
                absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_17)))))))))))))))));
            }else
                if (a > 0.031) {
                    absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13)))))))))))));
                }else
                    if (a > 0.003) {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9)))))))));
                    }else {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5)))));
                    }


        }
        return negative ? -absAtanh : absAtanh;
    }

    public static double signum(final double a) {
        return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a;
    }

    public static float signum(final float a) {
        return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a;
    }

    public static double nextUp(final double a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY);
    }

    public static float nextUp(final float a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY);
    }

    public static double random() {
        return java.lang.Math.random();
    }

    public static double exp(double x) {
        return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null);
    }

    private static double exp(double x, double extra, double[] hiPrec) {
        double intPartA;
        double intPartB;
        int intVal;
        if (x < 0.0) {
            intVal = ((int) (-x));
            if (intVal > 746) {
                if (hiPrec != null) {
                    hiPrec[0] = 0.0;
                    hiPrec[1] = 0.0;
                }
                return 0.0;
            }
            if (intVal > 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 40.19140625), extra, hiPrec)) / 2.85040095144011776E17;
                if (hiPrec != null) {
                    hiPrec[0] /= 2.85040095144011776E17;
                    hiPrec[1] /= 2.85040095144011776E17;
                }
                return result;
            }
            if (intVal == 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 1.494140625), extra, hiPrec)) / 4.455505956692757;
                if (hiPrec != null) {
                    hiPrec[0] /= 4.455505956692757;
                    hiPrec[1] /= 4.455505956692757;
                }
                return result;
            }
            intVal++;
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intVal = -intVal;
        }else {
            intVal = ((int) (x));
            if (intVal > 709) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
                    hiPrec[1] = 0.0;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
        }
        final int intFrac = ((int) ((x - intVal) * 1024.0));
        final double fracPartA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
        final double fracPartB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
        final double epsilon = x - (intVal + (intFrac / 1024.0));
        double z = 0.04168701738764507;
        z = (z * epsilon) + 0.1666666505023083;
        z = (z * epsilon) + 0.5000000000042687;
        z = (z * epsilon) + 1.0;
        z = (z * epsilon) + (-3.940510424527919E-20);
        double tempA = intPartA * fracPartA;
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
        final double tempC = tempB + tempA;
        final double result;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(194).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_1_13",org.apache.commons.math3.util.FastMath.F_1_13);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_1_11",org.apache.commons.math3.util.FastMath.F_1_11);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_1_17",org.apache.commons.math3.util.FastMath.F_1_17);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_11_12",org.apache.commons.math3.util.FastMath.F_11_12);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_1_15",org.apache.commons.math3.util.FastMath.F_1_15);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_15_16",org.apache.commons.math3.util.FastMath.F_15_16);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.EIGHTHS",org.apache.commons.math3.util.FastMath.EIGHTHS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.LN_2_A",org.apache.commons.math3.util.FastMath.LN_2_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.LN_2_B",org.apache.commons.math3.util.FastMath.LN_2_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.PI_O_4_BITS",org.apache.commons.math3.util.FastMath.PI_O_4_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.LN_MANT_LEN",org.apache.commons.math3.util.FastMath.LN_MANT_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.MASK_30BITS",org.apache.commons.math3.util.FastMath.MASK_30BITS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.TWO_POWER_52",org.apache.commons.math3.util.FastMath.TWO_POWER_52);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("hiPrec",hiPrec);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("fracPartB",fracPartB);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("fracPartA",fracPartA);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.PI",org.apache.commons.math3.util.FastMath.PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.E",org.apache.commons.math3.util.FastMath.E);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",org.apache.commons.math3.util.FastMath.LN_QUICK_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.CBRTTWO",org.apache.commons.math3.util.FastMath.CBRTTWO);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_9_10",org.apache.commons.math3.util.FastMath.F_9_10);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("extra != 0.0",extra != 0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_13_14",org.apache.commons.math3.util.FastMath.F_13_14);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_1_2",org.apache.commons.math3.util.FastMath.F_1_2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_1_3",org.apache.commons.math3.util.FastMath.F_1_3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_1_4",org.apache.commons.math3.util.FastMath.F_1_4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_1_5",org.apache.commons.math3.util.FastMath.F_1_5);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_3_4",org.apache.commons.math3.util.FastMath.F_3_4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_1_7",org.apache.commons.math3.util.FastMath.F_1_7);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.RECIP_2PI",org.apache.commons.math3.util.FastMath.RECIP_2PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.HEX_40000000",org.apache.commons.math3.util.FastMath.HEX_40000000);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_1_9",org.apache.commons.math3.util.FastMath.F_1_9);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_5_6",org.apache.commons.math3.util.FastMath.F_5_6);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("extra",extra);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.F_7_8",org.apache.commons.math3.util.FastMath.F_7_8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("intFrac",intFrac);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_A",org.apache.commons.math3.util.FastMath.SINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_B",org.apache.commons.math3.util.FastMath.SINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("z",z);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("tempB",tempB);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("tempC",tempC);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("tempA",tempA);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectionEnds();
        }
        if (runtimeAngelicValue) if (extra != 0.0) {
            result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
        }else {
            result = ((tempC * z) + tempB) + tempA;
        }
        if (hiPrec != null) {
            hiPrec[0] = tempA;
            hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
        }
        return result;
    }

    public static double expm1(double x) {
        return org.apache.commons.math3.util.FastMath.expm1(x, null);
    }

    private static double expm1(double x, double[] hiPrecOut) {
        if ((x != x) || (x == 0.0)) {
            return x;
        }
        if ((x <= (-1.0)) || (x >= 1.0)) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            if (x > 0.0) {
                return ((-1.0) + (hiPrec[0])) + (hiPrec[1]);
            }else {
                final double ra = (-1.0) + (hiPrec[0]);
                double rb = -((ra + 1.0) - (hiPrec[0]));
                rb += hiPrec[1];
                return ra + rb;
            }
        }
        double baseA;
        double baseB;
        double epsilon;
        boolean negative = false;
        if (x < 0.0) {
            x = -x;
            negative = true;
        }
        {
            int intFrac = ((int) (x * 1024.0));
            double tempA = (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]) - 1.0;
            double tempB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
            double temp = tempA + tempB;
            tempB = -((temp - tempA) - tempB);
            tempA = temp;
            temp = tempA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            baseA = (tempA + temp) - temp;
            baseB = tempB + (tempA - baseA);
            epsilon = x - (intFrac / 1024.0);
        }
        double zb = 0.008336750013465571;
        zb = (zb * epsilon) + 0.041666663879186654;
        zb = (zb * epsilon) + 0.16666666666745392;
        zb = (zb * epsilon) + 0.49999999999999994;
        zb = zb * epsilon;
        zb = zb * epsilon;
        double za = epsilon;
        double temp = za + zb;
        zb = -((temp - za) - zb);
        za = temp;
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        temp = (za + temp) - temp;
        zb += za - temp;
        za = temp;
        double ya = za * baseA;
        temp = ya + (za * baseB);
        double yb = -((temp - ya) - (za * baseB));
        ya = temp;
        temp = ya + (zb * baseA);
        yb += -((temp - ya) - (zb * baseA));
        ya = temp;
        temp = ya + (zb * baseB);
        yb += -((temp - ya) - (zb * baseB));
        ya = temp;
        temp = ya + baseA;
        yb += -((temp - baseA) - ya);
        ya = temp;
        temp = ya + za;
        yb += -((temp - ya) - za);
        ya = temp;
        temp = ya + baseB;
        yb += -((temp - ya) - baseB);
        ya = temp;
        temp = ya + zb;
        yb += -((temp - ya) - zb);
        ya = temp;
        if (negative) {
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            za = (denom + temp) - temp;
            zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            ya = -ra;
            yb = -rb;
        }
        if (hiPrecOut != null) {
            hiPrecOut[0] = ya;
            hiPrecOut[1] = yb;
        }
        return ya + yb;
    }

    public static double log(final double x) {
        return org.apache.commons.math3.util.FastMath.log(x, null);
    }

    private static double log(final double x, final double[] hiPrec) {
        if (x == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        long bits = java.lang.Double.doubleToLongBits(x);
        if (((bits & -9223372036854775808L) != 0) || (x != x)) {
            if (x != 0.0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NaN;
                }
                return java.lang.Double.NaN;
            }
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (hiPrec != null) {
                hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
            }
            return java.lang.Double.POSITIVE_INFINITY;
        }
        int exp = ((int) (bits >> 52)) - 1023;
        if ((bits & 9218868437227405312L) == 0) {
            if (x == 0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.NEGATIVE_INFINITY;
            }
            bits <<= 1;
            while ((bits & 4503599627370496L) == 0) {
                --exp;
                bits <<= 1;
            } 
        }
        if ((exp == (-1)) || (exp == 0)) {
            if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {
                double xa = x - 1.0;
                double xb = (xa - x) + 1.0;
                double tmp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                double aa = (xa + tmp) - tmp;
                double ab = xa - aa;
                xa = aa;
                xb = ab;
                final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[((org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 1)];
                double ya = lnCoef_last[0];
                double yb = lnCoef_last[1];
                for (int i = (org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 2; i >= 0; i--) {
                    aa = ya * xa;
                    ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                    final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i];
                    aa = ya + (lnCoef_i[0]);
                    ab = yb + (lnCoef_i[1]);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                }
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                return ya + yb;
            }
        }
        final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 4499201580859392L) >> 42))];
        final double epsilon = (bits & 4398046511103L) / ((org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L));
        double lnza = 0.0;
        double lnzb = 0.0;
        if (hiPrec != null) {
            double tmp = epsilon * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double aa = (epsilon + tmp) - tmp;
            double ab = epsilon - aa;
            double xa = aa;
            double xb = ab;
            final double numer = bits & 4398046511103L;
            final double denom = (org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L);
            aa = (numer - (xa * denom)) - (xb * denom);
            xb += aa / denom;
            final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[((org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 1)];
            double ya = lnCoef_last[0];
            double yb = lnCoef_last[1];
            for (int i = (org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 2; i >= 0; i--) {
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i];
                aa = ya + (lnCoef_i[0]);
                ab = yb + (lnCoef_i[1]);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
            }
            aa = ya * xa;
            ab = ((ya * xb) + (yb * xa)) + (yb * xb);
            lnza = aa + ab;
            lnzb = -((lnza - aa) - ab);
        }else {
            lnza = -0.16624882440418567;
            lnza = (lnza * epsilon) + 0.19999954120254515;
            lnza = (lnza * epsilon) + (-0.2499999997677497);
            lnza = (lnza * epsilon) + 0.3333333333332802;
            lnza = (lnza * epsilon) + (-0.5);
            lnza = (lnza * epsilon) + 1.0;
            lnza = lnza * epsilon;
        }
        double a = (org.apache.commons.math3.util.FastMath.LN_2_A) * exp;
        double b = 0.0;
        double c = a + (lnm[0]);
        double d = -((c - a) - (lnm[0]));
        a = c;
        b = b + d;
        c = a + lnza;
        d = -((c - a) - lnza);
        a = c;
        b = b + d;
        c = a + ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp);
        d = -((c - a) - ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp));
        a = c;
        b = b + d;
        c = a + (lnm[1]);
        d = -((c - a) - (lnm[1]));
        a = c;
        b = b + d;
        c = a + lnzb;
        d = -((c - a) - lnzb);
        a = c;
        b = b + d;
        if (hiPrec != null) {
            hiPrec[0] = a;
            hiPrec[1] = b;
        }
        return a + b;
    }

    public static double log1p(final double x) {
        if (x == (-1)) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((x > 1.0E-6) || (x < (-1.0E-6))) {
            final double xpa = 1 + x;
            final double xpb = -((xpa - 1) - x);
            final double[] hiPrec = new double[2];
            final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
            if (java.lang.Double.isInfinite(lores)) {
                return lores;
            }
            final double fx1 = xpb / xpa;
            final double epsilon = (0.5 * fx1) + 1;
            return ((epsilon * fx1) + (hiPrec[1])) + (hiPrec[0]);
        }else {
            final double y = (((x * (org.apache.commons.math3.util.FastMath.F_1_3)) - (org.apache.commons.math3.util.FastMath.F_1_2)) * x) + 1;
            return y * x;
        }
    }

    public static double log10(final double x) {
        final double[] hiPrec = new double[2];
        final double lores = org.apache.commons.math3.util.FastMath.log(x, hiPrec);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        final double tmp = (hiPrec[0]) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double lna = ((hiPrec[0]) + tmp) - tmp;
        final double lnb = ((hiPrec[0]) - lna) + (hiPrec[1]);
        final double rln10a = 0.4342944622039795;
        final double rln10b = 1.9699272335463627E-8;
        return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna);
    }

    public static double log(double base, double x) {
        return (org.apache.commons.math3.util.FastMath.log(x)) / (org.apache.commons.math3.util.FastMath.log(base));
    }

    public static double pow(double x, double y) {
        final double[] lns = new double[2];
        if (y == 0.0) {
            return 1.0;
        }
        if (x != x) {
            return x;
        }
        if (x == 0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if ((bits & -9223372036854775808L) != 0) {
                long yi = ((long) (y));
                if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return -0.0;
                }
            }
            if (y < 0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }
            if (y > 0) {
                return 0.0;
            }
            return java.lang.Double.NaN;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0.0) {
                return 0.0;
            }else {
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) > 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return -0.0;
                }
                return 0.0;
            }
            if (y > 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) < 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x < 0) {
            if ((y >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (y <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
                return org.apache.commons.math3.util.FastMath.pow((-x), y);
            }
            if (y == ((long) (y))) {
                return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow((-x), y) : -(org.apache.commons.math3.util.FastMath.pow((-x), y));
            }else {
                return java.lang.Double.NaN;
            }
        }
        double ya;
        double yb;
        if ((y < 8.0E298) && (y > (-8.0E298))) {
            double tmp1 = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            ya = (y + tmp1) - tmp1;
            yb = y - ya;
        }else {
            double tmp1 = y * 9.313225746154785E-10;
            double tmp2 = tmp1 * 9.313225746154785E-10;
            ya = (((tmp1 + tmp2) - tmp1) * (org.apache.commons.math3.util.FastMath.HEX_40000000)) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            yb = y - ya;
        }
        final double lores = org.apache.commons.math3.util.FastMath.log(x, lns);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        double lna = lns[0];
        double lnb = lns[1];
        double tmp1 = lna * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double tmp2 = (lna + tmp1) - tmp1;
        lnb += lna - tmp2;
        lna = tmp2;
        final double aa = lna * ya;
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
        lna = aa + ab;
        lnb = -((lna - aa) - ab);
        double z = 1.0 / 120.0;
        z = (z * lnb) + (1.0 / 24.0);
        z = (z * lnb) + (1.0 / 6.0);
        z = (z * lnb) + 0.5;
        z = (z * lnb) + 1.0;
        z = z * lnb;
        final double result = org.apache.commons.math3.util.FastMath.exp(lna, z, null);
        return result;
    }

    public static double pow(double d, int e) {
        if (e == 0) {
            return 1.0;
        }else
            if (e < 0) {
                e = -e;
                d = 1.0 / d;
            }

        final int splitFactor = 134217729;
        final double cd = splitFactor * d;
        final double d1High = cd - (cd - d);
        final double d1Low = d - d1High;
        double resultHigh = 1;
        double resultLow = 0;
        double d2p = d;
        double d2pHigh = d1High;
        double d2pLow = d1Low;
        while (e != 0) {
            if ((e & 1) != 0) {
                final double tmpHigh = resultHigh * d2p;
                final double cRH = splitFactor * resultHigh;
                final double rHH = cRH - (cRH - resultHigh);
                final double rHL = resultHigh - rHH;
                final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
                resultHigh = tmpHigh;
                resultLow = (resultLow * d2p) + tmpLow;
            }
            final double tmpHigh = d2pHigh * d2p;
            final double cD2pH = splitFactor * d2pHigh;
            final double d2pHH = cD2pH - (cD2pH - d2pHigh);
            final double d2pHL = d2pHigh - d2pHH;
            final double tmpLow = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow));
            final double cTmpH = splitFactor * tmpHigh;
            d2pHigh = cTmpH - (cTmpH - tmpHigh);
            d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh);
            d2p = d2pHigh + d2pLow;
            e = e >> 1;
        } 
        return resultHigh + resultLow;
    }

    private static double polySine(final double x) {
        double x2 = x * x;
        double p = 2.7553817452272217E-6;
        p = (p * x2) + (-1.9841269659586505E-4);
        p = (p * x2) + 0.008333333333329196;
        p = (p * x2) + (-0.16666666666666666);
        p = (p * x2) * x;
        return p;
    }

    private static double polyCosine(double x) {
        double x2 = x * x;
        double p = 2.479773539153719E-5;
        p = (p * x2) + (-0.0013888888689039883);
        p = (p * x2) + 0.041666666666621166;
        p = (p * x2) + (-0.49999999999999994);
        p *= x2;
        return p;
    }

    private static double sinQ(double xa, double xb) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        final double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double result;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        if (xb != 0.0) {
            t = (((costA + costB) * (cosEpsA + cosEpsB)) - ((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
            c = a + t;
            d = -((c - a) - t);
            a = c;
            b = b + d;
        }
        result = a + b;
        return result;
    }

    private static double cosQ(double xa, double xb) {
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -((a - pi2a) + xa);
        b += pi2b - xb;
        return org.apache.commons.math3.util.FastMath.sinQ(a, b);
    }

    private static double tanQ(double xa, double xb, boolean cotanFlag) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        double sina = a + b;
        double sinb = -((sina - a) - b);
        a = b = c = d = 0.0;
        t = costA * cosEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        t = (-sintA) * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB);
        b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB));
        double cosa = a + b;
        double cosb = -((cosa - a) - b);
        if (cotanFlag) {
            double tmp;
            tmp = cosa;
            cosa = sina;
            sina = tmp;
            tmp = cosb;
            cosb = sinb;
            sinb = tmp;
        }
        double est = sina / cosa;
        temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double esta = (est + temp) - temp;
        double estb = est - esta;
        temp = cosa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double cosaa = (cosa + temp) - temp;
        double cosab = cosa - cosaa;
        double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa;
        err += sinb / cosa;
        err += (((-sina) * cosb) / cosa) / cosa;
        if (xb != 0.0) {
            double xbadj = xb + ((est * est) * xb);
            if (cotanFlag) {
                xbadj = -xbadj;
            }
            err += xbadj;
        }
        return est + err;
    }

    private static void reducePayneHanek(double x, double[] result) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        inbits &= 4503599627370495L;
        inbits |= 4503599627370496L;
        exponent++;
        inbits <<= 11;
        long shpi0;
        long shpiA;
        long shpiB;
        int idx = exponent >> 6;
        int shift = exponent - (idx << 6);
        if (shift != 0) {
            shpi0 = (idx == 0) ? 0 : (org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)]) << shift;
            shpi0 |= (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) >>> (64 - shift);
            shpiA = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) >>> (64 - shift));
            shpiB = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 2)]) >>> (64 - shift));
        }else {
            shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)];
            shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx];
            shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)];
        }
        long a = inbits >>> 32;
        long b = inbits & 4294967295L;
        long c = shpiA >>> 32;
        long d = shpiA & 4294967295L;
        long ac = a * c;
        long bd = b * d;
        long bc = b * c;
        long ad = a * d;
        long prodB = bd + (ad << 32);
        long prodA = ac + (ad >>> 32);
        boolean bita = (bd & -9223372036854775808L) != 0;
        boolean bitb = (ad & 2147483648L) != 0;
        boolean bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prodB = prodB + (bc << 32);
        prodA = prodA + (bc >>> 32);
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpiB >>> 32;
        d = shpiB & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prodB += ac;
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpi0 >>> 32;
        d = shpi0 & 4294967295L;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        prodA += bd + ((bc + ad) << 32);
        int intPart = ((int) (prodA >>> 62));
        prodA <<= 2;
        prodA |= prodB >>> 62;
        prodB <<= 2;
        a = prodA >>> 32;
        b = prodA & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        long prod2B = bd + (ad << 32);
        long prod2A = ac + (ad >>> 32);
        bita = (bd & -9223372036854775808L) != 0;
        bitb = (ad & 2147483648L) != 0;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prod2B = prod2B + (bc << 32);
        prod2A = prod2A + (bc >>> 32);
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        a = prodB >>> 32;
        b = prodB & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        double tmpA = (prod2A >>> 12) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double tmpB = ((((prod2A & 4095L) << 40) + (prod2B >>> 24)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double sumA = tmpA + tmpB;
        double sumB = -((sumA - tmpA) - tmpB);
        result[0] = intPart;
        result[1] = sumA * 2.0;
        result[2] = sumB * 2.0;
    }

    public static double sin(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa;
        double xb = 0.0;
        xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (negative) {
            quadrant ^= 2;
        }
        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            case 1 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 3 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double cos(double x) {
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            xa = -xa;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 1 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            case 3 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double tan(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (xa > 1.5) {
            final double pi2a = 1.5707963267948966;
            final double pi2b = 6.123233995736766E-17;
            final double a = pi2a - xa;
            double b = -((a - pi2a) + xa);
            b += pi2b - xb;
            xa = a + b;
            xb = -((xa - a) - b);
            quadrant ^= 1;
            negative ^= true;
        }
        double result;
        if ((quadrant & 1) == 0) {
            result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false);
        }else {
            result = -(org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true));
        }
        if (negative) {
            result = -result;
        }
        return result;
    }

    public static double atan(double x) {
        return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false);
    }

    private static double atan(double xa, double xb, boolean leftPlane) {
        boolean negate = false;
        int idx;
        if (xa == 0.0) {
            return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
        }
        if (xa < 0) {
            xa = -xa;
            xb = -xb;
            negate = true;
        }
        if (xa > 1.633123935319537E16) {
            return negate ^ leftPlane ? (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2) : (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (xa < 1) {
            idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
        }else {
            final double oneOverXa = 1 / xa;
            idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
        }
        double epsA = xa - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
        double epsB = -((epsA - xa) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]));
        epsB += xb - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
        double temp = epsA + epsB;
        epsB = -((temp - epsA) - epsB);
        epsA = temp;
        temp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (xa + temp) - temp;
        double yb = (xb + xa) - ya;
        xa = ya;
        xb += yb;
        if (idx == 0) {
            final double denom = 1.0 / (1.0 + ((xa + xb) * ((org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]))));
            ya = epsA * denom;
            yb = epsB * denom;
        }else {
            double temp2 = xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
            double za = 1.0 + temp2;
            double zb = -((za - 1.0) - temp2);
            temp2 = (xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])) + (xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]));
            temp = za + temp2;
            zb += -((temp - za) - temp2);
            za = temp;
            zb += xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
            ya = epsA / za;
            temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double yaa = (ya + temp) - temp;
            final double yab = ya - yaa;
            temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double zaa = (za + temp) - temp;
            final double zab = za - zaa;
            yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;
            yb += (((-epsA) * zb) / za) / za;
            yb += epsB / za;
        }
        epsA = ya;
        epsB = yb;
        final double epsA2 = epsA * epsA;
        yb = 0.07490822288864472;
        yb = (yb * epsA2) + (-0.09088450866185192);
        yb = (yb * epsA2) + 0.11111095942313305;
        yb = (yb * epsA2) + (-0.1428571423679182);
        yb = (yb * epsA2) + 0.19999999999923582;
        yb = (yb * epsA2) + (-0.33333333333333287);
        yb = (yb * epsA2) * epsA;
        ya = epsA;
        temp = ya + yb;
        yb = -((temp - ya) - yb);
        ya = temp;
        yb += epsB / (1.0 + (epsA * epsA));
        double za = (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) + ya;
        double zb = -((za - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx])) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double result = za + zb;
        double resultb = -((result - za) - zb);
        if (leftPlane) {
            final double pia = 1.5707963267948966 * 2;
            final double pib = 6.123233995736766E-17 * 2;
            za = pia - result;
            zb = -((za - pia) + result);
            zb += pib - resultb;
            result = za + zb;
            resultb = -((result - za) - zb);
        }
        if (negate ^ leftPlane) {
            result = -result;
        }
        return result;
    }

    public static double atan2(double y, double x) {
        if ((x != x) || (y != y)) {
            return java.lang.Double.NaN;
        }
        if (y == 0) {
            final double result = x * y;
            final double invx = 1.0 / x;
            final double invy = 1.0 / y;
            if (invx == 0) {
                if (x > 0) {
                    return y;
                }else {
                    return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
                }
            }
            if ((x < 0) || (invx < 0)) {
                if ((y < 0) || (invy < 0)) {
                    return -(java.lang.Math.PI);
                }else {
                    return java.lang.Math.PI;
                }
            }else {
                return result;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((y > 0) || ((1 / y) > 0)) {
                return 0.0;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((y > 0.0) || ((1 / y) > 0.0)) {
                return java.lang.Math.PI;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -(java.lang.Math.PI);
            }
        }
        if (x == 0) {
            if ((y > 0) || ((1 / y) > 0)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
        }
        final double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return org.apache.commons.math3.util.FastMath.atan(r, 0, (x < 0));
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        final double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        final double xb = x - xa;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        final double temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        if (ra == 0) {
            ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y);
        }
        final double result = org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
        return result;
    }

    public static double asin(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == 1.0) {
            return (java.lang.Math.PI) / 2.0;
        }
        if (x == (-1.0)) {
            return (-(java.lang.Math.PI)) / 2.0;
        }
        if (x == 0.0) {
            return x;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y;
        y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        double dx = zb / (2.0 * y);
        double r = x / y;
        temp = r * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ra = (r + temp) - temp;
        double rb = r - ra;
        rb += ((((x - (ra * ya)) - (ra * yb)) - (rb * ya)) - (rb * yb)) / y;
        rb += (((-x) * dx) / y) / y;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, false);
    }

    public static double acos(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == (-1.0)) {
            return java.lang.Math.PI;
        }
        if (x == 1.0) {
            return 0.0;
        }
        if (x == 0) {
            return (java.lang.Math.PI) / 2.0;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        yb += zb / (2.0 * y);
        y = ya + yb;
        yb = -((y - ya) - yb);
        double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return (java.lang.Math.PI) / 2;
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        rb += yb / x;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
    }

    public static double cbrt(double x) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        boolean subnormal = false;
        if (exponent == (-1023)) {
            if (x == 0) {
                return x;
            }
            subnormal = true;
            x *= 1.8014398509481984E16;
            inbits = java.lang.Double.doubleToLongBits(x);
            exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        }
        if (exponent == 1024) {
            return x;
        }
        int exp3 = exponent / 3;
        double p2 = java.lang.Double.longBitsToDouble(((inbits & -9223372036854775808L) | (((long) ((exp3 + 1023) & 2047)) << 52)));
        final double mant = java.lang.Double.longBitsToDouble(((inbits & 4503599627370495L) | 4607182418800017408L));
        double est = -0.010714690733195933;
        est = (est * mant) + 0.0875862700108075;
        est = (est * mant) + (-0.3058015757857271);
        est = (est * mant) + 0.7249995199969751;
        est = (est * mant) + 0.5039018405998233;
        est *= org.apache.commons.math3.util.FastMath.CBRTTWO[((exponent % 3) + 2)];
        final double xs = x / ((p2 * p2) * p2);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        double temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (est + temp) - temp;
        double yb = est - ya;
        double za = ya * ya;
        double zb = ((ya * yb) * 2.0) + (yb * yb);
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (za + temp) - temp;
        zb += za - temp2;
        za = temp2;
        zb = ((za * yb) + (ya * zb)) + (zb * yb);
        za = za * ya;
        double na = xs - za;
        double nb = -((na - xs) + za);
        nb -= zb;
        est += (na + nb) / ((3 * est) * est);
        est *= p2;
        if (subnormal) {
            est *= 3.814697265625E-6;
        }
        return est;
    }

    public static double toRadians(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 0.01745329052209854;
        final double factb = 1.997844754509471E-9;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
        if (result == 0) {
            result = result * x;
        }
        return result;
    }

    public static double toDegrees(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 57.2957763671875;
        final double factb = 3.145894820876798E-6;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
    }

    public static int abs(final int x) {
        return x < 0 ? -x : x;
    }

    public static long abs(final long x) {
        return x < 0L ? -x : x;
    }

    public static float abs(final float x) {
        return x < 0.0F ? -x : x == 0.0F ? 0.0F : x;
    }

    public static double abs(double x) {
        return x < 0.0 ? -x : x == 0.0 ? 0.0 : x;
    }

    public static double ulp(double x) {
        if (java.lang.Double.isInfinite(x)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Double.longBitsToDouble(((java.lang.Double.doubleToLongBits(x)) ^ 1)))));
    }

    public static float ulp(float x) {
        if (java.lang.Float.isInfinite(x)) {
            return java.lang.Float.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Float.intBitsToFloat(((java.lang.Float.floatToIntBits(x)) ^ 1)))));
    }

    public static double scalb(final double d, final int n) {
        if ((n > (-1023)) && (n < 1024)) {
            return d * (java.lang.Double.longBitsToDouble((((long) (n + 1023)) << 52)));
        }
        if (((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) || (d == 0)) {
            return d;
        }
        if (n < (-2098)) {
            return d > 0 ? 0.0 : -0.0;
        }
        if (n > 2097) {
            return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        int exponent = ((int) (bits >>> 52)) & 2047;
        long mantissa = bits & 4503599627370495L;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
            }else
                if (scaledExponent > (-53)) {
                    mantissa = mantissa | (1L << 52);
                    final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Double.longBitsToDouble((sign | mantissa));
                }else {
                    return sign == 0L ? 0.0 : -0.0;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 52) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 4503599627370495L;
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }

        }
    }

    public static float scalb(final float f, final int n) {
        if ((n > (-127)) && (n < 128)) {
            return f * (java.lang.Float.intBitsToFloat(((n + 127) << 23)));
        }
        if (((java.lang.Float.isNaN(f)) || (java.lang.Float.isInfinite(f))) || (f == 0.0F)) {
            return f;
        }
        if (n < (-277)) {
            return f > 0 ? 0.0F : -0.0F;
        }
        if (n > 276) {
            return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
        }
        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        int exponent = (bits >>> 23) & 255;
        int mantissa = bits & 8388607;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
            }else
                if (scaledExponent > (-24)) {
                    mantissa = mantissa | (1 << 23);
                    final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Float.intBitsToFloat((sign | mantissa));
                }else {
                    return sign == 0 ? 0.0F : -0.0F;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 23) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 8388607;
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }

        }
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Double.NaN;
        }else
            if (d == direction) {
                return direction;
            }else
                if (java.lang.Double.isInfinite(d)) {
                    return d < 0 ? -(java.lang.Double.MAX_VALUE) : java.lang.Double.MAX_VALUE;
                }else
                    if (d == 0) {
                        return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
                    }



        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        if ((direction < d) ^ (sign == 0L)) {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) + 1)));
        }else {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) - 1)));
        }
    }

    public static float nextAfter(final float f, final double direction) {
        if ((java.lang.Double.isNaN(f)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Float.NaN;
        }else
            if (f == direction) {
                return ((float) (direction));
            }else
                if (java.lang.Float.isInfinite(f)) {
                    return f < 0.0F ? -(java.lang.Float.MAX_VALUE) : java.lang.Float.MAX_VALUE;
                }else
                    if (f == 0.0F) {
                        return direction < 0 ? -(java.lang.Float.MIN_VALUE) : java.lang.Float.MIN_VALUE;
                    }



        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        if ((direction < f) ^ (sign == 0)) {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) + 1)));
        }else {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) - 1)));
        }
    }

    public static double floor(double x) {
        long y;
        if (x != x) {
            return x;
        }
        if ((x >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
            return x;
        }
        y = ((long) (x));
        if ((x < 0) && (y != x)) {
            y--;
        }
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double ceil(double x) {
        double y;
        if (x != x) {
            return x;
        }
        y = org.apache.commons.math3.util.FastMath.floor(x);
        if (y == x) {
            return y;
        }
        y += 1.0;
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double rint(double x) {
        double y = org.apache.commons.math3.util.FastMath.floor(x);
        double d = x - y;
        if (d > 0.5) {
            if (y == (-1.0)) {
                return -0.0;
            }
            return y + 1.0;
        }
        if (d < 0.5) {
            return y;
        }
        long z = ((long) (y));
        return (z & 1) == 0 ? y : y + 1.0;
    }

    public static long round(double x) {
        return ((long) (org.apache.commons.math3.util.FastMath.floor((x + 0.5))));
    }

    public static int round(final float x) {
        return ((int) (org.apache.commons.math3.util.FastMath.floor((x + 0.5F))));
    }

    public static int min(final int a, final int b) {
        return a <= b ? a : b;
    }

    public static long min(final long a, final long b) {
        return a <= b ? a : b;
    }

    public static float min(final float a, final float b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return a;
        }
        return b;
    }

    public static double min(final double a, final double b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return a;
        }
        return b;
    }

    public static int max(final int a, final int b) {
        return a <= b ? b : a;
    }

    public static long max(final long a, final long b) {
        return a <= b ? b : a;
    }

    public static float max(final float a, final float b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return b;
        }
        return a;
    }

    public static double max(final double a, final double b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return b;
        }
        return a;
    }

    public static double hypot(final double x, final double y) {
        if ((java.lang.Double.isInfinite(x)) || (java.lang.Double.isInfinite(y))) {
            return java.lang.Double.POSITIVE_INFINITY;
        }else
            if ((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(y))) {
                return java.lang.Double.NaN;
            }else {
                final int expX = org.apache.commons.math3.util.FastMath.getExponent(x);
                final int expY = org.apache.commons.math3.util.FastMath.getExponent(y);
                if (expX > (expY + 27)) {
                    return org.apache.commons.math3.util.FastMath.abs(x);
                }else
                    if (expY > (expX + 27)) {
                        return org.apache.commons.math3.util.FastMath.abs(y);
                    }else {
                        final int middleExp = (expX + expY) / 2;
                        final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, (-middleExp));
                        final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, (-middleExp));
                        final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(((scaledX * scaledX) + (scaledY * scaledY)));
                        return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp);
                    }

            }

    }

    public static double IEEEremainder(double dividend, double divisor) {
        return java.lang.StrictMath.IEEEremainder(dividend, divisor);
    }

    public static double copySign(double magnitude, double sign) {
        long m = java.lang.Double.doubleToLongBits(magnitude);
        long s = java.lang.Double.doubleToLongBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static float copySign(float magnitude, float sign) {
        int m = java.lang.Float.floatToIntBits(magnitude);
        int s = java.lang.Float.floatToIntBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static int getExponent(final double d) {
        return ((int) (((java.lang.Double.doubleToLongBits(d)) >>> 52) & 2047)) - 1023;
    }

    public static int getExponent(final float f) {
        return (((java.lang.Float.floatToIntBits(f)) >>> 23) & 255) - 127;
    }

    public static void main(java.lang.String[] a) {
        java.io.PrintStream out = java.lang.System.out;
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "LN_MANT", org.apache.commons.math3.util.FastMath.LN_MANT_LEN, org.apache.commons.math3.util.FastMath.lnMant.LN_MANT);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);
    }

    private static class ExpIntTable {
        private static final double[] EXP_INT_TABLE_A;

        private static final double[] EXP_INT_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                final double[] tmp = new double[2];
                final double[] recip = new double[2];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX); i++) {
                    org.apache.commons.math3.util.FastMathCalc.expint(i, tmp);
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[1];
                    if (i != 0) {
                        org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[0];
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[1];
                    }
                }
            }else {
                EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA();
                EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB();
            }
        }
    }

    private static class ExpFracTable {
        private static final double[] EXP_FRAC_TABLE_A;

        private static final double[] EXP_FRAC_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                final double[] tmp = new double[2];
                final double factor = 1.0 / ((org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN) - 1);
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length); i++) {
                    org.apache.commons.math3.util.FastMathCalc.slowexp((i * factor), tmp);
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
                }
            }else {
                EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA();
                EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB();
            }
        }
    }

    private static class lnMant {
        private static final double[][] LN_MANT;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length); i++) {
                    final double d = java.lang.Double.longBitsToDouble(((((long) (i)) << 42) | 4607182418800017408L));
                    org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
                }
            }else {
                LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
            }
        }
    }

    private static class CodyWaite {
        private final int finalK;

        private final double finalRemA;

        private final double finalRemB;

        CodyWaite(double xa, double xb) {
            int k = ((int) (xa * 0.6366197723675814));
            double remA;
            double remB;
            while (true) {
                double a = (-k) * 1.570796251296997;
                remA = xa + a;
                remB = -((remA - xa) - a);
                a = (-k) * 7.549789948768648E-8;
                double b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                a = (-k) * 6.123233995736766E-17;
                b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                if (remA > 0) {
                    break;
                }
                --k;
            } 
            this.finalK = k;
            this.finalRemA = remA;
            this.finalRemB = remB;
        }

        int getK() {
            return finalK;
        }

        double getRemA() {
            return finalRemA;
        }

        double getRemB() {
            return finalRemB;
        }
    }
}
00:38:18.869 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:38:18.869 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:19.022 [pool-771-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (147 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:20.310 [pool-772-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:20.312 [pool-773-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:20.312 [pool-770-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:20.312 [pool-770-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:20.313 [pool-770-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:919.
00:38:20.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #261
00:38:20.313 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:917 which is executed by 899 tests
1033054629
00:38:20.610 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #262
00:38:20.611 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:911 which is executed by 899 tests
1033054629
00:38:20.907 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #263
00:38:20.907 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:910 which is executed by 899 tests
1033054629
00:38:21.204 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #264
00:38:21.204 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:903 which is executed by 899 tests
1033054629
00:38:21.500 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:21.652 [pool-775-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (146 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:22.952 [pool-776-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:22.954 [pool-777-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:22.954 [pool-774-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:22.954 [pool-774-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:22.954 [pool-774-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:903.
00:38:22.954 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #265
00:38:22.954 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:902 which is executed by 899 tests
1033054629
00:38:23.251 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:23.420 [pool-779-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (164 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:24.712 [pool-780-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:24.713 [pool-781-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:24.714 [pool-778-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:24.714 [pool-778-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:24.714 [pool-778-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:902.
00:38:24.714 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #266
00:38:24.714 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:901 which is executed by 899 tests
1033054629
00:38:25.012 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:25.198 [pool-783-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (180 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:26.492 [pool-784-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:26.494 [pool-785-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:26.494 [pool-782-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:26.494 [pool-782-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:26.495 [pool-782-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:901.
00:38:26.495 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #267
00:38:26.495 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:900 which is executed by 899 tests
1033054629
00:38:26.791 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:26.948 [pool-787-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (152 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:28.236 [pool-788-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:28.238 [pool-789-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:28.238 [pool-786-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:28.238 [pool-786-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:28.238 [pool-786-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:900.
00:38:28.238 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #268
00:38:28.238 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:899 which is executed by 899 tests
1033054629
00:38:28.535 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #269
00:38:28.535 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:890 which is executed by 899 tests
1033054629
00:38:28.831 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #270
00:38:28.832 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:884 which is executed by 899 tests
1033054629
00:38:29.167 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #271
00:38:29.168 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:883 which is executed by 899 tests
1033054629
00:38:29.486 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #272
00:38:29.486 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:882 which is executed by 899 tests
1033054629
00:38:29.783 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #273
00:38:29.783 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath$ExpFracTable:3719 which is executed by 1806 tests
1033054629
00:38:30.090 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #274
00:38:30.090 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:826 which is executed by 919 tests
1033054629
00:38:30.475 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:30.633 [pool-791-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (152 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:31.881 [pool-790-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
FastMath.java:478: error: variable intVal might not have been initialized
        final int intFrac = ((int) ((x - intVal) * 1024.0));
                                         ^
FastMath.java:487: error: variable intPartA might not have been initialized
        double tempA = intPartA * fracPartA;
                       ^
FastMath.java:488: error: variable intPartB might not have been initialized
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
                                                  ^
00:38:32.728 [pool-790-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class FastMath {
    public static final double PI = (1.05414357E8 / 3.3554432E7) + 1.984187159361081E-9;

    public static final double E = (2850325.0 / 1048576.0) + 8.254840070411029E-8;

    static final int EXP_INT_TABLE_MAX_INDEX = 750;

    static final int EXP_INT_TABLE_LEN = (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) * 2;

    static final int LN_MANT_LEN = 1024;

    static final int EXP_FRAC_TABLE_LEN = 1025;

    private static final boolean RECOMPUTE_TABLES_AT_RUNTIME = false;

    private static final double LN_2_A = 0.6931470632553101;

    private static final double LN_2_B = 1.1730463525082348E-7;

    private static final double[][] LN_QUICK_COEF = new double[][]{ new double[]{ 1.0, 5.669184079525E-24 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.986821492305628E-8 }, new double[]{ -0.25, -6.663542893624021E-14 }, new double[]{ 0.19999998807907104, 1.1921056801463227E-8 }, new double[]{ -0.1666666567325592, -7.800414592973399E-9 }, new double[]{ 0.1428571343421936, 5.650007086920087E-9 }, new double[]{ -0.12502530217170715, -7.44321345601866E-11 }, new double[]{ 0.11113807559013367, 9.219544613762692E-9 } };

    private static final double[][] LN_HI_PREC_COEF = new double[][]{ new double[]{ 1.0, -6.032174644509064E-23 }, new double[]{ -0.25, -0.25 }, new double[]{ 0.3333333134651184, 1.9868161777724352E-8 }, new double[]{ -0.2499999701976776, -2.957007209750105E-8 }, new double[]{ 0.19999954104423523, 1.5830993332061267E-10 }, new double[]{ -0.16624879837036133, -2.6033824355191673E-8 } };

    private static final int SINE_TABLE_LEN = 14;

    private static final double[] SINE_TABLE_A = new double[]{ +0.0, +0.1246747374534607, +0.24740394949913025, +0.366272509098053, +0.4794255495071411, +0.5850973129272461, +0.6816387176513672, +0.7675435543060303, +0.8414709568023682, +0.902267575263977, +0.9489846229553223, +0.9808930158615112, +0.9974949359893799, +0.9985313415527344 };

    private static final double[] SINE_TABLE_B = new double[]{ +0.0, -4.068233003401932E-9, +9.755392680573412E-9, +1.9987994582857286E-8, -1.0902938113007961E-8, -3.9986783938944604E-8, +4.23719669792332E-8, -5.207000323380292E-8, +2.800552834259E-8, +1.883511811213715E-8, -3.5997360512765566E-9, +4.116164446561962E-8, +5.0614674548127384E-8, -1.0129027912496858E-9 };

    private static final double[] COSINE_TABLE_A = new double[]{ +1.0, +0.9921976327896118, +0.9689123630523682, +0.9305076599121094, +0.8775825500488281, +0.8109631538391113, +0.7316888570785522, +0.6409968137741089, +0.5403022766113281, +0.4311765432357788, +0.3153223395347595, +0.19454771280288696, +0.07073719799518585, -0.05417713522911072 };

    private static final double[] COSINE_TABLE_B = new double[]{ +0.0, +3.4439717236742845E-8, +5.865827662008209E-8, -3.7999795083850525E-8, +1.184154459111628E-8, -3.43338934259355E-8, +1.1795268640216787E-8, +4.438921624363781E-8, +2.925681159240093E-8, -2.6437112632041807E-8, +2.2860509143963117E-8, -4.813899778443457E-9, +3.6725170580355583E-9, +2.0217439756338078E-10 };

    private static final double[] TANGENT_TABLE_A = new double[]{ +0.0, +0.1256551444530487, +0.25534194707870483, +0.3936265707015991, +0.5463024377822876, +0.7214844226837158, +0.9315965175628662, +1.1974215507507324, +1.5574076175689697, +2.092571258544922, +3.0095696449279785, +5.041914939880371, +14.101419448852539, -18.430862426757812 };

    private static final double[] TANGENT_TABLE_B = new double[]{ +0.0, -7.877917738262007E-9, -2.5857668567479893E-8, +5.2240336371356666E-9, +5.206150291559893E-8, +1.8307188599677033E-8, -5.7618793749770706E-8, +7.848361555046424E-8, +1.0708593250394448E-7, +1.7827257129423813E-8, +2.893485277253286E-8, +3.1660099222737955E-7, +4.983191803254889E-7, -3.356118100840571E-7 };

    private static final long[] RECIP_2PI = new long[]{ (683565275L << 32) | 2475754826L, (2131351028L << 32) | 2102212464L, (920167782L << 32) | 1326507024L, (2140428522L << 32) | 4155437400L, (1841896334L << 32) | 2425582776L, (26364858L << 32) | 2188665991L, (1065843399L << 32) | 743074255L, (3122695549L << 32) | 1269748001L, (979835913L << 32) | 2904022928L, (1315206542L << 32) | 1624559229L, (656480226L << 32) | 4018031118L, (3355321855L << 32) | 4152452611L, (4224435298L << 32) | 3598883655L, (3679297459L << 32) | 3388129901L, (3553726425L << 32) | 2811755147L, (1565126321L << 32) | 4210654302L, (3477196413L << 32) | 3801392314L, 2600392684L << 32 };

    private static final long[] PI_O_4_BITS = new long[]{ (3373259426L << 32) | 560513588L, (3301335691L << 32) | 2161908945L };

    private static final double[] EIGHTHS = new double[]{ 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625 };

    private static final double[] CBRTTWO = new double[]{ 0.6299605249474366, 0.7937005259840998, 1.0, 1.2599210498948732, 1.5874010519681994 };

    private static final long HEX_40000000 = 1073741824L;

    private static final long MASK_30BITS = (-1L) - ((org.apache.commons.math3.util.FastMath.HEX_40000000) - 1);

    private static final double TWO_POWER_52 = 4.503599627370496E15;

    private static final double F_1_3 = 1.0 / 3.0;

    private static final double F_1_5 = 1.0 / 5.0;

    private static final double F_1_7 = 1.0 / 7.0;

    private static final double F_1_9 = 1.0 / 9.0;

    private static final double F_1_11 = 1.0 / 11.0;

    private static final double F_1_13 = 1.0 / 13.0;

    private static final double F_1_15 = 1.0 / 15.0;

    private static final double F_1_17 = 1.0 / 17.0;

    private static final double F_3_4 = 3.0 / 4.0;

    private static final double F_15_16 = 15.0 / 16.0;

    private static final double F_13_14 = 13.0 / 14.0;

    private static final double F_11_12 = 11.0 / 12.0;

    private static final double F_9_10 = 9.0 / 10.0;

    private static final double F_7_8 = 7.0 / 8.0;

    private static final double F_5_6 = 5.0 / 6.0;

    private static final double F_1_2 = 1.0 / 2.0;

    private static final double F_1_4 = 1.0 / 4.0;

    private FastMath() {
    }

    private static double doubleHighPart(double d) {
        if ((d > (-(org.apache.commons.math3.util.Precision.SAFE_MIN))) && (d < (org.apache.commons.math3.util.Precision.SAFE_MIN))) {
            return d;
        }
        long xl = java.lang.Double.doubleToLongBits(d);
        xl = xl & (org.apache.commons.math3.util.FastMath.MASK_30BITS);
        return java.lang.Double.longBitsToDouble(xl);
    }

    public static double sqrt(final double a) {
        return java.lang.Math.sqrt(a);
    }

    public static double cosh(double x) {
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (org.apache.commons.math3.util.FastMath.exp((-x))) / 2.0;
        }
        double[] hiPrec = new double[2];
        if (x < 0.0) {
            x = -x;
        }
        org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
        double ya = (hiPrec[0]) + (hiPrec[1]);
        double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
        double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double yaa = (ya + temp) - temp;
        double yab = ya - yaa;
        double recip = 1.0 / ya;
        temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double recipa = (recip + temp) - temp;
        double recipb = recip - recipa;
        recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
        recipb += ((-yb) * recip) * recip;
        temp = ya + recipa;
        yb += -((temp - ya) - recipa);
        ya = temp;
        temp = ya + recipb;
        yb += -((temp - ya) - recipb);
        ya = temp;
        double result = ya + yb;
        result *= 0.5;
        return result;
    }

    public static double sinh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return (org.apache.commons.math3.util.FastMath.exp(x)) / 2.0;
        }
        if (x < (-20)) {
            return (-(org.apache.commons.math3.util.FastMath.exp((-x)))) / 2.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x > 0.25) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double yaa = (ya + temp) - temp;
            double yab = ya - yaa;
            double recip = 1.0 / ya;
            temp = recip * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double recipa = (recip + temp) - temp;
            double recipb = recip - recipa;
            recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;
            recipb += ((-yb) * recip) * recip;
            recipa = -recipa;
            recipb = -recipb;
            temp = ya + recipa;
            yb += -((temp - ya) - recipa);
            ya = temp;
            temp = ya + recipb;
            yb += -((temp - ya) - recipb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1(x, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            double temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double za = (denom + temp) - temp;
            double zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            temp = ya + ra;
            yb += -((temp - ya) - ra);
            ya = temp;
            temp = ya + rb;
            yb += -((temp - ya) - rb);
            ya = temp;
            result = ya + yb;
            result *= 0.5;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double tanh(double x) {
        boolean negate = false;
        if (x != x) {
            return x;
        }
        if (x > 20.0) {
            return 1.0;
        }
        if (x < (-20)) {
            return -1.0;
        }
        if (x == 0) {
            return x;
        }
        if (x < 0.0) {
            x = -x;
            negate = true;
        }
        double result;
        if (x >= 0.5) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp((x * 2.0), 0.0, hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = (-1.0) + ya;
            double nb = -((na + 1.0) - ya);
            double temp = na + yb;
            nb += -((temp - na) - yb);
            na = temp;
            double da = 1.0 + ya;
            double db = -((da - 1.0) - ya);
            temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }else {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.expm1((x * 2.0), hiPrec);
            double ya = (hiPrec[0]) + (hiPrec[1]);
            double yb = -((ya - (hiPrec[0])) - (hiPrec[1]));
            double na = ya;
            double nb = yb;
            double da = 2.0 + ya;
            double db = -((da - 2.0) - ya);
            double temp = da + yb;
            db += -((temp - da) - yb);
            da = temp;
            temp = da * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double daa = (da + temp) - temp;
            double dab = da - daa;
            double ratio = na / da;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double ratioa = (ratio + temp) - temp;
            double ratiob = ratio - ratioa;
            ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;
            ratiob += nb / da;
            ratiob += (((-db) * na) / da) / da;
            result = ratioa + ratiob;
        }
        if (negate) {
            result = -result;
        }
        return result;
    }

    public static double acosh(final double a) {
        return org.apache.commons.math3.util.FastMath.log((a + (org.apache.commons.math3.util.FastMath.sqrt(((a * a) - 1)))));
    }

    public static double asinh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAsinh;
        if (a > 0.167) {
            absAsinh = org.apache.commons.math3.util.FastMath.log(((org.apache.commons.math3.util.FastMath.sqrt(((a * a) + 1))) + a));
        }else {
            final double a2 = a * a;
            if (a > 0.097) {
                absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_17)) * (org.apache.commons.math3.util.FastMath.F_15_16)))) * (org.apache.commons.math3.util.FastMath.F_13_14)))) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
            }else
                if (a > 0.036) {
                    absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13)) * (org.apache.commons.math3.util.FastMath.F_11_12)))) * (org.apache.commons.math3.util.FastMath.F_9_10)))) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                }else
                    if (a > 0.0036) {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9)) * (org.apache.commons.math3.util.FastMath.F_7_8)))) * (org.apache.commons.math3.util.FastMath.F_5_6)))) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }else {
                        absAsinh = a * (1 - ((a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5)) * (org.apache.commons.math3.util.FastMath.F_3_4)))) * (org.apache.commons.math3.util.FastMath.F_1_2)));
                    }


        }
        return negative ? -absAsinh : absAsinh;
    }

    public static double atanh(double a) {
        boolean negative = false;
        if (a < 0) {
            negative = true;
            a = -a;
        }
        double absAtanh;
        if (a > 0.15) {
            absAtanh = 0.5 * (org.apache.commons.math3.util.FastMath.log(((1 + a) / (1 - a))));
        }else {
            final double a2 = a * a;
            if (a > 0.087) {
                absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_13) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_15) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_17)))))))))))))))));
            }else
                if (a > 0.031) {
                    absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_9) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_11) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13)))))))))))));
                }else
                    if (a > 0.003) {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_5) + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_7) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9)))))))));
                    }else {
                        absAtanh = a * (1 + (a2 * ((org.apache.commons.math3.util.FastMath.F_1_3) + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5)))));
                    }


        }
        return negative ? -absAtanh : absAtanh;
    }

    public static double signum(final double a) {
        return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a;
    }

    public static float signum(final float a) {
        return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a;
    }

    public static double nextUp(final double a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY);
    }

    public static float nextUp(final float a) {
        return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY);
    }

    public static double random() {
        return java.lang.Math.random();
    }

    public static double exp(double x) {
        return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null);
    }

    private static double exp(double x, double extra, double[] hiPrec) {
        double intPartA;
        double intPartB;
        int intVal;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(200).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_1_13",org.apache.commons.math3.util.FastMath.F_1_13);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("x < 0.0",x < 0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_1_11",org.apache.commons.math3.util.FastMath.F_1_11);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_1_17",org.apache.commons.math3.util.FastMath.F_1_17);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_11_12",org.apache.commons.math3.util.FastMath.F_11_12);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_13_14",org.apache.commons.math3.util.FastMath.F_13_14);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_1_15",org.apache.commons.math3.util.FastMath.F_1_15);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A",org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_1_2",org.apache.commons.math3.util.FastMath.F_1_2);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_15_16",org.apache.commons.math3.util.FastMath.F_15_16);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.EIGHTHS",org.apache.commons.math3.util.FastMath.EIGHTHS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_1_3",org.apache.commons.math3.util.FastMath.F_1_3);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.LN_2_A",org.apache.commons.math3.util.FastMath.LN_2_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_1_4",org.apache.commons.math3.util.FastMath.F_1_4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.LN_2_B",org.apache.commons.math3.util.FastMath.LN_2_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_1_5",org.apache.commons.math3.util.FastMath.F_1_5);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_3_4",org.apache.commons.math3.util.FastMath.F_3_4);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.PI_O_4_BITS",org.apache.commons.math3.util.FastMath.PI_O_4_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_1_7",org.apache.commons.math3.util.FastMath.F_1_7);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.RECIP_2PI",org.apache.commons.math3.util.FastMath.RECIP_2PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.HEX_40000000",org.apache.commons.math3.util.FastMath.HEX_40000000);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_1_9",org.apache.commons.math3.util.FastMath.F_1_9);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_5_6",org.apache.commons.math3.util.FastMath.F_5_6);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("extra",extra);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.LN_MANT_LEN",org.apache.commons.math3.util.FastMath.LN_MANT_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_7_8",org.apache.commons.math3.util.FastMath.F_7_8);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_B",org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.MASK_30BITS",org.apache.commons.math3.util.FastMath.MASK_30BITS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME",org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.TWO_POWER_52",org.apache.commons.math3.util.FastMath.TWO_POWER_52);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("hiPrec",hiPrec);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.PI",org.apache.commons.math3.util.FastMath.PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.COSINE_TABLE_A",org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_A",org.apache.commons.math3.util.FastMath.SINE_TABLE_A);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.E",org.apache.commons.math3.util.FastMath.E);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN",org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_B",org.apache.commons.math3.util.FastMath.SINE_TABLE_B);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.LN_QUICK_COEF",org.apache.commons.math3.util.FastMath.LN_QUICK_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.CBRTTWO",org.apache.commons.math3.util.FastMath.CBRTTWO);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF",org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.F_9_10",org.apache.commons.math3.util.FastMath.F_9_10);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN",org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectionEnds();
        }
        if (runtimeAngelicValue) if (x < 0.0) {
            intVal = ((int) (-x));
            if (intVal > 746) {
                if (hiPrec != null) {
                    hiPrec[0] = 0.0;
                    hiPrec[1] = 0.0;
                }
                return 0.0;
            }
            if (intVal > 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 40.19140625), extra, hiPrec)) / 2.85040095144011776E17;
                if (hiPrec != null) {
                    hiPrec[0] /= 2.85040095144011776E17;
                    hiPrec[1] /= 2.85040095144011776E17;
                }
                return result;
            }
            if (intVal == 709) {
                final double result = (org.apache.commons.math3.util.FastMath.exp((x + 1.494140625), extra, hiPrec)) / 4.455505956692757;
                if (hiPrec != null) {
                    hiPrec[0] /= 4.455505956692757;
                    hiPrec[1] /= 4.455505956692757;
                }
                return result;
            }
            intVal++;
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - intVal)];
            intVal = -intVal;
        }else {
            intVal = ((int) (x));
            if (intVal > 709) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
                    hiPrec[1] = 0.0;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
            intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
            intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) + intVal)];
        }
        final int intFrac = ((int) ((x - intVal) * 1024.0));
        final double fracPartA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
        final double fracPartB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
        final double epsilon = x - (intVal + (intFrac / 1024.0));
        double z = 0.04168701738764507;
        z = (z * epsilon) + 0.1666666505023083;
        z = (z * epsilon) + 0.5000000000042687;
        z = (z * epsilon) + 1.0;
        z = (z * epsilon) + (-3.940510424527919E-20);
        double tempA = intPartA * fracPartA;
        double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB);
        final double tempC = tempB + tempA;
        final double result;
        if (extra != 0.0) {
            result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
        }else {
            result = ((tempC * z) + tempB) + tempA;
        }
        if (hiPrec != null) {
            hiPrec[0] = tempA;
            hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
        }
        return result;
    }

    public static double expm1(double x) {
        return org.apache.commons.math3.util.FastMath.expm1(x, null);
    }

    private static double expm1(double x, double[] hiPrecOut) {
        if ((x != x) || (x == 0.0)) {
            return x;
        }
        if ((x <= (-1.0)) || (x >= 1.0)) {
            double[] hiPrec = new double[2];
            org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec);
            if (x > 0.0) {
                return ((-1.0) + (hiPrec[0])) + (hiPrec[1]);
            }else {
                final double ra = (-1.0) + (hiPrec[0]);
                double rb = -((ra + 1.0) - (hiPrec[0]));
                rb += hiPrec[1];
                return ra + rb;
            }
        }
        double baseA;
        double baseB;
        double epsilon;
        boolean negative = false;
        if (x < 0.0) {
            x = -x;
            negative = true;
        }
        {
            int intFrac = ((int) (x * 1024.0));
            double tempA = (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]) - 1.0;
            double tempB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
            double temp = tempA + tempB;
            tempB = -((temp - tempA) - tempB);
            tempA = temp;
            temp = tempA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            baseA = (tempA + temp) - temp;
            baseB = tempB + (tempA - baseA);
            epsilon = x - (intFrac / 1024.0);
        }
        double zb = 0.008336750013465571;
        zb = (zb * epsilon) + 0.041666663879186654;
        zb = (zb * epsilon) + 0.16666666666745392;
        zb = (zb * epsilon) + 0.49999999999999994;
        zb = zb * epsilon;
        zb = zb * epsilon;
        double za = epsilon;
        double temp = za + zb;
        zb = -((temp - za) - zb);
        za = temp;
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        temp = (za + temp) - temp;
        zb += za - temp;
        za = temp;
        double ya = za * baseA;
        temp = ya + (za * baseB);
        double yb = -((temp - ya) - (za * baseB));
        ya = temp;
        temp = ya + (zb * baseA);
        yb += -((temp - ya) - (zb * baseA));
        ya = temp;
        temp = ya + (zb * baseB);
        yb += -((temp - ya) - (zb * baseB));
        ya = temp;
        temp = ya + baseA;
        yb += -((temp - baseA) - ya);
        ya = temp;
        temp = ya + za;
        yb += -((temp - ya) - za);
        ya = temp;
        temp = ya + baseB;
        yb += -((temp - ya) - baseB);
        ya = temp;
        temp = ya + zb;
        yb += -((temp - ya) - zb);
        ya = temp;
        if (negative) {
            double denom = 1.0 + ya;
            double denomr = 1.0 / denom;
            double denomb = (-((denom - 1.0) - ya)) + yb;
            double ratio = ya * denomr;
            temp = ratio * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double ra = (ratio + temp) - temp;
            double rb = ratio - ra;
            temp = denom * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            za = (denom + temp) - temp;
            zb = denom - za;
            rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;
            rb += yb * denomr;
            rb += (((-ya) * denomb) * denomr) * denomr;
            ya = -ra;
            yb = -rb;
        }
        if (hiPrecOut != null) {
            hiPrecOut[0] = ya;
            hiPrecOut[1] = yb;
        }
        return ya + yb;
    }

    public static double log(final double x) {
        return org.apache.commons.math3.util.FastMath.log(x, null);
    }

    private static double log(final double x, final double[] hiPrec) {
        if (x == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        long bits = java.lang.Double.doubleToLongBits(x);
        if (((bits & -9223372036854775808L) != 0) || (x != x)) {
            if (x != 0.0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NaN;
                }
                return java.lang.Double.NaN;
            }
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (hiPrec != null) {
                hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
            }
            return java.lang.Double.POSITIVE_INFINITY;
        }
        int exp = ((int) (bits >> 52)) - 1023;
        if ((bits & 9218868437227405312L) == 0) {
            if (x == 0) {
                if (hiPrec != null) {
                    hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.NEGATIVE_INFINITY;
            }
            bits <<= 1;
            while ((bits & 4503599627370496L) == 0) {
                --exp;
                bits <<= 1;
            } 
        }
        if ((exp == (-1)) || (exp == 0)) {
            if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {
                double xa = x - 1.0;
                double xb = (xa - x) + 1.0;
                double tmp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                double aa = (xa + tmp) - tmp;
                double ab = xa - aa;
                xa = aa;
                xb = ab;
                final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[((org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 1)];
                double ya = lnCoef_last[0];
                double yb = lnCoef_last[1];
                for (int i = (org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length) - 2; i >= 0; i--) {
                    aa = ya * xa;
                    ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                    final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i];
                    aa = ya + (lnCoef_i[0]);
                    ab = yb + (lnCoef_i[1]);
                    tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                    ya = (aa + tmp) - tmp;
                    yb = (aa - ya) + ab;
                }
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                return ya + yb;
            }
        }
        final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 4499201580859392L) >> 42))];
        final double epsilon = (bits & 4398046511103L) / ((org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L));
        double lnza = 0.0;
        double lnzb = 0.0;
        if (hiPrec != null) {
            double tmp = epsilon * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            double aa = (epsilon + tmp) - tmp;
            double ab = epsilon - aa;
            double xa = aa;
            double xb = ab;
            final double numer = bits & 4398046511103L;
            final double denom = (org.apache.commons.math3.util.FastMath.TWO_POWER_52) + (bits & 4499201580859392L);
            aa = (numer - (xa * denom)) - (xb * denom);
            xb += aa / denom;
            final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[((org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 1)];
            double ya = lnCoef_last[0];
            double yb = lnCoef_last[1];
            for (int i = (org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length) - 2; i >= 0; i--) {
                aa = ya * xa;
                ab = ((ya * xb) + (yb * xa)) + (yb * xb);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
                final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i];
                aa = ya + (lnCoef_i[0]);
                ab = yb + (lnCoef_i[1]);
                tmp = aa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
                ya = (aa + tmp) - tmp;
                yb = (aa - ya) + ab;
            }
            aa = ya * xa;
            ab = ((ya * xb) + (yb * xa)) + (yb * xb);
            lnza = aa + ab;
            lnzb = -((lnza - aa) - ab);
        }else {
            lnza = -0.16624882440418567;
            lnza = (lnza * epsilon) + 0.19999954120254515;
            lnza = (lnza * epsilon) + (-0.2499999997677497);
            lnza = (lnza * epsilon) + 0.3333333333332802;
            lnza = (lnza * epsilon) + (-0.5);
            lnza = (lnza * epsilon) + 1.0;
            lnza = lnza * epsilon;
        }
        double a = (org.apache.commons.math3.util.FastMath.LN_2_A) * exp;
        double b = 0.0;
        double c = a + (lnm[0]);
        double d = -((c - a) - (lnm[0]));
        a = c;
        b = b + d;
        c = a + lnza;
        d = -((c - a) - lnza);
        a = c;
        b = b + d;
        c = a + ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp);
        d = -((c - a) - ((org.apache.commons.math3.util.FastMath.LN_2_B) * exp));
        a = c;
        b = b + d;
        c = a + (lnm[1]);
        d = -((c - a) - (lnm[1]));
        a = c;
        b = b + d;
        c = a + lnzb;
        d = -((c - a) - lnzb);
        a = c;
        b = b + d;
        if (hiPrec != null) {
            hiPrec[0] = a;
            hiPrec[1] = b;
        }
        return a + b;
    }

    public static double log1p(final double x) {
        if (x == (-1)) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        if ((x > 1.0E-6) || (x < (-1.0E-6))) {
            final double xpa = 1 + x;
            final double xpb = -((xpa - 1) - x);
            final double[] hiPrec = new double[2];
            final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
            if (java.lang.Double.isInfinite(lores)) {
                return lores;
            }
            final double fx1 = xpb / xpa;
            final double epsilon = (0.5 * fx1) + 1;
            return ((epsilon * fx1) + (hiPrec[1])) + (hiPrec[0]);
        }else {
            final double y = (((x * (org.apache.commons.math3.util.FastMath.F_1_3)) - (org.apache.commons.math3.util.FastMath.F_1_2)) * x) + 1;
            return y * x;
        }
    }

    public static double log10(final double x) {
        final double[] hiPrec = new double[2];
        final double lores = org.apache.commons.math3.util.FastMath.log(x, hiPrec);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        final double tmp = (hiPrec[0]) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double lna = ((hiPrec[0]) + tmp) - tmp;
        final double lnb = ((hiPrec[0]) - lna) + (hiPrec[1]);
        final double rln10a = 0.4342944622039795;
        final double rln10b = 1.9699272335463627E-8;
        return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna);
    }

    public static double log(double base, double x) {
        return (org.apache.commons.math3.util.FastMath.log(x)) / (org.apache.commons.math3.util.FastMath.log(base));
    }

    public static double pow(double x, double y) {
        final double[] lns = new double[2];
        if (y == 0.0) {
            return 1.0;
        }
        if (x != x) {
            return x;
        }
        if (x == 0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if ((bits & -9223372036854775808L) != 0) {
                long yi = ((long) (y));
                if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
                    return -0.0;
                }
            }
            if (y < 0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }
            if (y > 0) {
                return 0.0;
            }
            return java.lang.Double.NaN;
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0.0) {
                return 0.0;
            }else {
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) > 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (y != y) {
                return y;
            }
            if (y < 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return -0.0;
                }
                return 0.0;
            }
            if (y > 0) {
                long yi = ((long) (y));
                if ((y == yi) && ((yi & 1) == 1)) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return java.lang.Double.POSITIVE_INFINITY;
            }
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((x * x) == 1.0) {
                return java.lang.Double.NaN;
            }
            if ((x * x) < 1.0) {
                return java.lang.Double.POSITIVE_INFINITY;
            }else {
                return 0.0;
            }
        }
        if (x < 0) {
            if ((y >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (y <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
                return org.apache.commons.math3.util.FastMath.pow((-x), y);
            }
            if (y == ((long) (y))) {
                return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow((-x), y) : -(org.apache.commons.math3.util.FastMath.pow((-x), y));
            }else {
                return java.lang.Double.NaN;
            }
        }
        double ya;
        double yb;
        if ((y < 8.0E298) && (y > (-8.0E298))) {
            double tmp1 = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            ya = (y + tmp1) - tmp1;
            yb = y - ya;
        }else {
            double tmp1 = y * 9.313225746154785E-10;
            double tmp2 = tmp1 * 9.313225746154785E-10;
            ya = (((tmp1 + tmp2) - tmp1) * (org.apache.commons.math3.util.FastMath.HEX_40000000)) * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            yb = y - ya;
        }
        final double lores = org.apache.commons.math3.util.FastMath.log(x, lns);
        if (java.lang.Double.isInfinite(lores)) {
            return lores;
        }
        double lna = lns[0];
        double lnb = lns[1];
        double tmp1 = lna * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double tmp2 = (lna + tmp1) - tmp1;
        lnb += lna - tmp2;
        lna = tmp2;
        final double aa = lna * ya;
        final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb);
        lna = aa + ab;
        lnb = -((lna - aa) - ab);
        double z = 1.0 / 120.0;
        z = (z * lnb) + (1.0 / 24.0);
        z = (z * lnb) + (1.0 / 6.0);
        z = (z * lnb) + 0.5;
        z = (z * lnb) + 1.0;
        z = z * lnb;
        final double result = org.apache.commons.math3.util.FastMath.exp(lna, z, null);
        return result;
    }

    public static double pow(double d, int e) {
        if (e == 0) {
            return 1.0;
        }else
            if (e < 0) {
                e = -e;
                d = 1.0 / d;
            }

        final int splitFactor = 134217729;
        final double cd = splitFactor * d;
        final double d1High = cd - (cd - d);
        final double d1Low = d - d1High;
        double resultHigh = 1;
        double resultLow = 0;
        double d2p = d;
        double d2pHigh = d1High;
        double d2pLow = d1Low;
        while (e != 0) {
            if ((e & 1) != 0) {
                final double tmpHigh = resultHigh * d2p;
                final double cRH = splitFactor * resultHigh;
                final double rHH = cRH - (cRH - resultHigh);
                final double rHL = resultHigh - rHH;
                final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
                resultHigh = tmpHigh;
                resultLow = (resultLow * d2p) + tmpLow;
            }
            final double tmpHigh = d2pHigh * d2p;
            final double cD2pH = splitFactor * d2pHigh;
            final double d2pHH = cD2pH - (cD2pH - d2pHigh);
            final double d2pHL = d2pHigh - d2pHH;
            final double tmpLow = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow));
            final double cTmpH = splitFactor * tmpHigh;
            d2pHigh = cTmpH - (cTmpH - tmpHigh);
            d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh);
            d2p = d2pHigh + d2pLow;
            e = e >> 1;
        } 
        return resultHigh + resultLow;
    }

    private static double polySine(final double x) {
        double x2 = x * x;
        double p = 2.7553817452272217E-6;
        p = (p * x2) + (-1.9841269659586505E-4);
        p = (p * x2) + 0.008333333333329196;
        p = (p * x2) + (-0.16666666666666666);
        p = (p * x2) * x;
        return p;
    }

    private static double polyCosine(double x) {
        double x2 = x * x;
        double p = 2.479773539153719E-5;
        p = (p * x2) + (-0.0013888888689039883);
        p = (p * x2) + 0.041666666666621166;
        p = (p * x2) + (-0.49999999999999994);
        p *= x2;
        return p;
    }

    private static double sinQ(double xa, double xb) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        final double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double result;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        if (xb != 0.0) {
            t = (((costA + costB) * (cosEpsA + cosEpsB)) - ((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
            c = a + t;
            d = -((c - a) - t);
            a = c;
            b = b + d;
        }
        result = a + b;
        return result;
    }

    private static double cosQ(double xa, double xb) {
        final double pi2a = 1.5707963267948966;
        final double pi2b = 6.123233995736766E-17;
        final double a = pi2a - xa;
        double b = -((a - pi2a) + xa);
        b += pi2b - xb;
        return org.apache.commons.math3.util.FastMath.sinQ(a, b);
    }

    private static double tanQ(double xa, double xb, boolean cotanFlag) {
        int idx = ((int) ((xa * 8.0) + 0.5));
        final double epsilon = xa - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]);
        final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx];
        final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx];
        final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx];
        final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx];
        double sinEpsA = epsilon;
        double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon);
        final double cosEpsA = 1.0;
        final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon);
        double temp = sinEpsA * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (sinEpsA + temp) - temp;
        sinEpsB += sinEpsA - temp2;
        sinEpsA = temp2;
        double a = 0;
        double b = 0;
        double t = sintA;
        double c = a + t;
        double d = -((c - a) - t);
        a = c;
        b = b + d;
        t = costA * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = (b + (sintA * cosEpsB)) + (costA * sinEpsB);
        b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB);
        double sina = a + b;
        double sinb = -((sina - a) - b);
        a = b = c = d = 0.0;
        t = costA * cosEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        t = (-sintA) * sinEpsA;
        c = a + t;
        d = -((c - a) - t);
        a = c;
        b = b + d;
        b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB);
        b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB));
        double cosa = a + b;
        double cosb = -((cosa - a) - b);
        if (cotanFlag) {
            double tmp;
            tmp = cosa;
            cosa = sina;
            sina = tmp;
            tmp = cosb;
            cosb = sinb;
            sinb = tmp;
        }
        double est = sina / cosa;
        temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double esta = (est + temp) - temp;
        double estb = est - esta;
        temp = cosa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double cosaa = (cosa + temp) - temp;
        double cosab = cosa - cosaa;
        double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa;
        err += sinb / cosa;
        err += (((-sina) * cosb) / cosa) / cosa;
        if (xb != 0.0) {
            double xbadj = xb + ((est * est) * xb);
            if (cotanFlag) {
                xbadj = -xbadj;
            }
            err += xbadj;
        }
        return est + err;
    }

    private static void reducePayneHanek(double x, double[] result) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        inbits &= 4503599627370495L;
        inbits |= 4503599627370496L;
        exponent++;
        inbits <<= 11;
        long shpi0;
        long shpiA;
        long shpiB;
        int idx = exponent >> 6;
        int shift = exponent - (idx << 6);
        if (shift != 0) {
            shpi0 = (idx == 0) ? 0 : (org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)]) << shift;
            shpi0 |= (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) >>> (64 - shift);
            shpiA = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) >>> (64 - shift));
            shpiB = ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)]) << shift) | ((org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 2)]) >>> (64 - shift));
        }else {
            shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx - 1)];
            shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx];
            shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[(idx + 1)];
        }
        long a = inbits >>> 32;
        long b = inbits & 4294967295L;
        long c = shpiA >>> 32;
        long d = shpiA & 4294967295L;
        long ac = a * c;
        long bd = b * d;
        long bc = b * c;
        long ad = a * d;
        long prodB = bd + (ad << 32);
        long prodA = ac + (ad >>> 32);
        boolean bita = (bd & -9223372036854775808L) != 0;
        boolean bitb = (ad & 2147483648L) != 0;
        boolean bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prodB = prodB + (bc << 32);
        prodA = prodA + (bc >>> 32);
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpiB >>> 32;
        d = shpiB & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prodB & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prodB += ac;
        bitsum = (prodB & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prodA++;
        }
        c = shpi0 >>> 32;
        d = shpi0 & 4294967295L;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        prodA += bd + ((bc + ad) << 32);
        int intPart = ((int) (prodA >>> 62));
        prodA <<= 2;
        prodA |= prodB >>> 62;
        prodB <<= 2;
        a = prodA >>> 32;
        b = prodA & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bd = b * d;
        bc = b * c;
        ad = a * d;
        long prod2B = bd + (ad << 32);
        long prod2A = ac + (ad >>> 32);
        bita = (bd & -9223372036854775808L) != 0;
        bitb = (ad & 2147483648L) != 0;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (bc & 2147483648L) != 0;
        prod2B = prod2B + (bc << 32);
        prod2A = prod2A + (bc >>> 32);
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        a = prodB >>> 32;
        b = prodB & 4294967295L;
        c = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) >>> 32;
        d = (org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0]) & 4294967295L;
        ac = a * c;
        bc = b * c;
        ad = a * d;
        ac = ac + ((bc + ad) >>> 32);
        bita = (prod2B & -9223372036854775808L) != 0;
        bitb = (ac & -9223372036854775808L) != 0;
        prod2B += ac;
        bitsum = (prod2B & -9223372036854775808L) != 0;
        if ((bita && bitb) || ((bita || bitb) && (!bitsum))) {
            prod2A++;
        }
        double tmpA = (prod2A >>> 12) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double tmpB = ((((prod2A & 4095L) << 40) + (prod2B >>> 24)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52);
        double sumA = tmpA + tmpB;
        double sumB = -((sumA - tmpA) - tmpB);
        result[0] = intPart;
        result[1] = sumA * 2.0;
        result[2] = sumB * 2.0;
    }

    public static double sin(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa;
        double xb = 0.0;
        xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (negative) {
            quadrant ^= 2;
        }
        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            case 1 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 3 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double cos(double x) {
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            xa = -xa;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        switch (quadrant) {
            case 0 :
                return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
            case 1 :
                return -(org.apache.commons.math3.util.FastMath.sinQ(xa, xb));
            case 2 :
                return -(org.apache.commons.math3.util.FastMath.cosQ(xa, xb));
            case 3 :
                return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
            default :
                return java.lang.Double.NaN;
        }
    }

    public static double tan(double x) {
        boolean negative = false;
        int quadrant = 0;
        double xa = x;
        if (x < 0) {
            negative = true;
            xa = -xa;
        }
        if (xa == 0.0) {
            long bits = java.lang.Double.doubleToLongBits(x);
            if (bits < 0) {
                return -0.0;
            }
            return 0.0;
        }
        if ((xa != xa) || (xa == (java.lang.Double.POSITIVE_INFINITY))) {
            return java.lang.Double.NaN;
        }
        double xb = 0;
        if (xa > 3294198.0) {
            double[] reduceResults = new double[3];
            org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults);
            quadrant = ((int) (reduceResults[0])) & 3;
            xa = reduceResults[1];
            xb = reduceResults[2];
        }else
            if (xa > 1.5707963267948966) {
                final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
                quadrant = (cw.getK()) & 3;
                xa = cw.getRemA();
                xb = cw.getRemB();
            }

        if (xa > 1.5) {
            final double pi2a = 1.5707963267948966;
            final double pi2b = 6.123233995736766E-17;
            final double a = pi2a - xa;
            double b = -((a - pi2a) + xa);
            b += pi2b - xb;
            xa = a + b;
            xb = -((xa - a) - b);
            quadrant ^= 1;
            negative ^= true;
        }
        double result;
        if ((quadrant & 1) == 0) {
            result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false);
        }else {
            result = -(org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true));
        }
        if (negative) {
            result = -result;
        }
        return result;
    }

    public static double atan(double x) {
        return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false);
    }

    private static double atan(double xa, double xb, boolean leftPlane) {
        boolean negate = false;
        int idx;
        if (xa == 0.0) {
            return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
        }
        if (xa < 0) {
            xa = -xa;
            xb = -xb;
            negate = true;
        }
        if (xa > 1.633123935319537E16) {
            return negate ^ leftPlane ? (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2) : (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (xa < 1) {
            idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
        }else {
            final double oneOverXa = 1 / xa;
            idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
        }
        double epsA = xa - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
        double epsB = -((epsA - xa) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]));
        epsB += xb - (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
        double temp = epsA + epsB;
        epsB = -((temp - epsA) - epsB);
        epsA = temp;
        temp = xa * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (xa + temp) - temp;
        double yb = (xb + xa) - ya;
        xa = ya;
        xb += yb;
        if (idx == 0) {
            final double denom = 1.0 / (1.0 + ((xa + xb) * ((org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]))));
            ya = epsA * denom;
            yb = epsB * denom;
        }else {
            double temp2 = xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]);
            double za = 1.0 + temp2;
            double zb = -((za - 1.0) - temp2);
            temp2 = (xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])) + (xa * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]));
            temp = za + temp2;
            zb += -((temp - za) - temp2);
            za = temp;
            zb += xb * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
            ya = epsA / za;
            temp = ya * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double yaa = (ya + temp) - temp;
            final double yab = ya - yaa;
            temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
            final double zaa = (za + temp) - temp;
            final double zab = za - zaa;
            yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;
            yb += (((-epsA) * zb) / za) / za;
            yb += epsB / za;
        }
        epsA = ya;
        epsB = yb;
        final double epsA2 = epsA * epsA;
        yb = 0.07490822288864472;
        yb = (yb * epsA2) + (-0.09088450866185192);
        yb = (yb * epsA2) + 0.11111095942313305;
        yb = (yb * epsA2) + (-0.1428571423679182);
        yb = (yb * epsA2) + 0.19999999999923582;
        yb = (yb * epsA2) + (-0.33333333333333287);
        yb = (yb * epsA2) * epsA;
        ya = epsA;
        temp = ya + yb;
        yb = -((temp - ya) - yb);
        ya = temp;
        yb += epsB / (1.0 + (epsA * epsA));
        double za = (org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) + ya;
        double zb = -((za - (org.apache.commons.math3.util.FastMath.EIGHTHS[idx])) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double result = za + zb;
        double resultb = -((result - za) - zb);
        if (leftPlane) {
            final double pia = 1.5707963267948966 * 2;
            final double pib = 6.123233995736766E-17 * 2;
            za = pia - result;
            zb = -((za - pia) + result);
            zb += pib - resultb;
            result = za + zb;
            resultb = -((result - za) - zb);
        }
        if (negate ^ leftPlane) {
            result = -result;
        }
        return result;
    }

    public static double atan2(double y, double x) {
        if ((x != x) || (y != y)) {
            return java.lang.Double.NaN;
        }
        if (y == 0) {
            final double result = x * y;
            final double invx = 1.0 / x;
            final double invy = 1.0 / y;
            if (invx == 0) {
                if (x > 0) {
                    return y;
                }else {
                    return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
                }
            }
            if ((x < 0) || (invx < 0)) {
                if ((y < 0) || (invy < 0)) {
                    return -(java.lang.Math.PI);
                }else {
                    return java.lang.Math.PI;
                }
            }else {
                return result;
            }
        }
        if (y == (java.lang.Double.POSITIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (y == (java.lang.Double.NEGATIVE_INFINITY)) {
            if (x == (java.lang.Double.POSITIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_4);
            }
            if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_3_4);
            }
            return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
        }
        if (x == (java.lang.Double.POSITIVE_INFINITY)) {
            if ((y > 0) || ((1 / y) > 0)) {
                return 0.0;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -0.0;
            }
        }
        if (x == (java.lang.Double.NEGATIVE_INFINITY)) {
            if ((y > 0.0) || ((1 / y) > 0.0)) {
                return java.lang.Math.PI;
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return -(java.lang.Math.PI);
            }
        }
        if (x == 0) {
            if ((y > 0) || ((1 / y) > 0)) {
                return (java.lang.Math.PI) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
            if ((y < 0) || ((1 / y) < 0)) {
                return (-(java.lang.Math.PI)) * (org.apache.commons.math3.util.FastMath.F_1_2);
            }
        }
        final double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return org.apache.commons.math3.util.FastMath.atan(r, 0, (x < 0));
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        final double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        final double xb = x - xa;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        final double temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        if (ra == 0) {
            ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y);
        }
        final double result = org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
        return result;
    }

    public static double asin(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == 1.0) {
            return (java.lang.Math.PI) / 2.0;
        }
        if (x == (-1.0)) {
            return (-(java.lang.Math.PI)) / 2.0;
        }
        if (x == 0.0) {
            return x;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y;
        y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        double dx = zb / (2.0 * y);
        double r = x / y;
        temp = r * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ra = (r + temp) - temp;
        double rb = r - ra;
        rb += ((((x - (ra * ya)) - (ra * yb)) - (rb * ya)) - (rb * yb)) / y;
        rb += (((-x) * dx) / y) / y;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, false);
    }

    public static double acos(double x) {
        if (x != x) {
            return java.lang.Double.NaN;
        }
        if ((x > 1.0) || (x < (-1.0))) {
            return java.lang.Double.NaN;
        }
        if (x == (-1.0)) {
            return java.lang.Math.PI;
        }
        if (x == 1.0) {
            return 0.0;
        }
        if (x == 0) {
            return (java.lang.Math.PI) / 2.0;
        }
        double temp = x * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        final double xa = (x + temp) - temp;
        final double xb = x - xa;
        double ya = xa * xa;
        double yb = ((xa * xb) * 2.0) + (xb * xb);
        ya = -ya;
        yb = -yb;
        double za = 1.0 + ya;
        double zb = -((za - 1.0) - ya);
        temp = za + yb;
        zb += -((temp - za) - yb);
        za = temp;
        double y = org.apache.commons.math3.util.FastMath.sqrt(za);
        temp = y * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        ya = (y + temp) - temp;
        yb = y - ya;
        yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y);
        yb += zb / (2.0 * y);
        y = ya + yb;
        yb = -((y - ya) - yb);
        double r = y / x;
        if (java.lang.Double.isInfinite(r)) {
            return (java.lang.Math.PI) / 2;
        }
        double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r);
        double rb = r - ra;
        rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x;
        rb += yb / x;
        temp = ra + rb;
        rb = -((temp - ra) - rb);
        ra = temp;
        return org.apache.commons.math3.util.FastMath.atan(ra, rb, (x < 0));
    }

    public static double cbrt(double x) {
        long inbits = java.lang.Double.doubleToLongBits(x);
        int exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        boolean subnormal = false;
        if (exponent == (-1023)) {
            if (x == 0) {
                return x;
            }
            subnormal = true;
            x *= 1.8014398509481984E16;
            inbits = java.lang.Double.doubleToLongBits(x);
            exponent = ((int) ((inbits >> 52) & 2047)) - 1023;
        }
        if (exponent == 1024) {
            return x;
        }
        int exp3 = exponent / 3;
        double p2 = java.lang.Double.longBitsToDouble(((inbits & -9223372036854775808L) | (((long) ((exp3 + 1023) & 2047)) << 52)));
        final double mant = java.lang.Double.longBitsToDouble(((inbits & 4503599627370495L) | 4607182418800017408L));
        double est = -0.010714690733195933;
        est = (est * mant) + 0.0875862700108075;
        est = (est * mant) + (-0.3058015757857271);
        est = (est * mant) + 0.7249995199969751;
        est = (est * mant) + 0.5039018405998233;
        est *= org.apache.commons.math3.util.FastMath.CBRTTWO[((exponent % 3) + 2)];
        final double xs = x / ((p2 * p2) * p2);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        est += (xs - ((est * est) * est)) / ((3 * est) * est);
        double temp = est * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double ya = (est + temp) - temp;
        double yb = est - ya;
        double za = ya * ya;
        double zb = ((ya * yb) * 2.0) + (yb * yb);
        temp = za * (org.apache.commons.math3.util.FastMath.HEX_40000000);
        double temp2 = (za + temp) - temp;
        zb += za - temp2;
        za = temp2;
        zb = ((za * yb) + (ya * zb)) + (zb * yb);
        za = za * ya;
        double na = xs - za;
        double nb = -((na - xs) + za);
        nb -= zb;
        est += (na + nb) / ((3 * est) * est);
        est *= p2;
        if (subnormal) {
            est *= 3.814697265625E-6;
        }
        return est;
    }

    public static double toRadians(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 0.01745329052209854;
        final double factb = 1.997844754509471E-9;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
        if (result == 0) {
            result = result * x;
        }
        return result;
    }

    public static double toDegrees(double x) {
        if ((java.lang.Double.isInfinite(x)) || (x == 0.0)) {
            return x;
        }
        final double facta = 57.2957763671875;
        final double factb = 3.145894820876798E-6;
        double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x);
        double xb = x - xa;
        return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta);
    }

    public static int abs(final int x) {
        return x < 0 ? -x : x;
    }

    public static long abs(final long x) {
        return x < 0L ? -x : x;
    }

    public static float abs(final float x) {
        return x < 0.0F ? -x : x == 0.0F ? 0.0F : x;
    }

    public static double abs(double x) {
        return x < 0.0 ? -x : x == 0.0 ? 0.0 : x;
    }

    public static double ulp(double x) {
        if (java.lang.Double.isInfinite(x)) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Double.longBitsToDouble(((java.lang.Double.doubleToLongBits(x)) ^ 1)))));
    }

    public static float ulp(float x) {
        if (java.lang.Float.isInfinite(x)) {
            return java.lang.Float.POSITIVE_INFINITY;
        }
        return org.apache.commons.math3.util.FastMath.abs((x - (java.lang.Float.intBitsToFloat(((java.lang.Float.floatToIntBits(x)) ^ 1)))));
    }

    public static double scalb(final double d, final int n) {
        if ((n > (-1023)) && (n < 1024)) {
            return d * (java.lang.Double.longBitsToDouble((((long) (n + 1023)) << 52)));
        }
        if (((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) || (d == 0)) {
            return d;
        }
        if (n < (-2098)) {
            return d > 0 ? 0.0 : -0.0;
        }
        if (n > 2097) {
            return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
        }
        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        int exponent = ((int) (bits >>> 52)) & 2047;
        long mantissa = bits & 4503599627370495L;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
            }else
                if (scaledExponent > (-53)) {
                    mantissa = mantissa | (1L << 52);
                    final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Double.longBitsToDouble((sign | mantissa));
                }else {
                    return sign == 0L ? 0.0 : -0.0;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 52) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 4503599627370495L;
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 2047) {
                    return java.lang.Double.longBitsToDouble(((sign | (((long) (scaledExponent)) << 52)) | mantissa));
                }else {
                    return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
                }

        }
    }

    public static float scalb(final float f, final int n) {
        if ((n > (-127)) && (n < 128)) {
            return f * (java.lang.Float.intBitsToFloat(((n + 127) << 23)));
        }
        if (((java.lang.Float.isNaN(f)) || (java.lang.Float.isInfinite(f))) || (f == 0.0F)) {
            return f;
        }
        if (n < (-277)) {
            return f > 0 ? 0.0F : -0.0F;
        }
        if (n > 276) {
            return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
        }
        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        int exponent = (bits >>> 23) & 255;
        int mantissa = bits & 8388607;
        int scaledExponent = exponent + n;
        if (n < 0) {
            if (scaledExponent > 0) {
                return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
            }else
                if (scaledExponent > (-24)) {
                    mantissa = mantissa | (1 << 23);
                    final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
                    mantissa = mantissa >>> (1 - scaledExponent);
                    if (mostSignificantLostBit != 0) {
                        mantissa++;
                    }
                    return java.lang.Float.intBitsToFloat((sign | mantissa));
                }else {
                    return sign == 0 ? 0.0F : -0.0F;
                }

        }else {
            if (exponent == 0) {
                while ((mantissa >>> 23) != 1) {
                    mantissa = mantissa << 1;
                    --scaledExponent;
                } 
                ++scaledExponent;
                mantissa = mantissa & 8388607;
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }
            }else
                if (scaledExponent < 255) {
                    return java.lang.Float.intBitsToFloat(((sign | (scaledExponent << 23)) | mantissa));
                }else {
                    return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
                }

        }
    }

    public static double nextAfter(double d, double direction) {
        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Double.NaN;
        }else
            if (d == direction) {
                return direction;
            }else
                if (java.lang.Double.isInfinite(d)) {
                    return d < 0 ? -(java.lang.Double.MAX_VALUE) : java.lang.Double.MAX_VALUE;
                }else
                    if (d == 0) {
                        return direction < 0 ? -(java.lang.Double.MIN_VALUE) : java.lang.Double.MIN_VALUE;
                    }



        final long bits = java.lang.Double.doubleToLongBits(d);
        final long sign = bits & -9223372036854775808L;
        if ((direction < d) ^ (sign == 0L)) {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) + 1)));
        }else {
            return java.lang.Double.longBitsToDouble((sign | ((bits & 9223372036854775807L) - 1)));
        }
    }

    public static float nextAfter(final float f, final double direction) {
        if ((java.lang.Double.isNaN(f)) || (java.lang.Double.isNaN(direction))) {
            return java.lang.Float.NaN;
        }else
            if (f == direction) {
                return ((float) (direction));
            }else
                if (java.lang.Float.isInfinite(f)) {
                    return f < 0.0F ? -(java.lang.Float.MAX_VALUE) : java.lang.Float.MAX_VALUE;
                }else
                    if (f == 0.0F) {
                        return direction < 0 ? -(java.lang.Float.MIN_VALUE) : java.lang.Float.MIN_VALUE;
                    }



        final int bits = java.lang.Float.floatToIntBits(f);
        final int sign = bits & -2147483648;
        if ((direction < f) ^ (sign == 0)) {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) + 1)));
        }else {
            return java.lang.Float.intBitsToFloat((sign | ((bits & 2147483647) - 1)));
        }
    }

    public static double floor(double x) {
        long y;
        if (x != x) {
            return x;
        }
        if ((x >= (org.apache.commons.math3.util.FastMath.TWO_POWER_52)) || (x <= (-(org.apache.commons.math3.util.FastMath.TWO_POWER_52)))) {
            return x;
        }
        y = ((long) (x));
        if ((x < 0) && (y != x)) {
            y--;
        }
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double ceil(double x) {
        double y;
        if (x != x) {
            return x;
        }
        y = org.apache.commons.math3.util.FastMath.floor(x);
        if (y == x) {
            return y;
        }
        y += 1.0;
        if (y == 0) {
            return x * y;
        }
        return y;
    }

    public static double rint(double x) {
        double y = org.apache.commons.math3.util.FastMath.floor(x);
        double d = x - y;
        if (d > 0.5) {
            if (y == (-1.0)) {
                return -0.0;
            }
            return y + 1.0;
        }
        if (d < 0.5) {
            return y;
        }
        long z = ((long) (y));
        return (z & 1) == 0 ? y : y + 1.0;
    }

    public static long round(double x) {
        return ((long) (org.apache.commons.math3.util.FastMath.floor((x + 0.5))));
    }

    public static int round(final float x) {
        return ((int) (org.apache.commons.math3.util.FastMath.floor((x + 0.5F))));
    }

    public static int min(final int a, final int b) {
        return a <= b ? a : b;
    }

    public static long min(final long a, final long b) {
        return a <= b ? a : b;
    }

    public static float min(final float a, final float b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return a;
        }
        return b;
    }

    public static double min(final double a, final double b) {
        if (a > b) {
            return b;
        }
        if (a < b) {
            return a;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return a;
        }
        return b;
    }

    public static int max(final int a, final int b) {
        return a <= b ? b : a;
    }

    public static long max(final long a, final long b) {
        return a <= b ? b : a;
    }

    public static float max(final float a, final float b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Float.NaN;
        }
        int bits = java.lang.Float.floatToRawIntBits(a);
        if (bits == -2147483648) {
            return b;
        }
        return a;
    }

    public static double max(final double a, final double b) {
        if (a > b) {
            return a;
        }
        if (a < b) {
            return b;
        }
        if (a != b) {
            return java.lang.Double.NaN;
        }
        long bits = java.lang.Double.doubleToRawLongBits(a);
        if (bits == -9223372036854775808L) {
            return b;
        }
        return a;
    }

    public static double hypot(final double x, final double y) {
        if ((java.lang.Double.isInfinite(x)) || (java.lang.Double.isInfinite(y))) {
            return java.lang.Double.POSITIVE_INFINITY;
        }else
            if ((java.lang.Double.isNaN(x)) || (java.lang.Double.isNaN(y))) {
                return java.lang.Double.NaN;
            }else {
                final int expX = org.apache.commons.math3.util.FastMath.getExponent(x);
                final int expY = org.apache.commons.math3.util.FastMath.getExponent(y);
                if (expX > (expY + 27)) {
                    return org.apache.commons.math3.util.FastMath.abs(x);
                }else
                    if (expY > (expX + 27)) {
                        return org.apache.commons.math3.util.FastMath.abs(y);
                    }else {
                        final int middleExp = (expX + expY) / 2;
                        final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, (-middleExp));
                        final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, (-middleExp));
                        final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(((scaledX * scaledX) + (scaledY * scaledY)));
                        return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp);
                    }

            }

    }

    public static double IEEEremainder(double dividend, double divisor) {
        return java.lang.StrictMath.IEEEremainder(dividend, divisor);
    }

    public static double copySign(double magnitude, double sign) {
        long m = java.lang.Double.doubleToLongBits(magnitude);
        long s = java.lang.Double.doubleToLongBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static float copySign(float magnitude, float sign) {
        int m = java.lang.Float.floatToIntBits(magnitude);
        int s = java.lang.Float.floatToIntBits(sign);
        if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
            return magnitude;
        }
        return -magnitude;
    }

    public static int getExponent(final double d) {
        return ((int) (((java.lang.Double.doubleToLongBits(d)) >>> 52) & 2047)) - 1023;
    }

    public static int getExponent(final float f) {
        return (((java.lang.Float.floatToIntBits(f)) >>> 23) & 255) - 127;
    }

    public static void main(java.lang.String[] a) {
        java.io.PrintStream out = java.lang.System.out;
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "LN_MANT", org.apache.commons.math3.util.FastMath.LN_MANT_LEN, org.apache.commons.math3.util.FastMath.lnMant.LN_MANT);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_B);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A);
        org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B);
    }

    private static class ExpIntTable {
        private static final double[] EXP_INT_TABLE_A;

        private static final double[] EXP_INT_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
                final double[] tmp = new double[2];
                final double[] recip = new double[2];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX); i++) {
                    org.apache.commons.math3.util.FastMathCalc.expint(i, tmp);
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[(i + (org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX))] = tmp[1];
                    if (i != 0) {
                        org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[0];
                        org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[((org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX) - i)] = recip[1];
                    }
                }
            }else {
                EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA();
                EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB();
            }
        }
    }

    private static class ExpFracTable {
        private static final double[] EXP_FRAC_TABLE_A;

        private static final double[] EXP_FRAC_TABLE_B;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
                final double[] tmp = new double[2];
                final double factor = 1.0 / ((org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN) - 1);
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length); i++) {
                    org.apache.commons.math3.util.FastMathCalc.slowexp((i * factor), tmp);
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
                    org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
                }
            }else {
                EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA();
                EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB();
            }
        }
    }

    private static class lnMant {
        private static final double[][] LN_MANT;

        static {
            if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
                LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];
                for (int i = 0; i < (org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length); i++) {
                    final double d = java.lang.Double.longBitsToDouble(((((long) (i)) << 42) | 4607182418800017408L));
                    org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
                }
            }else {
                LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
            }
        }
    }

    private static class CodyWaite {
        private final int finalK;

        private final double finalRemA;

        private final double finalRemB;

        CodyWaite(double xa, double xb) {
            int k = ((int) (xa * 0.6366197723675814));
            double remA;
            double remB;
            while (true) {
                double a = (-k) * 1.570796251296997;
                remA = xa + a;
                remB = -((remA - xa) - a);
                a = (-k) * 7.549789948768648E-8;
                double b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                a = (-k) * 6.123233995736766E-17;
                b = remA;
                remA = a + b;
                remB += -((remA - b) - a);
                if (remA > 0) {
                    break;
                }
                --k;
            } 
            this.finalK = k;
            this.finalRemA = remA;
            this.finalRemB = remB;
        }

        int getK() {
            return finalK;
        }

        double getRemA() {
            return finalRemA;
        }

        double getRemB() {
            return finalRemB;
        }
    }
}
00:38:32.730 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
00:38:32.731 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:32.896 [pool-793-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (160 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:34.179 [pool-794-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:34.180 [pool-795-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:34.180 [pool-792-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:34.180 [pool-792-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:34.181 [pool-792-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:826.
00:38:34.181 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #275
00:38:34.181 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1328 which is executed by 929 tests
1033054629
00:38:34.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #276
00:38:34.479 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1323 which is executed by 929 tests
1033054629
00:38:34.777 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:34.936 [pool-797-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (153 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:36.225 [pool-798-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:36.259 [pool-799-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:36.259 [pool-796-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:36.259 [pool-796-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:36.259 [pool-796-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1323.
00:38:36.259 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:36.456 [pool-801-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (192 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:37.744 [pool-802-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.NullPointerException
    at org.apache.commons.math3.util.FastMath.log(FastMath.java:748)
    at org.apache.commons.math3.util.FastMath.log(FastMath.java:546)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:132)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
00:38:37.745 [pool-803-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[null]
java.lang.NullPointerException    at org.apache.commons.math3.util.FastMath.log(FastMath.java:748)
    at org.apache.commons.math3.util.FastMath.log(FastMath.java:546)
    at org.apache.commons.math3.distribution.FDistribution.density(FDistribution.java:132)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:350)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

00:38:37.745 [pool-800-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:37.746 [pool-800-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): null]
00:38:37.746 [pool-800-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1323.
00:38:37.746 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #277
00:38:37.746 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1321 which is executed by 929 tests
1033054629
00:38:38.043 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:38.206 [pool-805-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (157 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:39.491 [pool-806-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:39.493 [pool-807-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:39.493 [pool-804-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:39.493 [pool-804-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:39.493 [pool-804-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1321.
00:38:39.493 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #278
00:38:39.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1320 which is executed by 929 tests
1033054629
00:38:39.791 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:39.956 [pool-809-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (159 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:41.246 [pool-810-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:41.249 [pool-811-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:41.249 [pool-808-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:41.249 [pool-808-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:41.249 [pool-808-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1320.
00:38:41.249 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #279
00:38:41.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1319 which is executed by 929 tests
1033054629
00:38:41.548 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:41.699 [pool-813-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (146 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:42.986 [pool-814-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:42.988 [pool-815-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:42.989 [pool-812-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:42.989 [pool-812-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:42.989 [pool-812-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1319.
00:38:42.989 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #280
00:38:42.989 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1318 which is executed by 929 tests
1033054629
00:38:43.287 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:43.465 [pool-817-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (173 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:44.749 [pool-818-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:44.751 [pool-819-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:44.751 [pool-816-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:44.751 [pool-816-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:44.752 [pool-816-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1318.
00:38:44.752 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #281
00:38:44.752 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1316 which is executed by 929 tests
1033054629
00:38:45.054 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:45.202 [pool-821-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (143 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:46.490 [pool-822-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:46.492 [pool-823-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:46.496 [pool-820-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:46.496 [pool-820-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:46.496 [pool-820-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1316.
00:38:46.496 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #282
00:38:46.496 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1315 which is executed by 929 tests
1033054629
00:38:46.794 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:46.953 [pool-825-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (154 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:48.243 [pool-826-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:48.245 [pool-827-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:48.245 [pool-824-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:48.245 [pool-824-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:48.245 [pool-824-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1315.
00:38:48.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #283
00:38:48.245 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1314 which is executed by 929 tests
1033054629
00:38:48.543 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:48.723 [pool-829-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (174 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:50.010 [pool-830-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:50.012 [pool-831-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:50.012 [pool-828-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:50.013 [pool-828-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:50.013 [pool-828-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1314.
00:38:50.013 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #284
00:38:50.013 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1313 which is executed by 929 tests
1033054629
00:38:50.312 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:50.474 [pool-833-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (156 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:51.634 [pool-834-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:51.636 [pool-835-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:51.643 [pool-832-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:51.643 [pool-832-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:51.643 [pool-832-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1313.
00:38:51.643 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #285
00:38:51.644 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1311 which is executed by 929 tests
1033054629
00:38:51.944 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:52.087 [pool-837-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (138 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:53.373 [pool-838-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:53.375 [pool-839-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:53.375 [pool-836-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:53.375 [pool-836-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:53.375 [pool-836-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1311.
00:38:53.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #286
00:38:53.375 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1310 which is executed by 929 tests
1033054629
00:38:53.674 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:53.823 [pool-841-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (143 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:55.111 [pool-842-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:55.113 [pool-843-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:55.113 [pool-840-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:55.113 [pool-840-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:55.113 [pool-840-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1310.
00:38:55.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #287
00:38:55.113 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1309 which is executed by 929 tests
1033054629
00:38:55.412 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:55.568 [pool-845-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (150 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:56.856 [pool-846-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:56.858 [pool-847-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:56.862 [pool-844-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:56.862 [pool-844-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:56.862 [pool-844-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1309.
00:38:56.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #288
00:38:56.862 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1308 which is executed by 929 tests
1033054629
00:38:57.159 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:57.321 [pool-849-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (156 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:58.510 [pool-850-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:58.512 [pool-851-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:38:58.512 [pool-848-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:58.512 [pool-848-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:38:58.513 [pool-848-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1308.
00:38:58.513 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #289
00:38:58.513 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1306 which is executed by 929 tests
1033054629
00:38:58.810 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:38:58.974 [pool-853-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (158 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:00.259 [pool-854-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:00.261 [pool-855-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:00.262 [pool-852-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:00.262 [pool-852-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:00.262 [pool-852-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1306.
00:39:00.262 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #290
00:39:00.262 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1305 which is executed by 929 tests
1033054629
00:39:00.560 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:00.728 [pool-857-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (162 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:02.020 [pool-858-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:02.022 [pool-859-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:02.027 [pool-856-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:02.027 [pool-856-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:02.027 [pool-856-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1305.
00:39:02.027 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #291
00:39:02.027 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1304 which is executed by 929 tests
1033054629
00:39:02.326 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:02.477 [pool-861-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (145 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:03.764 [pool-862-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:03.766 [pool-863-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:03.767 [pool-860-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:03.767 [pool-860-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:03.767 [pool-860-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1304.
00:39:03.767 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #292
00:39:03.767 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1303 which is executed by 929 tests
1033054629
00:39:04.065 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:04.214 [pool-865-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (144 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:05.443 [pool-866-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:05.445 [pool-867-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:05.445 [pool-864-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:05.445 [pool-864-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:05.445 [pool-864-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1303.
00:39:05.445 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #293
00:39:05.446 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1301 which is executed by 929 tests
1033054629
00:39:05.745 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:05.903 [pool-869-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (149 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:07.190 [pool-870-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:07.192 [pool-871-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:07.192 [pool-868-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:07.192 [pool-868-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:07.192 [pool-868-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1301.
00:39:07.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #294
00:39:07.193 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1300 which is executed by 929 tests
1033054629
00:39:07.490 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:07.640 [pool-873-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (144 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:08.929 [pool-874-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:08.931 [pool-875-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:08.931 [pool-872-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:08.931 [pool-872-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:08.932 [pool-872-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1300.
00:39:08.932 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #295
00:39:08.932 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1299 which is executed by 929 tests
1033054629
00:39:09.231 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #296
00:39:09.232 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1298 which is executed by 929 tests
1033054629
00:39:09.530 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #297
00:39:09.530 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1297 which is executed by 929 tests
1033054629
00:39:09.828 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #298
00:39:09.828 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1296 which is executed by 929 tests
1033054629
00:39:10.128 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #299
00:39:10.129 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1220 which is executed by 929 tests
1033054629
00:39:10.428 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:10.577 [pool-877-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (144 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:11.865 [pool-878-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:11.867 [pool-879-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:11.867 [pool-876-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:11.867 [pool-876-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:11.867 [pool-876-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1220.
00:39:11.867 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:12.103 [pool-881-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (231 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:13.389 [pool-882-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:13.391 [pool-883-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:13.392 [pool-880-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:13.392 [pool-880-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:13.392 [pool-880-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1220.
00:39:13.392 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #300
00:39:13.392 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1218 which is executed by 929 tests
1033054629
00:39:13.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #301
00:39:13.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1217 which is executed by 929 tests
1033054629
00:39:13.986 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #302
00:39:13.986 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1215 which is executed by 929 tests
1033054629
00:39:14.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #303
00:39:14.283 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1204 which is executed by 929 tests
1033054629
00:39:14.603 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #304
00:39:14.604 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath$lnMant:3752 which is executed by 929 tests
1033054629
00:39:14.909 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #305
00:39:14.909 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1154 which is executed by 943 tests
1033054629
00:39:15.208 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:15.361 [pool-885-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (148 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:16.646 [pool-886-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:16.648 [pool-887-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:16.648 [pool-884-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:16.648 [pool-884-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:16.649 [pool-884-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1154.
00:39:16.649 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:16.836 [pool-889-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (181 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:18.121 [pool-890-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:18.123 [pool-891-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:18.123 [pool-888-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:18.123 [pool-888-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:18.123 [pool-888-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1154.
00:39:18.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #306
00:39:18.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1134 which is executed by 943 tests
1033054629
00:39:18.421 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:18.601 [pool-893-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (174 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:19.853 [pool-894-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:19.855 [pool-895-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:39:19.856 [pool-892-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:19.856 [pool-892-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:39:19.856 [pool-892-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1134.
00:39:19.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:20.012 [pool-897-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (151 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:39:21.298 [pool-898-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:42:41.298 [pool-896-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
00:42:41.299 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
00:42:41.299 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #307
00:42:41.299 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1132 which is executed by 943 tests
1033054629
00:42:41.598 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #308
00:42:41.599 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1123 which is executed by 945 tests
1033054629
00:42:41.895 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:42.048 [pool-901-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (147 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:43.337 [pool-902-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:43.339 [pool-903-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:42:43.340 [pool-900-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:43.340 [pool-900-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:43.340 [pool-900-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1123.
00:42:43.340 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:43.525 [pool-905-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (180 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:44.815 [pool-906-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (23 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:44.818 [pool-907-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:42:44.818 [pool-904-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:44.818 [pool-904-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:44.818 [pool-904-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1123.
00:42:44.818 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #309
00:42:44.818 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1112 which is executed by 945 tests
1033054629
00:42:45.119 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:45.280 [pool-909-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (155 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:46.577 [pool-910-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (20 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:46.580 [pool-911-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:42:46.581 [pool-908-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:46.581 [pool-908-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:46.581 [pool-908-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1112.
00:42:46.581 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:46.740 [pool-913-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (153 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:48.062 [pool-914-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:48.064 [pool-915-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:42:48.064 [pool-912-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:48.064 [pool-912-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:48.064 [pool-912-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1112.
00:42:48.064 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #310
00:42:48.065 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1109 which is executed by 945 tests
1033054629
00:42:48.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #311
00:42:48.360 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math3.util.FastMath:1106 which is executed by 946 tests
1033054629
00:42:48.657 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:48.827 [pool-917-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (164 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:50.121 [pool-918-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:50.123 [pool-919-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:42:50.123 [pool-916-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:50.123 [pool-916-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:50.123 [pool-916-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1106.
00:42:50.123 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:50.290 [pool-921-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (162 ms)
<> Total tests run: 17
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:51.575 [pool-922-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (21 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

java.lang.AssertionError: expected:<false> but was:<true>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
00:42:51.577 [pool-923-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)
[expected:<false> but was:<true>]
java.lang.AssertionError: expected:<false> but was:<true>    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:743)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive(RealDistributionAbstractTest.java:351)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

00:42:51.577 [pool-920-thread-1] DEBUG tests.output - Failing tests with false: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:51.584 [pool-920-thread-1] DEBUG tests.output - Failing tests with true: 
[testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest): expected:<false> but was:<true>]
00:42:51.584 [pool-920-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math3.util.FastMath:1106.
00:42:51.598 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - ----INFORMATION----
00:42:51.916 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb classes : 601
00:42:51.917 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb methods : 4022
00:42:51.917 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements Analyzed : 234
00:42:51.917 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb Statements with Angelic Value Found : 0
00:42:51.917 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb inputs in SMT : 0
00:42:51.920 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb SMT level: 0
00:42:51.920 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - Nb variables in SMT : 0
00:42:51.921 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - NoPol Execution time : 2636170ms
00:42:51.921 [pool-2-thread-1] INFO  fr.inria.lille.repair.nopol.NoPol - 
NO_ANGELIC_VALUE
Command exited with non-zero status 255
4407.08user 63.72system 43:59.01elapsed 169%CPU (0avgtext+0avgdata 3250904maxresident)k
51184inputs+19440outputs (4major+1494585minor)pagefaults 0swaps


Node: granduc-16.luxembourg.grid5000.fr



Date: Thu Nov 29 00:42:52 EST 2018

