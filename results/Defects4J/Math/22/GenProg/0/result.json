{
  "repair_end": "2018-12-02 21:16:17.911589", 
  "repair_begin": "2018-12-02 19:22:50.015155", 
  "patches": [
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1103/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:57:43.472550750 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1103/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:57:43.476550904 -0500\n@@ -131,7 +131,10 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1103/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 14:57:43.476550904 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 133, 
          "faulty": "final double logm=FastMath.log(denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "final double r=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_920/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:48:14.706560269 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_920/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:48:14.710560425 -0500\n@@ -130,8 +130,10 @@\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n-        final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        final double r = random.nextDouble();\n+\t\tfinal double logm = FastMath.log(denominatorDegreesOfFreedom);\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +257,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1279/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:06:42.333213753 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1279/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:06:42.337213906 -0500\n@@ -128,10 +128,14 @@\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n+        int j = 1;\n+\t\tfinal double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1279/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:06:42.341214059 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "if (lower >= upper) {\n  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1178/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:01:38.661584722 -0500\n@@ -181,7 +181,12 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        if (lower >= upper) {\n+\t\t\tthrow new NumberIsTooLargeException(\n+\t\t\t\t\tLocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower,\n+\t\t\t\t\tupper, false);\n+\t\t}\n+\t\treturn true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1178/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:01:38.665584877 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "final double mu=getNumericalMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 112, 
          "faulty": "return 1 / (upper - lower);", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/special/Beta.java", 
          "line": 170, 
          "faulty": "return logBeta(a,b,DEFAULT_EPSILON,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "double an=1.0 / a;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1460/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:15:29.653339693 -0500\n@@ -109,7 +109,8 @@\n         if (x < lower || x > upper) {\n             return 0.0;\n         }\n-        return 1 / (upper - lower);\n+        final double n = random.nextGaussian();\n+\t\treturn 1 / (upper - lower);\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1460/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:15:29.657339847 -0500\n@@ -127,11 +127,20 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mu = getNumericalMean();\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +264,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 13:22:29.426840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1460/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 15:15:29.661339999 -0500\n@@ -167,7 +167,8 @@\n      * @return log(B(a, b)).\n      */\n     public static double logBeta(double a, double b) {\n-        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+        double an = 1.0 / a;\n+\t\treturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double x=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_957/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:50:10.987076570 -0500\n@@ -171,7 +171,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        double x = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_957/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:50:10.987076570 -0500\n@@ -131,7 +131,10 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +258,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_957/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 14:50:10.991076725 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1355/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:10:23.769673938 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1355/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:10:23.773674091 -0500\n@@ -128,10 +128,15 @@\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n+        int j = 1;\n+\t\tfinal double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tif (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +260,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1355/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:10:23.777674245 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_805/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:42:07.084188136 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_805/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:42:07.084188136 -0500\n@@ -131,7 +131,8 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/special/Beta.java", 
          "line": 170, 
          "faulty": "return logBeta(a,b,DEFAULT_EPSILON,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "double an=1.0 / a;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1312/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:08:18.888904535 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1312/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:08:18.888904535 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1312/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:08:18.892904688 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 13:22:29.426840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1312/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 15:08:18.892904688 -0500\n@@ -167,7 +167,8 @@\n      * @return log(B(a, b)).\n      */\n     public static double logBeta(double a, double b) {\n-        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+        double an = 1.0 / a;\n+\t\treturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 132, 
          "faulty": "final double logn=FastMath.log(numeratorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double qa=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 275, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "double m=denominatorDegreesOfFreedom;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_604/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:31:25.610431675 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_604/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:31:25.614431830 -0500\n@@ -129,7 +129,8 @@\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n-        final double logn = FastMath.log(numeratorDegreesOfFreedom);\n+        double qa = 0;\n+\t\tfinal double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n@@ -272,7 +273,8 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n-        return true;\n+        double m = denominatorDegreesOfFreedom;\n+\t\treturn true;\n     }\n \n     /** {@inheritDoc} */\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1426/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:13:53.529675994 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1426/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:13:53.529675994 -0500\n@@ -127,11 +127,24 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n+        int j = 1;\n+\t\tfinal double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tif (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tdouble lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +268,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1426/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:13:53.533676146 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 275, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "numericalVariance=calculateNumericalVariance();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1384/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:11:50.588987256 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1384/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:11:50.592987408 -0500\n@@ -128,10 +128,14 @@\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n+        int j = 1;\n+\t\tfinal double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -272,7 +276,8 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n-        return true;\n+        numericalVariance = calculateNumericalVariance();\n+\t\treturn true;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1384/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:11:50.592987408 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1395/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:12:17.202002525 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1395/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:12:17.206002676 -0500\n@@ -127,11 +127,20 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tdouble lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +264,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1395/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:12:17.210002829 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "double y=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_387/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:19:51.582749320 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_387/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:19:51.586749487 -0500\n@@ -128,7 +128,8 @@\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n+        double y = 0;\n+\t\tfinal double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 129, 
          "faulty": "final double nhalf=numeratorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "final double dx=getSolverAbsoluteAccuracy();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_382/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:19:38.318192219 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_382/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:19:38.322192388 -0500\n@@ -126,7 +126,8 @@\n      * @since 2.1\n      */\n     public double density(double x) {\n-        final double nhalf = numeratorDegreesOfFreedom / 2;\n+        final double dx = getSolverAbsoluteAccuracy();\n+\t\tfinal double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "final double mu=getNumericalMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 112, 
          "faulty": "return 1 / (upper - lower);", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1471/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:16:02.762601207 -0500\n@@ -109,7 +109,8 @@\n         if (x < lower || x > upper) {\n             return 0.0;\n         }\n-        return 1 / (upper - lower);\n+        final double n = random.nextGaussian();\n+\t\treturn 1 / (upper - lower);\n     }\n \n     /** {@inheritDoc} */\n@@ -171,7 +172,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        int j = 1;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +183,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1471/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:16:02.766601361 -0500\n@@ -127,11 +127,20 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mu = getNumericalMean();\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +264,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double x=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1045/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:54:39.941480013 -0500\n@@ -171,7 +171,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        double x = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1045/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:54:39.945480169 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1338/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:09:30.407636488 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1338/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:09:30.407636488 -0500\n@@ -128,10 +128,14 @@\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n+        int j = 1;\n+\t\tfinal double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +259,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1338/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:09:30.411636641 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 275, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "numericalVariance=calculateNumericalVariance();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 132, 
          "faulty": "final double logn=FastMath.log(numeratorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double qa=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1431/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:14:07.230198298 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1431/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:14:07.230198298 -0500\n@@ -128,10 +128,15 @@\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n-        final double logn = FastMath.log(numeratorDegreesOfFreedom);\n+        int j = 1;\n+\t\tfinal double logx = FastMath.log(x);\n+        double qa = 0;\n+\t\tfinal double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -272,7 +277,8 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n-        return true;\n+        numericalVariance = calculateNumericalVariance();\n+\t\treturn true;\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1431/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:14:07.234198452 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "if (x != x) {\n  return Double.NaN;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 109, 
          "faulty": "if (x < lower || x > upper) {\n  return 0.0;\n}", 
          "type": "InsertBefore", 
          "seed": "final double x2=x * x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1284/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:06:55.701724931 -0500\n@@ -106,7 +106,8 @@\n \n     /** {@inheritDoc} */\n     public double density(double x) {\n-        if (x < lower || x > upper) {\n+        final double x2 = x * x;\n+\t\tif (x < lower || x > upper) {\n             return 0.0;\n         }\n         return 1 / (upper - lower);\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1284/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:06:55.705725084 -0500\n@@ -127,11 +127,17 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +261,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1284/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:06:55.705725084 -0500\n@@ -1104,7 +1104,10 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            if (x != x) {\n+\t\t\t\treturn Double.NaN;\n+\t\t\t}\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double x=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_969/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:50:41.036241718 -0500\n@@ -171,7 +171,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        double x = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_969/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:50:41.040241873 -0500\n@@ -131,7 +131,10 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_969/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 14:50:41.040241873 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/special/Beta.java", 
          "line": 170, 
          "faulty": "return logBeta(a,b,DEFAULT_EPSILON,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "double prod=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_877/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:45:58.857267243 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_877/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:45:58.857267243 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 13:22:29.426840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_877/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 14:45:58.861267401 -0500\n@@ -167,7 +167,8 @@\n      * @return log(B(a, b)).\n      */\n     public static double logBeta(double a, double b) {\n-        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+        double prod = 1.0;\n+\t\treturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 129, 
          "faulty": "final double nhalf=numeratorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "double s=Double.NaN;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1323/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:08:49.262064943 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1323/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:08:49.266065096 -0500\n@@ -126,12 +126,17 @@\n      * @since 2.1\n      */\n     public double density(double x) {\n-        final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        double s = Double.NaN;\n+\t\tfinal double nhalf = numeratorDegreesOfFreedom / 2;\n+        double u2 = random.nextDouble();\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +260,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1323/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:08:49.270065249 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 136, 
          "faulty": "return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf,mhalf));", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1306/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:08:02.404274624 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1306/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:08:02.404274624 -0500\n@@ -133,7 +133,8 @@\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n-        return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n+        final double u = random.nextDouble();\n+\t\treturn FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n                             Beta.logBeta(nhalf, mhalf));\n     }\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 112, 
          "faulty": "return 1 / (upper - lower);", 
          "type": "InsertBefore", 
          "seed": "final double mu=getNumericalMean();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_631/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:32:51.873811077 -0500\n@@ -109,7 +109,8 @@\n         if (x < lower || x > upper) {\n             return 0.0;\n         }\n-        return 1 / (upper - lower);\n+        final double mu = getNumericalMean();\n+\t\treturn 1 / (upper - lower);\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_631/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:32:51.877811242 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "final double mu=getNumericalMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 112, 
          "faulty": "return 1 / (upper - lower);", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextGaussian();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1386/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:11:53.965116061 -0500\n@@ -109,7 +109,8 @@\n         if (x < lower || x > upper) {\n             return 0.0;\n         }\n-        return 1 / (upper - lower);\n+        final double n = random.nextGaussian();\n+\t\treturn 1 / (upper - lower);\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1386/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:11:53.969116215 -0500\n@@ -127,11 +127,18 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mu = getNumericalMean();\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +262,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double x=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1059/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:55:20.451042478 -0500\n@@ -171,7 +171,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        double x = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1059/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:55:20.455042632 -0500\n@@ -127,11 +127,20 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tdouble lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +264,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 132, 
          "faulty": "final double logn=FastMath.log(numeratorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double qa=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_589/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:30:42.460765105 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_589/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:30:42.460765105 -0500\n@@ -129,7 +129,8 @@\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n-        final double logn = FastMath.log(numeratorDegreesOfFreedom);\n+        double qa = 0;\n+\t\tfinal double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1121/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:58:39.746714868 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1121/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:58:39.746714868 -0500\n@@ -131,7 +131,11 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tif (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +259,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1121/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 14:58:39.750715022 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_567/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:29:33.194079969 -0500\n@@ -181,7 +181,8 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        double qi = 0;\n+\t\treturn true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_567/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:29:33.194079969 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "double n=numeratorDegreesOfFreedom;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1314/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:08:22.245032769 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1314/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:08:22.249032922 -0500\n@@ -128,7 +128,8 @@\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n+        double n = numeratorDegreesOfFreedom;\n+\t\tfinal double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1314/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:08:22.253033075 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 275, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "numericalVariance=calculateNumericalVariance();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1269/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:06:12.296064991 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1269/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:06:12.300065144 -0500\n@@ -127,11 +127,17 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +261,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n@@ -272,7 +278,8 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n-        return true;\n+        numericalVariance = calculateNumericalVariance();\n+\t\treturn true;\n     }\n \n     /** {@inheritDoc} */\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "final double mu=getNumericalMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 112, 
          "faulty": "return 1 / (upper - lower);", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextGaussian();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "int j=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1421/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:13:39.945158072 -0500\n@@ -109,7 +109,8 @@\n         if (x < lower || x > upper) {\n             return 0.0;\n         }\n-        return 1 / (upper - lower);\n+        final double n = random.nextGaussian();\n+\t\treturn 1 / (upper - lower);\n     }\n \n     /** {@inheritDoc} */\n@@ -171,7 +172,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        int j = 1;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +183,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1421/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:13:39.949158223 -0500\n@@ -127,7 +127,13 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mu = getNumericalMean();\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n@@ -255,7 +261,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 275, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "double y=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_519/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:27:00.508109978 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_519/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:27:00.512110135 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n@@ -272,7 +272,8 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n-        return true;\n+        double y = 0;\n+\t\treturn true;\n     }\n \n     /** {@inheritDoc} */\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/special/Beta.java", 
          "line": 170, 
          "faulty": "return logBeta(a,b,DEFAULT_EPSILON,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "double prod=1.0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "final double mu=getNumericalMean();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1295/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:07:29.223006450 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1295/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:07:29.223006450 -0500\n@@ -131,7 +131,11 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double mu = getNumericalMean();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +259,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1295/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:07:29.227006603 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 13:22:29.426840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1295/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 15:07:29.231006756 -0500\n@@ -167,7 +167,8 @@\n      * @return log(B(a, b)).\n      */\n     public static double logBeta(double a, double b) {\n-        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+        double prod = 1.0;\n+\t\treturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/special/Beta.java", 
          "line": 170, 
          "faulty": "return logBeta(a,b,DEFAULT_EPSILON,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "double prod=1.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1223/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:03:49.030581503 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1223/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:03:49.030581503 -0500\n@@ -131,7 +131,10 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +258,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1223/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:03:49.034581656 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 13:22:29.426840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1223/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 15:03:49.034581656 -0500\n@@ -167,7 +167,8 @@\n      * @return log(B(a, b)).\n      */\n     public static double logBeta(double a, double b) {\n-        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+        double prod = 1.0;\n+\t\treturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "final double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_602/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:31:22.310304370 -0500\n@@ -181,7 +181,8 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        final double u2 = random.nextDouble();\n+\t\treturn true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_602/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:31:22.314304523 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 112, 
          "faulty": "return 1 / (upper - lower);", 
          "type": "InsertBefore", 
          "seed": "final double mu=getNumericalMean();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 109, 
          "faulty": "if (x < lower || x > upper) {\n  return 0.0;\n}", 
          "type": "InsertBefore", 
          "seed": "int i=1;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_675/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:35:13.815636925 -0500\n@@ -106,10 +106,12 @@\n \n     /** {@inheritDoc} */\n     public double density(double x) {\n-        if (x < lower || x > upper) {\n+        int i = 1;\n+\t\tif (x < lower || x > upper) {\n             return 0.0;\n         }\n-        return 1 / (upper - lower);\n+        final double mu = getNumericalMean();\n+\t\treturn 1 / (upper - lower);\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +183,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_675/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:35:13.819637088 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double x=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 136, 
          "faulty": "return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf,mhalf));", 
          "type": "InsertBefore", 
          "seed": "final double n=random.nextGaussian();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_959/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:50:14.351207052 -0500\n@@ -171,7 +171,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        double x = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_959/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:50:14.355207206 -0500\n@@ -131,9 +131,14 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tif (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n-        return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n+        final double n = random.nextGaussian();\n+\t\treturn FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n                             Beta.logBeta(nhalf, mhalf));\n     }\n@@ -255,7 +260,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 112, 
          "faulty": "return 1 / (upper - lower);", 
          "type": "InsertBefore", 
          "seed": "final double x2=x * x;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 136, 
          "faulty": "return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf,mhalf));", 
          "type": "InsertBefore", 
          "seed": "final double u=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1198/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:02:35.375759329 -0500\n@@ -109,7 +109,8 @@\n         if (x < lower || x > upper) {\n             return 0.0;\n         }\n-        return 1 / (upper - lower);\n+        final double x2 = x * x;\n+\t\treturn 1 / (upper - lower);\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1198/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:02:35.379759482 -0500\n@@ -133,7 +133,8 @@\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n-        return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n+        final double u = random.nextDouble();\n+\t\treturn FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n                             Beta.logBeta(nhalf, mhalf));\n     }\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "Delete", 
          "seed": "if (x == 0.0) {\n  return x;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1211/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:03:12.185169997 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1211/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:03:12.189170152 -0500\n@@ -127,11 +127,17 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +261,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1211/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:03:12.189170152 -0500\n@@ -1104,7 +1104,7 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            \n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double x=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_698/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:36:26.586609141 -0500\n@@ -171,7 +171,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        double x = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_698/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:36:26.590609303 -0500\n@@ -131,7 +131,10 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +258,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 133, 
          "faulty": "final double logm=FastMath.log(denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "final double mu=getNumericalMean();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_737/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:38:25.679413174 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_737/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:38:25.683413335 -0500\n@@ -130,7 +130,8 @@\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n-        final double logm = FastMath.log(denominatorDegreesOfFreedom);\n+        final double mu = getNumericalMean();\n+\t\tfinal double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1135/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:59:22.648363604 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1135/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:59:22.652363757 -0500\n@@ -131,7 +131,10 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +258,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "final double mu=getNumericalMean();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1334/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:09:20.427255333 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1334/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:09:20.431255486 -0500\n@@ -127,11 +127,18 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mu = getNumericalMean();\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +262,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/special/Beta.java", 
          "line": 170, 
          "faulty": "return logBeta(a,b,DEFAULT_EPSILON,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "double an=1.0 / a;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1372/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:11:14.003591266 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1372/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:11:14.003591266 -0500\n@@ -127,11 +127,17 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +261,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 13:22:29.426840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1372/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 15:11:14.007591418 -0500\n@@ -167,7 +167,8 @@\n      * @return log(B(a, b)).\n      */\n     public static double logBeta(double a, double b) {\n-        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+        double an = 1.0 / a;\n+\t\treturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 133, 
          "faulty": "final double logm=FastMath.log(denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double sum=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1255/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:05:29.286419570 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1255/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:05:29.290419723 -0500\n@@ -127,11 +127,18 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n-        final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double sum = 0;\n+\t\tfinal double logm = FastMath.log(denominatorDegreesOfFreedom);\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +262,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "double logX=FastMath.log(x);"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_984/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:51:27.086025824 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_984/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:51:27.090025979 -0500\n@@ -128,7 +128,8 @@\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n+        double logX = FastMath.log(x);\n+\t\tfinal double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 275, 
          "faulty": "return true;", 
          "type": "InsertBefore", 
          "seed": "final double nhalf=numeratorDegreesOfFreedom / 2;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_525/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:27:17.132763891 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_525/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:27:17.132763891 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n@@ -272,7 +272,8 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportLowerBoundInclusive() {\n-        return true;\n+        final double nhalf = numeratorDegreesOfFreedom / 2;\n+\t\treturn true;\n     }\n \n     /** {@inheritDoc} */\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/special/Beta.java", 
          "line": 170, 
          "faulty": "return logBeta(a,b,DEFAULT_EPSILON,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "double sum=0.0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1325/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:08:52.622193300 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1325/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:08:52.622193300 -0500\n@@ -131,7 +131,10 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1325/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:08:52.626193453 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 13:22:29.426840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1325/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 15:08:52.626193453 -0500\n@@ -167,7 +167,8 @@\n      * @return log(B(a, b)).\n      */\n     public static double logBeta(double a, double b) {\n-        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+        double sum = 0.0;\n+\t\treturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 132, 
          "faulty": "final double logn=FastMath.log(numeratorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "int a=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_716/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:37:22.732882535 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_716/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:37:22.736882696 -0500\n@@ -129,7 +129,8 @@\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n-        final double logn = FastMath.log(numeratorDegreesOfFreedom);\n+        int a = 0;\n+\t\tfinal double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "double u2=random.nextDouble();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1202/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:02:45.328140795 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1202/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:02:45.332140948 -0500\n@@ -127,11 +127,15 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        double u2 = random.nextDouble();\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +259,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1202/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:02:45.332140948 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 133, 
          "faulty": "final double logm=FastMath.log(denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "final double numeratorDF=getNumeratorDegreesOfFreedom();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_412/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:21:10.734042517 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_412/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:21:10.738042683 -0500\n@@ -130,7 +130,8 @@\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n-        final double logm = FastMath.log(denominatorDegreesOfFreedom);\n+        final double numeratorDF = getNumeratorDegreesOfFreedom();\n+\t\tfinal double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1057/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:55:16.446888084 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1057/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:55:16.446888084 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1057/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 14:55:16.450888237 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "if (x != x) {\n  return Double.NaN;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1234/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:04:22.223852645 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1234/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:04:22.227852798 -0500\n@@ -127,11 +127,17 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +261,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1234/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 15:04:22.227852798 -0500\n@@ -1104,7 +1104,10 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            if (x != x) {\n+\t\t\t\treturn Double.NaN;\n+\t\t\t}\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double qi=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_892/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:46:45.143072811 -0500\n@@ -171,7 +171,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        double qi = 0;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_892/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:46:45.147072967 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/special/Beta.java", 
          "line": 170, 
          "faulty": "return logBeta(a,b,DEFAULT_EPSILON,Integer.MAX_VALUE);", 
          "type": "InsertBefore", 
          "seed": "double an=1.0 / a;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1434/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:14:13.866451279 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1434/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:14:13.870451430 -0500\n@@ -131,7 +131,10 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +258,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 13:22:29.426840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1434/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/special/Beta.java\t2018-12-02 15:14:13.870451430 -0500\n@@ -167,7 +167,8 @@\n      * @return log(B(a, b)).\n      */\n     public static double logBeta(double a, double b) {\n-        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n+        double an = 1.0 / a;\n+\t\treturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1366/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:10:57.602965358 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1366/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:10:57.606965512 -0500\n@@ -127,11 +127,20 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tdouble lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +264,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_961/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:50:17.663335507 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_961/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:50:17.667335662 -0500\n@@ -127,7 +127,12 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n@@ -255,7 +260,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_249/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:12:22.576157635 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_249/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:12:22.588158136 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_934/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:48:57.708231887 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_934/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:48:57.708231887 -0500\n@@ -127,11 +127,17 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +261,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 130, 
          "faulty": "final double mhalf=denominatorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "if (denominatorDegreesOfFreedom <= 0) {\n  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double rnd=1.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1389/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:12:00.701373057 -0500\n@@ -171,7 +171,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        double rnd = 1.0d;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1389/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:12:00.705373208 -0500\n@@ -127,11 +127,17 @@\n      */\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n-        final double mhalf = denominatorDegreesOfFreedom / 2;\n+        if (denominatorDegreesOfFreedom <= 0) {\n+\t\t\tthrow new NotStrictlyPositiveException(\n+\t\t\t\t\tLocalizedFormats.DEGREES_OF_FREEDOM,\n+\t\t\t\t\tdenominatorDegreesOfFreedom);\n+\t\t}\n+\t\tfinal double mhalf = denominatorDegreesOfFreedom / 2;\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +261,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 134, 
          "faulty": "final double lognxm=FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom);", 
          "type": "InsertBefore", 
          "seed": "if (x <= 0) {\n  return 0;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "final int splitFactor=0x8000001;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1043/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:54:36.653353142 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1043/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:54:36.653353142 -0500\n@@ -131,7 +131,10 @@\n         final double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n-        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n+        if (x <= 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tfinal double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n         return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n@@ -255,7 +258,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1043/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 14:54:36.657353298 -0500\n@@ -1104,7 +1104,8 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final int splitFactor = 0x8000001;\n+\t\t\treturn Double.NEGATIVE_INFINITY;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 136, 
          "faulty": "return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf,mhalf));", 
          "type": "InsertBefore", 
          "seed": "if (x < 0) {\n  return 0;\n}"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_835/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:43:42.779944879 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_835/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:43:42.783945035 -0500\n@@ -133,7 +133,10 @@\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n                                            denominatorDegreesOfFreedom);\n-        return FastMath.exp(nhalf * logn + nhalf * logx - logx +\n+        if (x < 0) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\treturn FastMath.exp(nhalf * logn + nhalf * logx - logx +\n                             mhalf * logm - nhalf * lognxm - mhalf * lognxm -\n                             Beta.logBeta(nhalf, mhalf));\n     }\n@@ -255,7 +258,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 112, 
          "faulty": "return 1 / (upper - lower);", 
          "type": "InsertBefore", 
          "seed": "final double x2=x * x;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1189/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:02:08.646734623 -0500\n@@ -109,7 +109,8 @@\n         if (x < lower || x > upper) {\n             return 0.0;\n         }\n-        return 1 / (upper - lower);\n+        final double x2 = x * x;\n+\t\treturn 1 / (upper - lower);\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1189/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:02:08.650734776 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1436/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:14:17.158576773 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1436/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:14:17.158576773 -0500\n@@ -128,7 +128,8 @@\n     public double density(double x) {\n         final double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n@@ -255,7 +256,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "double t=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1022/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:53:30.170786363 -0500\n@@ -181,7 +181,8 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        double t = 0;\n+\t\treturn true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1022/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:53:30.174786518 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1186/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:02:02.070482463 -0500\n@@ -181,7 +181,8 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        double lowerBound = getSupportLowerBound();\n+\t\treturn true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1186/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:02:02.070482463 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 131, 
          "faulty": "final double logx=FastMath.log(x);", 
          "type": "InsertBefore", 
          "seed": "double lowerBound=getSupportLowerBound();"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 129, 
          "faulty": "final double nhalf=numeratorDegreesOfFreedom / 2;", 
          "type": "InsertBefore", 
          "seed": "int i=0;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1445/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:14:43.375576080 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1445/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:14:43.379576231 -0500\n@@ -126,9 +126,11 @@\n      * @since 2.1\n      */\n     public double density(double x) {\n-        final double nhalf = numeratorDegreesOfFreedom / 2;\n+        int i = 0;\n+\t\tfinal double nhalf = numeratorDegreesOfFreedom / 2;\n         final double mhalf = denominatorDegreesOfFreedom / 2;\n-        final double logx = FastMath.log(x);\n+        double lowerBound = getSupportLowerBound();\n+\t\tfinal double logx = FastMath.log(x);\n         final double logn = FastMath.log(numeratorDegreesOfFreedom);\n         final double logm = FastMath.log(denominatorDegreesOfFreedom);\n         final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +\n@@ -255,7 +257,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 174, 
          "faulty": "return upper;", 
          "type": "InsertBefore", 
          "seed": "double r=1.0d;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1161/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 15:00:45.679551940 -0500\n@@ -171,7 +171,8 @@\n      * @return upper bound of the support\n      */\n     public double getSupportUpperBound() {\n-        return upper;\n+        double r = 1.0d;\n+\t\treturn upper;\n     }\n \n     /** {@inheritDoc} */\n@@ -181,7 +182,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_1161/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 15:00:45.683552094 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n"
    }, 
    {
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java", 
          "line": 184, 
          "faulty": "return false;", 
          "type": "Replace", 
          "seed": "return true;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java", 
          "line": 258, 
          "faulty": "return 0;", 
          "type": "Replace", 
          "seed": "return solverAbsoluteAccuracy;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math3/util/FastMath.java", 
          "line": 1107, 
          "faulty": "return Double.NEGATIVE_INFINITY;", 
          "type": "Replace", 
          "seed": "final double small=1e-50;"
        }
      ], 
      "patch": "--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_732/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\t2018-12-02 14:38:12.470883631 -0500\n@@ -181,7 +181,7 @@\n \n     /** {@inheritDoc} */\n     public boolean isSupportUpperBoundInclusive() {\n-        return false;\n+        return true;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 13:22:33.242840857 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_732/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java\t2018-12-02 14:38:12.470883631 -0500\n@@ -255,7 +255,7 @@\n      * @return lower bound of the support (always 0)\n      */\n     public double getSupportLowerBound() {\n-        return 0;\n+        return solverAbsoluteAccuracy;\n     }\n \n     /**\n\n\n--- /tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 13:22:29.438840991 -0500\n+++ /tmp/GenProg_Defects4J_Math_22/patches_w015/Patch_732/patched/tmp/GenProg_Defects4J_Math_22/src/main/java/org/apache/commons/math3/util/FastMath.java\t2018-12-02 14:38:12.474883792 -0500\n@@ -1104,7 +1104,7 @@\n      */\n     private static double log(final double x, final double[] hiPrec) {\n         if (x==0) { // Handle special case of +0/-0\n-            return Double.NEGATIVE_INFINITY;\n+            final double small = 1e-50;\n         }\n         long bits = Double.doubleToLongBits(x);\n \n\n\n"
    }
  ]
}