cd /tmp/Nopol_Defects4J_Math_103;
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
time java -Xmx4048m -cp /home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar:/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin//../lib/tools.jar fr.inria.lille.repair.Main \
	--mode repair \
	--type pre_then_cond \
	--oracle angelic \
	--synthesis smt \
	--flocal gzoltar \
	--json \
	--solver z3 \
	--solver-path /home/tdurieux/defects4j4repair/script/../libs/z3/build/z3 \
	--complianceLevel 7 \
	--source src/java/ \
	--classpath "target/classes/:target/test-classes/:/tmp/Nopol_Defects4J_Math_103/target/classes/:/tmp/Nopol_Defects4J_Math_103/target/test-classes/:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar";
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
21:44:04.542 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [src/java]
21:44:04.547 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/tmp/Nopol_Defects4J_Math_103/target/classes/, file:/tmp/Nopol_Defects4J_Math_103/target/test-classes/, file:/tmp/Nopol_Defects4J_Math_103/target/classes/, file:/tmp/Nopol_Defects4J_Math_103/target/test-classes/, file:/home/tdurieux/defects4j4repair/script/../benchmarks/defects4j/framework/projects/Math/lib/commons-discovery-0.5.jar, file:/home/tdurieux/defects4j4repair/script/../repair_tools/nopol.jar]
21:44:04.547 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
21:44:04.547 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.BisectionSolverTest, org.apache.commons.math.analysis.BisectionSolverTest, org.apache.commons.math.analysis.BrentSolverTest, org.apache.commons.math.analysis.BrentSolverTest, org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.LaguerreSolverTest, org.apache.commons.math.analysis.LaguerreSolverTest, org.apache.commons.math.analysis.MullerSolverTest, org.apache.commons.math.analysis.MullerSolverTest, org.apache.commons.math.analysis.NevilleInterpolatorTest, org.apache.commons.math.analysis.NevilleInterpolatorTest, org.apache.commons.math.analysis.NewtonSolverTest, org.apache.commons.math.analysis.NewtonSolverTest, org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.PolynomialFunctionTest, org.apache.commons.math.analysis.PolynomialFunctionTest, org.apache.commons.math.analysis.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.RiddersSolverTest, org.apache.commons.math.analysis.RiddersSolverTest, org.apache.commons.math.analysis.RombergIntegratorTest, org.apache.commons.math.analysis.RombergIntegratorTest, org.apache.commons.math.analysis.SimpsonIntegratorTest, org.apache.commons.math.analysis.SimpsonIntegratorTest, org.apache.commons.math.analysis.SplineInterpolatorTest, org.apache.commons.math.analysis.SplineInterpolatorTest, org.apache.commons.math.analysis.TrapezoidIntegratorTest, org.apache.commons.math.analysis.TrapezoidIntegratorTest, org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.DormandPrince54IntegratorTest, org.apache.commons.math.ode.DormandPrince54IntegratorTest, org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.DormandPrince853IntegratorTest, org.apache.commons.math.ode.DormandPrince853IntegratorTest, org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.EulerIntegratorTest, org.apache.commons.math.ode.EulerIntegratorTest, org.apache.commons.math.ode.EulerStepInterpolatorTest, org.apache.commons.math.ode.EulerStepInterpolatorTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.GillIntegratorTest, org.apache.commons.math.ode.GillIntegratorTest, org.apache.commons.math.ode.GillStepInterpolatorTest, org.apache.commons.math.ode.GillStepInterpolatorTest, org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.HighamHall54IntegratorTest, org.apache.commons.math.ode.HighamHall54IntegratorTest, org.apache.commons.math.ode.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.MidpointIntegratorTest, org.apache.commons.math.ode.MidpointIntegratorTest, org.apache.commons.math.ode.MidpointStepInterpolatorTest, org.apache.commons.math.ode.MidpointStepInterpolatorTest, org.apache.commons.math.ode.StepNormalizerTest, org.apache.commons.math.ode.StepNormalizerTest, org.apache.commons.math.ode.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest]
21:44:04.549 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/tdurieux/defects4j4repair/script/../libs/z3/build/z3', projectSources=[src/java], projectClasspath='[Ljava.net.URL;@66d33a', projectTests=[org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.BisectionSolverTest, org.apache.commons.math.analysis.BisectionSolverTest, org.apache.commons.math.analysis.BrentSolverTest, org.apache.commons.math.analysis.BrentSolverTest, org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.LaguerreSolverTest, org.apache.commons.math.analysis.LaguerreSolverTest, org.apache.commons.math.analysis.MullerSolverTest, org.apache.commons.math.analysis.MullerSolverTest, org.apache.commons.math.analysis.NevilleInterpolatorTest, org.apache.commons.math.analysis.NevilleInterpolatorTest, org.apache.commons.math.analysis.NewtonSolverTest, org.apache.commons.math.analysis.NewtonSolverTest, org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.PolynomialFunctionTest, org.apache.commons.math.analysis.PolynomialFunctionTest, org.apache.commons.math.analysis.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.RiddersSolverTest, org.apache.commons.math.analysis.RiddersSolverTest, org.apache.commons.math.analysis.RombergIntegratorTest, org.apache.commons.math.analysis.RombergIntegratorTest, org.apache.commons.math.analysis.SimpsonIntegratorTest, org.apache.commons.math.analysis.SimpsonIntegratorTest, org.apache.commons.math.analysis.SplineInterpolatorTest, org.apache.commons.math.analysis.SplineInterpolatorTest, org.apache.commons.math.analysis.TrapezoidIntegratorTest, org.apache.commons.math.analysis.TrapezoidIntegratorTest, org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.DormandPrince54IntegratorTest, org.apache.commons.math.ode.DormandPrince54IntegratorTest, org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.DormandPrince853IntegratorTest, org.apache.commons.math.ode.DormandPrince853IntegratorTest, org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.EulerIntegratorTest, org.apache.commons.math.ode.EulerIntegratorTest, org.apache.commons.math.ode.EulerStepInterpolatorTest, org.apache.commons.math.ode.EulerStepInterpolatorTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.GillIntegratorTest, org.apache.commons.math.ode.GillIntegratorTest, org.apache.commons.math.ode.GillStepInterpolatorTest, org.apache.commons.math.ode.GillStepInterpolatorTest, org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.HighamHall54IntegratorTest, org.apache.commons.math.ode.HighamHall54IntegratorTest, org.apache.commons.math.ode.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.MidpointIntegratorTest, org.apache.commons.math.ode.MidpointIntegratorTest, org.apache.commons.math.ode.MidpointStepInterpolatorTest, org.apache.commons.math.ode.MidpointStepInterpolatorTest, org.apache.commons.math.ode.StepNormalizerTest, org.apache.commons.math.ode.StepNormalizerTest, org.apache.commons.math.ode.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.MultiDirectionalTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.optimization.NelderMeadTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsImplTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsImplTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=7, outputFolder=., json=true}
21:44:04.550 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 24
21:44:04.566 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 442 MB
21:44:04.567 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
21:44:04.567 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 483 MB
21:44:04.567 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.8.0_181
21:44:04.568 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/
21:44:04.568 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/bin:/usr/bin:/bin:/usr/games
21:44:17.959 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #1
21:44:17.960 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:157 which is executed by 16 tests
1013737658
21:44:18.274 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #2
21:44:18.274 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:156 which is executed by 16 tests
1013737658
21:44:18.369 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:18.457 [pool-4-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (47 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

21:44:18.458 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:18.459 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #3
21:44:18.459 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:155 which is executed by 16 tests
1013737658
21:44:18.544 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:18.579 [pool-6-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (26 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

21:44:18.580 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:18.580 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #4
21:44:18.580 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:154 which is executed by 16 tests
1013737658
21:44:18.666 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #5
21:44:18.667 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:133 which is executed by 16 tests
1013737658
21:44:18.783 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #6
21:44:18.783 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:132 which is executed by 16 tests
1013737658
21:44:18.891 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #7
21:44:18.891 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:115 which is executed by 16 tests
1013737658
21:44:18.976 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #8
21:44:18.976 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:114 which is executed by 16 tests
1013737658
21:44:19.057 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #9
21:44:19.057 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:229 which is executed by 16 tests
-1129122774
21:44:19.135 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #10
21:44:19.135 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:228 which is executed by 16 tests
-1129122774
21:44:19.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:19.243 [pool-8-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (21 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

21:44:19.244 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:19.244 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #11
21:44:19.244 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:224 which is executed by 16 tests
-1129122774
21:44:19.348 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:19.375 [pool-10-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (19 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

21:44:19.376 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:19.376 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:19.400 [pool-12-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (17 ms)
<> Total tests run: 160
<> Ignored tests: 0
<> Failed tests: 0

21:44:19.401 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:19.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #12
21:44:19.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:383 which is executed by 7 tests
1013737658
21:44:19.492 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:19.516 [pool-14-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (18 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:19.517 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:19.517 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #13
21:44:19.517 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:279 which is executed by 7 tests
1013737658
21:44:19.622 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:19.636 [pool-16-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:19.637 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:19.637 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #14
21:44:19.637 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:278 which is executed by 7 tests
1013737658
21:44:19.718 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #15
21:44:19.718 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:277 which is executed by 7 tests
1013737658
21:44:19.799 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #16
21:44:19.799 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:387 which is executed by 8 tests
1013737658
21:44:19.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #17
21:44:19.882 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:382 which is executed by 8 tests
1013737658
21:44:19.974 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:19.988 [pool-18-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:19.988 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:19.988 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:20.001 [pool-20-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:20.001 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:20.001 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #18
21:44:20.001 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:380 which is executed by 8 tests
1013737658
21:44:20.082 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:20.096 [pool-22-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:20.097 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:20.097 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #19
21:44:20.097 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:379 which is executed by 8 tests
1013737658
21:44:20.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #20
21:44:20.178 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:378 which is executed by 8 tests
1013737658
21:44:20.263 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:20.280 [pool-24-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (11 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:20.281 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:20.281 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #21
21:44:20.281 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:375 which is executed by 8 tests
1013737658
21:44:20.398 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:20.412 [pool-26-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (10 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:20.412 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:20.413 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:20.425 [pool-28-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:20.426 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:20.426 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #22
21:44:20.426 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:373 which is executed by 8 tests
1013737658
21:44:20.507 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #23
21:44:20.507 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:372 which is executed by 8 tests
1013737658
21:44:20.586 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #24
21:44:20.586 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:371 which is executed by 8 tests
1013737658
21:44:20.664 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #25
21:44:20.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:362 which is executed by 8 tests
1013737658
21:44:20.743 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #26
21:44:20.743 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:361 which is executed by 8 tests
1013737658
21:44:20.821 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:20.834 [pool-30-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:20.834 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:20.835 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #27
21:44:20.835 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:360 which is executed by 8 tests
1013737658
21:44:20.913 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:20.926 [pool-32-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:20.926 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:20.927 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #28
21:44:20.927 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:268 which is executed by 8 tests
1013737658
21:44:21.005 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:21.018 [pool-34-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:21.019 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:21.019 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:21.032 [pool-36-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:21.033 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:21.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #29
21:44:21.033 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:267 which is executed by 8 tests
1013737658
21:44:21.121 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #30
21:44:21.121 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:264 which is executed by 8 tests
1013737658
21:44:21.198 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:21.212 [pool-38-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (9 ms)
<> Total tests run: 80
<> Ignored tests: 0
<> Failed tests: 0

21:44:21.212 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:21.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #31
21:44:21.213 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:261 which is executed by 8 tests
1013737658
21:44:21.292 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #32
21:44:21.292 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:245 which is executed by 8 tests
1013737658
21:44:21.370 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #33
21:44:21.370 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:244 which is executed by 8 tests
1013737658
21:44:21.447 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #34
21:44:21.447 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:133 which is executed by 8 tests
-1129122774
21:44:21.521 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #35
21:44:21.521 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:233 which is executed by 9 tests
1013737658
21:44:21.611 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #36
21:44:21.611 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:225 which is executed by 7 tests
1013737658
21:44:21.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #37
21:44:21.689 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:309 which is executed by 2 tests
1013737658
21:44:21.770 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #38
21:44:21.770 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:214 which is executed by 2 tests
-1129122774
21:44:21.846 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #39
21:44:21.846 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:213 which is executed by 2 tests
-1129122774
21:44:21.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #40
21:44:21.926 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:212 which is executed by 2 tests
-1129122774
21:44:22.008 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #41
21:44:22.008 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:211 which is executed by 2 tests
-1129122774
21:44:22.098 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #42
21:44:22.098 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:301 which is executed by 3 tests
1013737658
21:44:22.197 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:22.206 [pool-40-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:22.206 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:22.207 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:22.215 [pool-42-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:22.215 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:22.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #43
21:44:22.215 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:300 which is executed by 3 tests
1013737658
21:44:22.299 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #44
21:44:22.299 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:297 which is executed by 3 tests
1013737658
21:44:22.377 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:22.386 [pool-44-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:22.386 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:22.386 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #45
21:44:22.386 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:286 which is executed by 3 tests
1013737658
21:44:22.463 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:22.472 [pool-46-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:22.472 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:22.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #46
21:44:22.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:293 which is executed by 3 tests
1013737658
21:44:22.549 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #47
21:44:22.549 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:292 which is executed by 3 tests
1013737658
21:44:22.626 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:22.635 [pool-48-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:22.635 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:22.635 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #48
21:44:22.635 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:291 which is executed by 3 tests
1013737658
21:44:22.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:22.720 [pool-50-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:22.720 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:22.720 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #49
21:44:22.721 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:205 which is executed by 3 tests
-1129122774
21:44:22.794 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:22.803 [pool-52-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:22.804 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:22.804 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:22.812 [pool-54-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:22.812 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:22.812 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #50
21:44:22.812 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:197 which is executed by 3 tests
-1129122774
21:44:22.886 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:22.895 [pool-56-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:22.895 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:22.895 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:22.903 [pool-58-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:22.903 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:22.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #51
21:44:22.904 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:196 which is executed by 3 tests
-1129122774
21:44:22.977 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #52
21:44:22.977 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:193 which is executed by 3 tests
-1129122774
21:44:23.050 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:23.059 [pool-60-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:23.060 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:23.060 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #53
21:44:23.060 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:182 which is executed by 3 tests
-1129122774
21:44:23.133 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:23.141 [pool-62-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:23.141 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:23.141 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #54
21:44:23.141 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:175 which is executed by 3 tests
-1129122774
21:44:23.225 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:23.235 [pool-64-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:23.235 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:23.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #55
21:44:23.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:174 which is executed by 3 tests
-1129122774
21:44:23.309 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #56
21:44:23.309 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:173 which is executed by 3 tests
-1129122774
21:44:23.382 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #57
21:44:23.382 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:166 which is executed by 3 tests
-1129122774
21:44:23.455 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:23.464 [pool-66-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:23.464 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:23.464 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:23.472 [pool-68-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:23.472 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:23.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #58
21:44:23.472 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.FractionFormat:283 which is executed by 1 tests
1013737658
21:44:23.549 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #59
21:44:23.549 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:158 which is executed by 4 tests
-1129122774
21:44:23.622 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:23.631 [pool-70-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:23.631 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:23.631 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:23.639 [pool-72-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:23.639 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:23.639 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #60
21:44:23.639 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:157 which is executed by 4 tests
-1129122774
21:44:23.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #61
21:44:23.712 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:154 which is executed by 4 tests
-1129122774
21:44:23.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:23.795 [pool-74-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:23.795 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:23.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #62
21:44:23.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:180 which is executed by 1 tests
68567944
21:44:23.871 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:23.894 [pool-76-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (19 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:24.684 [pool-75-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:86: error: variable ret might not have been initialized
        return ret;
               ^
21:44:24.691 [pool-75-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma implements java.io.Serializable {
    private static final long serialVersionUID = -6587513359895466954L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static double[] lanczos = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (java.lang.Math.log((2.0 * (java.lang.Math.PI))));

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.lanczos.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.lanczos[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.lanczos[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (java.lang.Math.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (java.lang.Math.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if ((a >= 1.0) && (x > a)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while (((java.lang.Math.abs(an)) > epsilon) && (n < maxIterations)) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.math.special.Gamma.lanczos",org.apache.commons.math.special.Gamma.lanczos);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("sum",sum);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("an",an);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);

                    }else {
                        ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                    }
                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if ((x < a) || (a < 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        private static final long serialVersionUID = 5378525034886164398L;

                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }
}
21:44:24.692 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
21:44:24.692 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #63
21:44:24.692 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:145 which is executed by 5 tests
-1129122774
21:44:24.774 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:24.785 [pool-78-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (7 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:24.785 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:24.786 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:24.795 [pool-80-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:24.795 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:24.795 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #64
21:44:24.796 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:144 which is executed by 5 tests
-1129122774
21:44:24.871 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #65
21:44:24.871 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:141 which is executed by 5 tests
-1129122774
21:44:24.945 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:24.954 [pool-82-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:24.954 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:24.954 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #66
21:44:24.954 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:138 which is executed by 5 tests
-1129122774
21:44:25.028 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #67
21:44:25.028 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:134 which is executed by 5 tests
-1129122774
21:44:25.101 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
21:44:25.110 [pool-84-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (6 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:25.110 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:25.110 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
21:44:25.118 [pool-86-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (5 ms)
<> Total tests run: 32
<> Ignored tests: 0
<> Failed tests: 0

21:44:25.118 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
21:44:25.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #68
21:44:25.118 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.fraction.ProperFractionFormat:116 which is executed by 6 tests
-1129122774
21:44:25.201 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #69
21:44:25.202 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:272 which is executed by 3 tests
754024968
21:44:25.286 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #70
21:44:25.287 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:271 which is executed by 3 tests
754024968
21:44:25.373 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #71
21:44:25.373 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:267 which is executed by 3 tests
754024968
21:44:25.465 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:25.486 [pool-88-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (18 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:25.733 [pool-89-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (7 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:25.736 [pool-90-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:25.737 [pool-87-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:25.737 [pool-87-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:25.737 [pool-87-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.MathException:267.
21:44:25.737 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:25.754 [pool-92-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:25.962 [pool-93-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:25.965 [pool-94-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:25.966 [pool-91-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:25.966 [pool-91-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:25.966 [pool-91-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.MathException:267.
21:44:25.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #72
21:44:25.966 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:266 which is executed by 3 tests
754024968
21:44:26.048 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:26.068 [pool-96-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (16 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:26.253 [pool-97-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:26.256 [pool-98-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:26.257 [pool-95-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:26.257 [pool-95-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:26.257 [pool-95-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.MathException:266.
21:44:26.257 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #73
21:44:26.257 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:265 which is executed by 3 tests
754024968
21:44:26.355 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #74
21:44:26.355 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:109 which is executed by 8 tests
1270563308
21:44:26.429 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #75
21:44:26.430 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:161 which is executed by 9 tests
68567944
21:44:26.504 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:26.522 [pool-100-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:26.660 [pool-99-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:83: error: variable ret might not have been initialized
        return ret;
               ^
21:44:26.664 [pool-99-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma implements java.io.Serializable {
    private static final long serialVersionUID = -6587513359895466954L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static double[] lanczos = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (java.lang.Math.log((2.0 * (java.lang.Math.PI))));

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.lanczos.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.lanczos[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.lanczos[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (java.lang.Math.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (java.lang.Math.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(4).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.commons.math.special.Gamma.lanczos",org.apache.commons.math.special.Gamma.lanczos);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(4).collectionEnds();
                }
                if (runtimeAngelicValue)
                    ret = 0.0;

            }else
                if ((a >= 1.0) && (x > a)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while (((java.lang.Math.abs(an)) > epsilon) && (n < maxIterations)) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else {
                        ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                    }
                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if ((x < a) || (a < 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        private static final long serialVersionUID = 5378525034886164398L;

                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }
}
21:44:26.665 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
21:44:26.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #76
21:44:26.665 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:58 which is executed by 12 tests
69946
21:44:26.734 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:26.753 [pool-102-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
21:44:26.850 [pool-103-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:10)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:26.855 [pool-104-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:10)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:26.856 [pool-101-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
21:44:26.856 [pool-101-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:26.856 [pool-101-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Erf:58.
21:44:26.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #77
21:44:26.856 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:60 which is executed by 13 tests
69946
21:44:26.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #78
21:44:26.925 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:57 which is executed by 13 tests
69946
21:44:26.993 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.011 [pool-106-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
21:44:27.116 [pool-107-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:10)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.121 [pool-108-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (4 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:10)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:27.121 [pool-105-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
21:44:27.121 [pool-105-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:27.121 [pool-105-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Erf:57.
21:44:27.121 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.137 [pool-110-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (14 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
21:44:27.233 [pool-111-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (3 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:141)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
21:44:27.235 [pool-112-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (1 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:141)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

21:44:27.235 [pool-109-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
21:44:27.235 [pool-109-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
21:44:27.235 [pool-109-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Erf:57.
21:44:27.235 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #79
21:44:27.236 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Erf:56 which is executed by 13 tests
69946
21:44:27.304 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #80
21:44:27.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:261 which is executed by 19 tests
21:44:27.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - cannot spoon SourceLocation org.apache.commons.math.distribution.ContinuousDistributionAbstractTest:261
21:44:27.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #81
21:44:27.305 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:98 which is executed by 20 tests
1270563308
21:44:27.378 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #82
21:44:27.378 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:97 which is executed by 20 tests
1270563308
21:44:27.449 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.467 [pool-114-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.590 [pool-115-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.593 [pool-116-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:27.594 [pool-113-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:27.594 [pool-113-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:27.594 [pool-113-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:97.
21:44:27.594 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #83
21:44:27.594 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:93 which is executed by 20 tests
1270563308
21:44:27.667 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.684 [pool-118-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.799 [pool-119-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.802 [pool-120-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:27.803 [pool-117-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:27.803 [pool-117-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:27.803 [pool-117-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:93.
21:44:27.803 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.819 [pool-122-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (14 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:27.936 [pool-123-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (5 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

java.lang.IllegalArgumentException: Standard deviation must be positive.
    at org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(NormalDistributionImpl.java:49)
    at org.apache.commons.math.distribution.NormalDistributionImpl.<init>(NormalDistributionImpl.java:12)
    at org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution(NormalDistributionTest.java:41)
    at org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp(ContinuousDistributionAbstractTest.java:117)
    at junit.framework.TestCase.runBare(TestCase.java:139)
    at junit.framework.TestResult$1.protect(TestResult.java:122)
21:44:27.938 [pool-124-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (0 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Standard deviation must be positive.]
java.lang.IllegalArgumentException: Standard deviation must be positive.    at org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation(NormalDistributionImpl.java:49)
    at org.apache.commons.math.distribution.NormalDistributionImpl.<init>(NormalDistributionImpl.java:12)
    at org.apache.commons.math.distribution.NormalDistributionTest.makeDistribution(NormalDistributionTest.java:41)
    at org.apache.commons.math.distribution.ContinuousDistributionAbstractTest.setUp(ContinuousDistributionAbstractTest.java:117)
    at junit.framework.TestCase.runBare(TestCase.java:139)
    at junit.framework.TestResult$1.protect(TestResult.java:122)

21:44:27.939 [pool-121-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:27.939 [pool-121-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Standard deviation must be positive.]
21:44:27.939 [pool-121-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:93.
21:44:27.939 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #84
21:44:27.939 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:77 which is executed by 20 tests
1270563308
21:44:28.011 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #85
21:44:28.011 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:76 which is executed by 20 tests
1270563308
21:44:28.098 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:28.116 [pool-126-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:28.246 [pool-127-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (6 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:28.249 [pool-128-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:55)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:28.250 [pool-125-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:28.250 [pool-125-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:28.250 [pool-125-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.NormalDistributionImpl:76.
21:44:28.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #86
21:44:28.250 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.MathException:235 which is executed by 21 tests
754024968
21:44:28.327 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #87
21:44:28.327 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:182 which is executed by 35 tests
68567944
21:44:28.401 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:28.418 [pool-130-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (14 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:28.534 [pool-129-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:86: error: variable ret might not have been initialized
        return ret;
               ^
21:44:28.538 [pool-129-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma implements java.io.Serializable {
    private static final long serialVersionUID = -6587513359895466954L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static double[] lanczos = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (java.lang.Math.log((2.0 * (java.lang.Math.PI))));

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.lanczos.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.lanczos[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.lanczos[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (java.lang.Math.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (java.lang.Math.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if ((a >= 1.0) && (x > a)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while (((java.lang.Math.abs(an)) > epsilon) && (n < maxIterations)) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.special.Gamma.lanczos",org.apache.commons.math.special.Gamma.lanczos);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("sum",sum);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("an",an);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;

                    }
                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if ((x < a) || (a < 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        private static final long serialVersionUID = 5378525034886164398L;

                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }
}
21:44:28.538 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
21:44:28.539 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #88
21:44:28.539 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:179 which is executed by 35 tests
68567944
21:44:28.614 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:28.631 [pool-132-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (14 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:28.752 [pool-131-thread-1] ERROR x.java.compiler.DynamicClassCompiler - [Compilation errors]
Gamma.java:85: error: variable ret might not have been initialized
        return ret;
               ^
21:44:28.756 [pool-131-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
public class Gamma implements java.io.Serializable {
    private static final long serialVersionUID = -6587513359895466954L;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static double[] lanczos = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * (java.lang.Math.log((2.0 * (java.lang.Math.PI))));

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        }else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = (org.apache.commons.math.special.Gamma.lanczos.length) - 1; i > 0; --i) {
                sum = sum + ((org.apache.commons.math.special.Gamma.lanczos[i]) / (x + i));
            }
            sum = sum + (org.apache.commons.math.special.Gamma.lanczos[0]);
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * (java.lang.Math.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (java.lang.Math.log((sum / x)));
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 0.0;
            }else
                if ((a >= 1.0) && (x > a)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
                }else {
                    double n = 0.0;
                    double an = 1.0 / a;
                    double sum = an;
                    while (((java.lang.Math.abs(an)) > epsilon) && (n < maxIterations)) {
                        n = n + 1.0;
                        an = an * (x / (a + n));
                        sum = sum + an;
                    } 
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(13).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.special.Gamma.lanczos",org.apache.commons.math.special.Gamma.lanczos);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("n >= maxIterations",n >= maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("sum",sum);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("an",an);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(13).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (n >= maxIterations) {
                        throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
                    }else {
                        ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
                    }
                }


        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        }else
            if (x == 0.0) {
                ret = 1.0;
            }else
                if ((x < a) || (a < 1.0)) {
                    ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
                }else {
                    org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                        private static final long serialVersionUID = 5378525034886164398L;

                        protected double getA(int n, double x) {
                            return (((2.0 * n) + 1.0) - a) + x;
                        }

                        protected double getB(int n, double x) {
                            return n * (a - n);
                        }
                    };
                    ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
                    ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
                }


        return ret;
    }
}
21:44:28.756 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
21:44:28.757 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalReplacer
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:28.775 [pool-134-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
21:44:28.906 [pool-135-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (8 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:78)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:28.909 [pool-136-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (2 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:78)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:28.910 [pool-133-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
21:44:28.910 [pool-133-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:28.910 [pool-133-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:179.
21:44:28.910 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #89
21:44:28.910 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:177 which is executed by 35 tests
68567944
21:44:28.983 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:29.001 [pool-138-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (15 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

junit.framework.AssertionFailedError
    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
21:44:29.158 [pool-139-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (12 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[null]
junit.framework.AssertionFailedError    at junit.framework.Assert.fail(Assert.java:55)
    at junit.framework.Assert.assertTrue(Assert.java:22)
    at junit.framework.Assert.assertTrue(Assert.java:31)
    at junit.framework.TestCase.assertTrue(TestCase.java:201)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:140)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:79)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:29.299 [pool-140-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (140 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:79)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:29.300 [pool-137-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): null]
21:44:29.300 [pool-137-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:29.300 [pool-137-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:177.
21:44:29.300 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #90
21:44:29.300 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:174 which is executed by 35 tests
68567944
21:44:29.374 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:29.391 [pool-142-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (14 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:79)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:29.588 [pool-143-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (61 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:79)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:79)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:29.706 [pool-144-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (117 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:79)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:44:29.706 [pool-141-thread-1] DEBUG tests.output - Failing tests with false: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:29.706 [pool-141-thread-1] DEBUG tests.output - Failing tests with true: 
[testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest): Maximal number of iterations (10,000) exceeded]
21:44:29.706 [pool-141-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:174.
21:44:29.707 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #91
21:44:29.707 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:173 which is executed by 35 tests
68567944
21:44:29.782 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - looking with class fr.inria.lille.repair.nopol.spoon.smt.ConditionalAdder
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
21:44:29.799 [pool-146-thread-1] INFO  xxl.java.junit.TestCasesListener - Tests run finished (14 ms)
<> Total tests run: 11
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[Maximal number of iterations (10,000) exceeded]
org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:180)
    at org.apache.commons.math.special.Erf.erf(Erf.java:56)
    at org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability(NormalDistributionImpl.java:109)
    at org.apache.commons.math.distribution.NormalDistributionTest.testExtremeValues(NormalDistributionTest.java:133)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)

21:49:30.494 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
21:49:30.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - statement #92
21:49:30.494 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation org.apache.commons.math.special.Gamma:171 which is executed by 35 tests
java.lang.OutOfMemoryError: GC overhead limit exceeded
    at java.util.Arrays.asList(Arrays.java:3800)
    at fr.inria.lille.commons.trace.collector.PrimitiveTypeCollector.collectedValues(PrimitiveTypeCollector.java:14)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:29)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:17)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:73)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:66)
21:50:01.534 [pool-147-thread-1] INFO  f.i.l.c.t.SpecificationTestCasesListener - Tests run finished (331617 ms)
<> Total tests run: 1
<> Ignored tests: 0
<> Failed tests: 1
~ testExtremeValues(org.apache.commons.math.distribution.NormalDistributionTest)
[GC overhead limit exceeded]
java.lang.OutOfMemoryError: GC overhead limit exceeded    at java.util.Arrays.asList(Arrays.java:3800)
    at fr.inria.lille.commons.trace.collector.PrimitiveTypeCollector.collectedValues(PrimitiveTypeCollector.java:14)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectWith(ValueCollector.java:29)
    at fr.inria.lille.commons.trace.collector.ValueCollector.collectFrom(ValueCollector.java:17)
    at fr.inria.lille.commons.trace.RuntimeValues.collectInput(RuntimeValues.java:73)
    at org.apache.commons.math.special.Gamma.regularizedGammaP(Gamma.java:66)

java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at fr.inria.lille.repair.Main.main(Main.java:106)
Caused by: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.util.Arrays.copyOfRange(Arrays.java:3664)
	at java.lang.String.<init>(String.java:207)
	at java.util.zip.ZipCoder.toString(ZipCoder.java:59)
	at java.util.zip.ZipFile.getZipEntry(ZipFile.java:583)
	at java.util.zip.ZipFile.access$900(ZipFile.java:60)
	at java.util.zip.ZipFile$ZipEntryIterator.next(ZipFile.java:539)
	at java.util.zip.ZipFile$ZipEntryIterator.nextElement(ZipFile.java:514)
	at java.util.zip.ZipFile$ZipEntryIterator.nextElement(ZipFile.java:495)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.getModulesDeclaringPackage(ClasspathJar.java:234)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathLocation.isPackage(ClasspathLocation.java:177)
	at org.eclipse.jdt.internal.compiler.batch.ClasspathJar.findClass(ClasspathJar.java:111)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.internalFindClass(FileSystem.java:443)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.findClass(FileSystem.java:385)
	at org.eclipse.jdt.internal.compiler.batch.FileSystem.findType(FileSystem.java:529)
	at org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment.findType(IModuleAwareNameEnvironment.java:94)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createPackage(LookupEnvironment.java:1094)
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.buildTypeBindings(CompilationUnitScope.java:129)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.buildTypeBindings(LookupEnvironment.java:457)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:838)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:387)
	at spoon.support.compiler.jdt.TreeBuilderCompiler.buildUnits(TreeBuilderCompiler.java:73)
	at spoon.support.compiler.jdt.JDTBatchCompiler.getUnits(JDTBatchCompiler.java:266)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnits(JDTBasedSpoonCompiler.java:444)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:388)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:53)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:61)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:14)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:47)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:222)

Usage: java -jar nopol.jar
                          [(-m|--mode) <repair|ranking>] (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic> [(-o|--oracle) <angelic|symbolic>] [(-y|--synthesis) <smt|dynamoth>] [(-l|--solver) <z3|cvc4>] [(-p|--solver-path) <solverPath>] (-s|--source) source1:source2:...:sourceN  (-c|--classpath) <classpath> [(-t|--test) test1:test2:...:testN ] [--complianceLevel <complianceLevel>] [--maxTime <maxTime>] [--maxTimeType <maxTimeType>] [(-z|--flocal) < cocospoon|dumb|gzoltar>] [--output <outputFolder>] [--json[:<outputJson>]]

  [(-m|--mode) <repair|ranking>]
        Define the mode of execution. (default: repair)

  (-e|--type) <condition|precondition|pre_then_cond|loop|arithmetic>
        The repair type (example fixing only conditions, or adding
        precondition). REQUIRED OPTION (default: condition)

  [(-o|--oracle) <angelic|symbolic>]
        Define the oracle (only used with repair mode). (default: angelic)

  [(-y|--synthesis) <smt|dynamoth>]
        Define the patch synthesis. (default: smt)

  [(-l|--solver) <z3|cvc4>]
        Define the solver (only used with smt synthesis). (default: z3)

  [(-p|--solver-path) <solverPath>]
        Define the solver binary path (only used with smt synthesis).

  (-s|--source) source1:source2:...:sourceN 
        Define the path to the source code of the project.

  (-c|--classpath) <classpath>
        Define the classpath of the project.

  [(-t|--test) test1:test2:...:testN ]
        Define the tests of the project (both failing and passing),
        fully-qualified, separated with ':' (even if the classpath contains
        other tests, only those are considered.

  [--complianceLevel <complianceLevel>]
        The compliance level of the project. (default: 7)

  [--maxTime <maxTime>]
        The maximum time execution in minute for the whole execution of
        Nopol.(default: 10)

  [--maxTimeType <maxTimeType>]
        The maximum time execution in minute for one type of patch. (default: 5)

  [(-z|--flocal) < cocospoon|dumb|gzoltar>]
        Define the fault localizer to be used. (default: gzoltar)

  [--output <outputFolder>]
        Define the location where the patches will be saved. (default: .)

  [--json[:<outputJson>]]
        Output a json file in the current working directory.

Command exited with non-zero status 255
6556.06user 11.72system 6:46.46elapsed 1615%CPU (0avgtext+0avgdata 4591420maxresident)k
50664inputs+9200outputs (3major+1308577minor)pagefaults 0swaps


Node: petitprince-9.luxembourg.grid5000.fr



Date: Wed Nov 28 21:50:50 EST 2018

