{"general":{"NR_RIGHT_COMPILATIONS":1861,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"Math-64","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":575,"NR_GENERATIONS":2436,"TOTAL_TIME":1251.745,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"4872","VALIDATION":"|true|0|2274|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer","PATH":"\\\/tmp\\\/jGenProg_Defects4J_Math_64\\\/output_astor\\\/AstorMain-Math-64\\\/src\\\/default\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0.2","INGREDIENT_PARENT":"current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)","PATCH_HUNK_TYPE":"CtAssignmentImpl|CtBlockImpl","ORIGINAL_CODE":"if (ratio >= 1.0E-4) {\\n\\n\\tfirstIteration = false;\\n\\txNorm = 0;\\n\\tfor (int k = 0; k < (cols); ++k) {\\n\\t\\tdouble xK = (diag[k]) * (point[k]);\\n\\t\\txNorm += xK * xK;\\n\\t}\\n\\txNorm = java.lang.Math.sqrt(xNorm);\\n\\n\\n\\n}else {\\n\\n\\tcost = previousCost;\\n\\tfor (int j = 0; j < (solvedCols); ++j) {\\n\\t\\tint pj = permutation[j];\\n\\t\\tpoint[pj] = oldX[pj];\\n\\t}\\n\\ttmpVec = residuals;\\n\\tresiduals = oldRes;\\n\\toldRes = tmpVec;\\n}","BUGGY_CODE_TYPE":"CtIfImpl|CtBlockImpl","OPERATOR":"InsertAfterOp","MODIFIED_FILE_PATH":"\\\/tmp\\\/jGenProg_Defects4J_Math_64\\\/.\\\/output_astor\\\/AstorMain-Math-64\\\/\\\/src\\\/\\\/variant-4872_f\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java","LINE":"412","MP_RANKING":"210","PATCH_HUNK_CODE":"current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)"}],"TIME":"1251","GENERATION":"2436","FOLDER_SOLUTION_CODE":"\\\/tmp\\\/jGenProg_Defects4J_Math_64\\\/.\\\/output_astor\\\/AstorMain-Math-64\\\/\\\/bin\\\/\\\/variant-4872","PATCH_DIFF_ORIG":"\\\/var\\\/lib\\\/oar\\\/.batch_job_bashrc: line 5: \\\/home\\\/tdurieux\\\/.bashrc: No such file or directory\\n--- org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java\\n+++ org\\\/apache\\\/commons\\\/math\\\/optimization\\\/general\\\/LevenbergMarquardtOptimizer.java\\n@@ -431,7 +431,7 @@\\n \\t\\t\\t\\t\\ttmpVec = residuals;\\n \\t\\t\\t\\t\\tresiduals = oldRes;\\n \\t\\t\\t\\t\\toldRes = tmpVec;\\n-\\t\\t\\t\\t}\\n+\\t\\t\\t\\t} \\t\\t\\t\\tcurrent = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\\n \\t\\t\\t\\tif ((checker) == null) {\\n \\t\\t\\t\\t\\tif (((((java.lang.Math.abs(actRed)) <= (costRelativeTolerance)) && \\n \\t\\t\\t\\t\\t(preRed <= (costRelativeTolerance))) && \\n\\n"}]}