{
  "repair_end": "2018-12-02 09:18:45.562990", 
  "repair_begin": "2018-12-02 08:52:07.227629", 
  "patches": [
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1744/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:16:54.239291077 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -271,7 +271,12 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 4) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t\t}\n+\t\t\t\tminY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_624/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:16.602833404 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -255,9 +255,6 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n-                throw new ZeroException();\n-            }\n             for (int i = startIdx;\n                  (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);\n                  i += idxStep) {\n@@ -270,7 +267,10 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tfor (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 258, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "Delete", 
          "seed": "for (int i=startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length); i+=idxStep) {\n  if (isBetween(y,points[i].getY(),points[i + idxStep].getY())) {\n    return (idxStep < 0) ? new WeightedObservedPoint[]{points[i + idxStep],points[i]} : new WeightedObservedPoint[]{points[i],points[i + idxStep]};\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_603/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:08.030881888 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -223,7 +223,8 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1261/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:12:42.340835819 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -176,7 +176,8 @@\n             double fwhmApprox;\n             try {\n                 double halfY = params[0] + ((params[1] - params[0]) / 2.0);\n-                double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);\n+                Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\t\tdouble fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);\n                 double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);\n                 fwhmApprox = fwhmX2 - fwhmX1;\n             } catch (OutOfRangeException e) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 179, 
          "faulty": "double fwhmX1=interpolateXAtY(points,maxYIdx,-1,halfY);", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_972/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:10:15.945746542 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -200,7 +200,8 @@\n                     maxYIdx = i;\n                 }\n             }\n-            return maxYIdx;\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1877/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:18:02.214868527 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -194,10 +194,13 @@\n          * @return the index in specified points array.\n          */\n         private int findMaxY(WeightedObservedPoint[] points) {\n-            int maxYIdx = 0;\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tint maxYIdx = 0;\n             for (int i = 1; i < points.length; i++) {\n                 if (points[i].getY() > points[maxYIdx].getY()) {\n-                    maxYIdx = i;\n+                    if (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t\t}\n                 }\n             }\n             return maxYIdx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 200, 
          "faulty": "maxYIdx=i;", 
          "type": "Replace", 
          "seed": "if (points[i].getY() > points[maxYIdx].getY()) {\n  maxYIdx=i;\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 197, 
          "faulty": "int maxYIdx=0;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1276/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:12:49.364793754 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -200,7 +200,8 @@\n                     maxYIdx = i;\n                 }\n             }\n-            return maxYIdx;\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n@@ -272,7 +273,10 @@\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n+                if (idxStep == 0) {\n+\t\t\t\t\tthrow new ZeroException();\n+\t\t\t\t}\n+\t\t\t\tmaxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_355/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:18.779453208 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -269,7 +269,8 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_578/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:57.094939066 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -272,7 +272,6 @@\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "Delete", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 02:51:54.117461607 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_658/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 03:07:31.394744733 -0500\n@@ -105,7 +105,7 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_658/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:31.394744733 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -154,7 +154,11 @@\n          */\n         public double[] guess() {\n             if (parameters == null) {\n-                parameters = basicGuess(observations);\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tparameters = basicGuess(observations);\n             }\n             return parameters.clone();\n         }\n@@ -300,37 +304,38 @@\n          */\n         private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {\n             return new Comparator<WeightedObservedPoint>() {\n-                public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {\n-                    if (p1 == null && p2 == null) {\n-                        return 0;\n-                    }\n-                    if (p1 == null) {\n-                        return -1;\n-                    }\n-                    if (p2 == null) {\n-                        return 1;\n-                    }\n-                    if (p1.getX() < p2.getX()) {\n-                        return -1;\n-                    }\n-                    if (p1.getX() > p2.getX()) {\n-                        return 1;\n-                    }\n-                    if (p1.getY() < p2.getY()) {\n-                        return -1;\n-                    }\n-                    if (p1.getY() > p2.getY()) {\n-                        return 1;\n-                    }\n-                    if (p1.getWeight() < p2.getWeight()) {\n-                        return -1;\n-                    }\n-                    if (p1.getWeight() > p2.getWeight()) {\n-                        return 1;\n-                    }\n-                    return 0;\n-                }\n-            };\n+\t\t\t\tpublic int compare(WeightedObservedPoint p1,\n+\t\t\t\t\t\tWeightedObservedPoint p2) {\n+\t\t\t\t\tif (p1 == null && p2 == null) {\n+\t\t\t\t\t\treturn 0;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1 == null) {\n+\t\t\t\t\t\treturn -1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p2 == null) {\n+\t\t\t\t\t\treturn 1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getX() < p2.getX()) {\n+\t\t\t\t\t\treturn -1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getX() > p2.getX()) {\n+\t\t\t\t\t\treturn 1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getY() < p2.getY()) {\n+\t\t\t\t\t\treturn -1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getY() > p2.getY()) {\n+\t\t\t\t\t\treturn 1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getWeight() < p2.getWeight()) {\n+\t\t\t\t\t\treturn -1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getWeight() > p2.getWeight()) {\n+\t\t\t\t\t\treturn 1;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn 0;\n+\t\t\t\t}\n+\t\t\t};\n         }\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 302, 
          "faulty": "return new Comparator<WeightedObservedPoint>(){\n  public int compare(  WeightedObservedPoint p1,  WeightedObservedPoint p2){\n    if (p1 == null && p2 == null) {\n      return 0;\n    }\n    if (p1 == null) {\n      return -1;\n    }\n    if (p2 == null) {\n      return 1;\n    }\n    if (p1.getX() < p2.getX()) {\n      return -1;\n    }\n    if (p1.getX() > p2.getX()) {\n      return 1;\n    }\n    if (p1.getY() < p2.getY()) {\n      return -1;\n    }\n    if (p1.getY() > p2.getY()) {\n      return 1;\n    }\n    if (p1.getWeight() < p2.getWeight()) {\n      return -1;\n    }\n    if (p1.getWeight() > p2.getWeight()) {\n      return 1;\n    }\n    return 0;\n  }\n}\n;", 
          "type": "Replace", 
          "seed": "return new Comparator<WeightedObservedPoint>(){\n  public int compare(  WeightedObservedPoint p1,  WeightedObservedPoint p2){\n    if (p1 == null && p2 == null) {\n      return 0;\n    }\n    if (p1 == null) {\n      return -1;\n    }\n    if (p2 == null) {\n      return 1;\n    }\n    if (p1.getX() < p2.getX()) {\n      return -1;\n    }\n    if (p1.getX() > p2.getX()) {\n      return 1;\n    }\n    if (p1.getY() < p2.getY()) {\n      return -1;\n    }\n    if (p1.getY() > p2.getY()) {\n      return 1;\n    }\n    if (p1.getWeight() < p2.getWeight()) {\n      return -1;\n    }\n    if (p1.getWeight() > p2.getWeight()) {\n      return 1;\n    }\n    return 0;\n  }\n}\n;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 157, 
          "faulty": "parameters=basicGuess(observations);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1558/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:15:14.095943217 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -200,7 +200,8 @@\n                     maxYIdx = i;\n                 }\n             }\n-            return maxYIdx;\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n@@ -288,7 +289,10 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\treturn (value >= boundary1 && value <= boundary2) ||\n                    (value >= boundary2 && value <= boundary1);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_533/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:36.871044812 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -269,7 +269,10 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_70/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:03:04.300156871 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -223,7 +223,10 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            if (idxStep == 0) {\n+\t\t\t\tthrow new ZeroException();\n+\t\t\t}\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n@@ -271,7 +274,9 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (idxStep == 0) {\n+\t\t\t\t\tthrow new ZeroException();\n+\t\t\t\t}\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "Replace", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 02:51:54.117461607 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1705/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 03:16:30.611441378 -0500\n@@ -105,7 +105,7 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1705/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:16:30.611441378 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1705/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:16:30.611441378 -0500\n@@ -180,7 +180,10 @@\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n             if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+                if (param.length != 3) {\n+\t\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t\t}\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 183, 
          "faulty": "throw new NotStrictlyPositiveException(param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1125/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:11:37.025233361 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -194,7 +194,10 @@\n          * @return the index in specified points array.\n          */\n         private int findMaxY(WeightedObservedPoint[] points) {\n-            int maxYIdx = 0;\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tint maxYIdx = 0;\n             for (int i = 1; i < points.length; i++) {\n                 if (points[i].getY() > points[maxYIdx].getY()) {\n                     maxYIdx = i;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 197, 
          "faulty": "int maxYIdx=0;", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_389/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:33.979373707 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -197,6 +197,9 @@\n             int maxYIdx = 0;\n             for (int i = 1; i < points.length; i++) {\n                 if (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n                     maxYIdx = i;\n                 }\n             }\n@@ -261,7 +264,11 @@\n             for (int i = startIdx;\n                  (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);\n                  i += idxStep) {\n-                if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {\n+                if (observations.length < 3) {\n+\t\t\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\t\t\tobservations.length, 3, true);\n+\t\t\t\t\t}\n+\t\t\t\tif (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {\n                     return (idxStep < 0) ?\n                            new WeightedObservedPoint[] { points[i + idxStep], points[i] } :\n                            new WeightedObservedPoint[] { points[i], points[i + idxStep] };\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 264, 
          "faulty": "if (isBetween(y,points[i].getY(),points[i + idxStep].getY())) {\n  return (idxStep < 0) ? new WeightedObservedPoint[]{points[i + idxStep],points[i]} : new WeightedObservedPoint[]{points[i],points[i + idxStep]};\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 199, 
          "faulty": "if (points[i].getY() > points[maxYIdx].getY()) {\n  maxYIdx=i;\n}", 
          "type": "InsertBefore", 
          "seed": "if (points[i].getY() > points[maxYIdx].getY()) {\n  maxYIdx=i;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 02:51:54.117461607 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1110/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 03:11:30.929271116 -0500\n@@ -105,7 +105,7 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1110/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:11:30.929271116 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -288,7 +288,11 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\treturn (value >= boundary1 && value <= boundary2) ||\n                    (value >= boundary2 && value <= boundary1);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1593/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:15:30.127835939 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,9 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n@@ -272,7 +274,10 @@\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n+                if (idxStep == 0) {\n+\t\t\t\t\tthrow new ZeroException();\n+\t\t\t\t}\n+\t\t\t\tmaxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1117/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:11:33.949252397 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -269,7 +269,12 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            if (observations.length < 4) {\n+\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t}\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_510/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:26.779097583 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_755/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:16.738476314 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,9 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1376/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:13:40.856488845 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -200,7 +200,11 @@\n                     maxYIdx = i;\n                 }\n             }\n-            return maxYIdx;\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_748/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:13.698494161 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -200,7 +200,8 @@\n                     maxYIdx = i;\n                 }\n             }\n-            return maxYIdx;\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n@@ -269,7 +270,8 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1303/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:13:00.656726381 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -154,7 +154,10 @@\n          */\n         public double[] guess() {\n             if (parameters == null) {\n-                parameters = basicGuess(observations);\n+                if (parameters == null) {\n+\t\t\t\t\tparameters = basicGuess(observations);\n+\t\t\t\t}\n+\t\t\t\tparameters = basicGuess(observations);\n             }\n             return parameters.clone();\n         }\n@@ -270,10 +273,6 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n-            }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "Delete", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 157, 
          "faulty": "parameters=basicGuess(observations);", 
          "type": "InsertBefore", 
          "seed": "if (parameters == null) {\n  parameters=basicGuess(observations);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_797/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:41.798329936 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -194,7 +194,10 @@\n          * @return the index in specified points array.\n          */\n         private int findMaxY(WeightedObservedPoint[] points) {\n-            int maxYIdx = 0;\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tint maxYIdx = 0;\n             for (int i = 1; i < points.length; i++) {\n                 if (points[i].getY() > points[maxYIdx].getY()) {\n                     maxYIdx = i;\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_797/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:08:41.798329936 -0500\n@@ -128,7 +128,10 @@\n             validateParameters(param);\n \n             final double diff = x - param[1];\n-            final double i2s2 = 1 / (2 * param[2] * param[2]);\n+            if (param[2] <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n+\t\t\t}\n+\t\t\tfinal double i2s2 = 1 / (2 * param[2] * param[2]);\n             return Gaussian.value(diff, param[0], i2s2);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 131, 
          "faulty": "final double i2s2=1 / (2 * param[2] * param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param[2] <= 0) {\n  throw new NotStrictlyPositiveException(param[2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 197, 
          "faulty": "int maxYIdx=0;", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_563/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:50.994970960 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -270,7 +270,10 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tfor (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_426/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:51.171283793 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -271,7 +271,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tminY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n@@ -288,7 +292,11 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\treturn (value >= boundary1 && value <= boundary2) ||\n                    (value >= boundary2 && value <= boundary1);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_213/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:12.983797413 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -194,7 +194,10 @@\n          * @return the index in specified points array.\n          */\n         private int findMaxY(WeightedObservedPoint[] points) {\n-            int maxYIdx = 0;\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tint maxYIdx = 0;\n             for (int i = 1; i < points.length; i++) {\n                 if (points[i].getY() > points[maxYIdx].getY()) {\n                     maxYIdx = i;\n@@ -272,7 +275,11 @@\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tmaxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 197, 
          "faulty": "int maxYIdx=0;", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_617/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:13.602851459 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -220,7 +220,11 @@\n         private double interpolateXAtY(WeightedObservedPoint[] points,\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1190/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:12:07.733044944 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1190/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:12:07.733044944 -0500\n@@ -180,7 +180,10 @@\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n             if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+                if (param.length != 3) {\n+\t\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t\t}\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 183, 
          "faulty": "throw new NotStrictlyPositiveException(param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1845/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:17:47.106961298 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -223,7 +223,8 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n@@ -272,7 +273,6 @@\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "Delete", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_662/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:32.410738664 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -270,11 +270,15 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tfor (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n-            throw new OutOfRangeException(y, minY, maxY);\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tthrow new OutOfRangeException(y, minY, maxY);\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 277, 
          "faulty": "throw new OutOfRangeException(y,minY,maxY);", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_906/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:38.305994181 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -299,7 +299,10 @@\n          * @return the new {@code Comparator} instance.\n          */\n         private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {\n-            return new Comparator<WeightedObservedPoint>() {\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\treturn new Comparator<WeightedObservedPoint>() {\n                 public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {\n                     if (p1 == null && p2 == null) {\n                         return 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 302, 
          "faulty": "return new Comparator<WeightedObservedPoint>(){\n  public int compare(  WeightedObservedPoint p1,  WeightedObservedPoint p2){\n    if (p1 == null && p2 == null) {\n      return 0;\n    }\n    if (p1 == null) {\n      return -1;\n    }\n    if (p2 == null) {\n      return 1;\n    }\n    if (p1.getX() < p2.getX()) {\n      return -1;\n    }\n    if (p1.getX() > p2.getX()) {\n      return 1;\n    }\n    if (p1.getY() < p2.getY()) {\n      return -1;\n    }\n    if (p1.getY() > p2.getY()) {\n      return 1;\n    }\n    if (p1.getWeight() < p2.getWeight()) {\n      return -1;\n    }\n    if (p1.getWeight() > p2.getWeight()) {\n      return 1;\n    }\n    return 0;\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_518/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:30.307079135 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_518/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:06:30.307079135 -0500\n@@ -180,7 +180,10 @@\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n             if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+                if (param.length != 3) {\n+\t\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t\t}\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 183, 
          "faulty": "throw new NotStrictlyPositiveException(param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1746/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:16:54.791287589 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -200,7 +200,12 @@\n                     maxYIdx = i;\n                 }\n             }\n-            return maxYIdx;\n+            for (int i = 1; i < points.length; i++) {\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n@@ -270,10 +275,9 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n-            }\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n \n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1746/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:16:54.795287564 -0500\n@@ -180,7 +180,10 @@\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n             if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+                if (param.length != 3) {\n+\t\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t\t}\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "for (int i=1; i < points.length; i++) {\n  if (points[i].getY() > points[maxYIdx].getY()) {\n    maxYIdx=i;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 183, 
          "faulty": "throw new NotStrictlyPositiveException(param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1133/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:11:40.557211542 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -271,7 +271,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tminY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1133/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:11:40.561211517 -0500\n@@ -180,7 +180,10 @@\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n             if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+                if (param.length != 3) {\n+\t\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t\t}\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 183, 
          "faulty": "throw new NotStrictlyPositiveException(param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1278/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:12:49.868790740 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -171,7 +171,12 @@\n \n             int maxYIdx = findMaxY(points);\n             params[0] = points[maxYIdx].getY();\n-            params[1] = points[maxYIdx].getX();\n+            if (observations.length < 4) {\n+\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t}\n+\t\t\tparams[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n             try {\n@@ -223,7 +228,10 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 174, 
          "faulty": "params[1]=points[maxYIdx].getX();", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_485/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:16.603150795 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -154,7 +154,11 @@\n          */\n         public double[] guess() {\n             if (parameters == null) {\n-                parameters = basicGuess(observations);\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tparameters = basicGuess(observations);\n             }\n             return parameters.clone();\n         }\n@@ -274,7 +278,8 @@\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n-            throw new OutOfRangeException(y, minY, maxY);\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tthrow new OutOfRangeException(y, minY, maxY);\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 277, 
          "faulty": "throw new OutOfRangeException(y,minY,maxY);", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 157, 
          "faulty": "parameters=basicGuess(observations);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_293/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:51.347596701 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -270,10 +270,9 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n-            }\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n \n@@ -288,7 +287,11 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\treturn (value >= boundary1 && value <= boundary2) ||\n                    (value >= boundary2 && value <= boundary1);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_449/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:01.219231245 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -171,7 +171,10 @@\n \n             int maxYIdx = findMaxY(points);\n             params[0] = points[maxYIdx].getY();\n-            params[1] = points[maxYIdx].getX();\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tparams[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n             try {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 174, 
          "faulty": "params[1]=points[maxYIdx].getX();", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1607/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:15:36.575793134 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -271,7 +271,10 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "Replace", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1122/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:11:36.029239522 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -170,7 +170,8 @@\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n-            params[0] = points[maxYIdx].getY();\n+            params[1] = points[maxYIdx].getX();\n+\t\t\tparams[0] = points[maxYIdx].getY();\n             params[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 173, 
          "faulty": "params[0]=points[maxYIdx].getY();", 
          "type": "InsertBefore", 
          "seed": "params[1]=points[maxYIdx].getX();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_606/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:09.078876408 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -300,37 +300,38 @@\n          */\n         private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {\n             return new Comparator<WeightedObservedPoint>() {\n-                public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {\n-                    if (p1 == null && p2 == null) {\n-                        return 0;\n-                    }\n-                    if (p1 == null) {\n-                        return -1;\n-                    }\n-                    if (p2 == null) {\n-                        return 1;\n-                    }\n-                    if (p1.getX() < p2.getX()) {\n-                        return -1;\n-                    }\n-                    if (p1.getX() > p2.getX()) {\n-                        return 1;\n-                    }\n-                    if (p1.getY() < p2.getY()) {\n-                        return -1;\n-                    }\n-                    if (p1.getY() > p2.getY()) {\n-                        return 1;\n-                    }\n-                    if (p1.getWeight() < p2.getWeight()) {\n-                        return -1;\n-                    }\n-                    if (p1.getWeight() > p2.getWeight()) {\n-                        return 1;\n-                    }\n-                    return 0;\n-                }\n-            };\n+\t\t\t\tpublic int compare(WeightedObservedPoint p1,\n+\t\t\t\t\t\tWeightedObservedPoint p2) {\n+\t\t\t\t\tif (p1 == null && p2 == null) {\n+\t\t\t\t\t\treturn 0;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1 == null) {\n+\t\t\t\t\t\treturn -1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p2 == null) {\n+\t\t\t\t\t\treturn 1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getX() < p2.getX()) {\n+\t\t\t\t\t\treturn -1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getX() > p2.getX()) {\n+\t\t\t\t\t\treturn 1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getY() < p2.getY()) {\n+\t\t\t\t\t\treturn -1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getY() > p2.getY()) {\n+\t\t\t\t\t\treturn 1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getWeight() < p2.getWeight()) {\n+\t\t\t\t\t\treturn -1;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (p1.getWeight() > p2.getWeight()) {\n+\t\t\t\t\t\treturn 1;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn 0;\n+\t\t\t\t}\n+\t\t\t};\n         }\n     }\n }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 302, 
          "faulty": "return new Comparator<WeightedObservedPoint>(){\n  public int compare(  WeightedObservedPoint p1,  WeightedObservedPoint p2){\n    if (p1 == null && p2 == null) {\n      return 0;\n    }\n    if (p1 == null) {\n      return -1;\n    }\n    if (p2 == null) {\n      return 1;\n    }\n    if (p1.getX() < p2.getX()) {\n      return -1;\n    }\n    if (p1.getX() > p2.getX()) {\n      return 1;\n    }\n    if (p1.getY() < p2.getY()) {\n      return -1;\n    }\n    if (p1.getY() > p2.getY()) {\n      return 1;\n    }\n    if (p1.getWeight() < p2.getWeight()) {\n      return -1;\n    }\n    if (p1.getWeight() > p2.getWeight()) {\n      return 1;\n    }\n    return 0;\n  }\n}\n;", 
          "type": "Replace", 
          "seed": "return new Comparator<WeightedObservedPoint>(){\n  public int compare(  WeightedObservedPoint p1,  WeightedObservedPoint p2){\n    if (p1 == null && p2 == null) {\n      return 0;\n    }\n    if (p1 == null) {\n      return -1;\n    }\n    if (p2 == null) {\n      return 1;\n    }\n    if (p1.getX() < p2.getX()) {\n      return -1;\n    }\n    if (p1.getX() > p2.getX()) {\n      return 1;\n    }\n    if (p1.getY() < p2.getY()) {\n      return -1;\n    }\n    if (p1.getY() > p2.getY()) {\n      return 1;\n    }\n    if (p1.getWeight() < p2.getWeight()) {\n      return -1;\n    }\n    if (p1.getWeight() > p2.getWeight()) {\n      return 1;\n    }\n    return 0;\n  }\n}\n;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_193/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:04.791840277 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -269,7 +269,12 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            if (observations.length < 4) {\n+\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t}\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_193/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:04:04.795840256 -0500\n@@ -128,7 +128,10 @@\n             validateParameters(param);\n \n             final double diff = x - param[1];\n-            final double i2s2 = 1 / (2 * param[2] * param[2]);\n+            if (param.length != 3) {\n+\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t}\n+\t\t\tfinal double i2s2 = 1 / (2 * param[2] * param[2]);\n             return Gaussian.value(diff, param[0], i2s2);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 131, 
          "faulty": "final double i2s2=1 / (2 * param[2] * param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_528/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:34.891055165 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -220,9 +220,6 @@\n         private double interpolateXAtY(WeightedObservedPoint[] points,\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n-                throw new ZeroException();\n-            }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "Delete", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 114, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_630/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:19.186817871 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -200,7 +200,12 @@\n                     maxYIdx = i;\n                 }\n             }\n-            return maxYIdx;\n+            for (int i = 1; i < points.length; i++) {\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_630/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:07:19.186817871 -0500\n@@ -127,7 +127,8 @@\n                             double[] param) {\n             validateParameters(param);\n \n-            final double diff = x - param[1];\n+            validateParameters(param);\n+\t\t\tfinal double diff = x - param[1];\n             final double i2s2 = 1 / (2 * param[2] * param[2]);\n             return Gaussian.value(diff, param[0], i2s2);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "for (int i=1; i < points.length; i++) {\n  if (points[i].getY() > points[maxYIdx].getY()) {\n    maxYIdx=i;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 130, 
          "faulty": "final double diff=x - param[1];", 
          "type": "InsertBefore", 
          "seed": "validateParameters(param);"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_727/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:04.446548603 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 114, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_152/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:03:44.531946296 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -223,7 +223,10 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            if (idxStep == 0) {\n+\t\t\t\tthrow new ZeroException();\n+\t\t\t}\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n@@ -271,8 +274,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n+                if (idxStep == 0) {\n+\t\t\t\t\tthrow new ZeroException();\n+\t\t\t\t}\n+                Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\t\tmaxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "Replace", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_123/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:03:28.036032629 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -288,7 +288,10 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\treturn (value >= boundary1 && value <= boundary2) ||\n                    (value >= boundary2 && value <= boundary1);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1567/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:15:18.087916389 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,6 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n@@ -299,7 +298,10 @@\n          * @return the new {@code Comparator} instance.\n          */\n         private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {\n-            return new Comparator<WeightedObservedPoint>() {\n+            if (parameters == null) {\n+\t\t\t\tparameters = basicGuess(observations);\n+\t\t\t}\n+\t\t\treturn new Comparator<WeightedObservedPoint>() {\n                 public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {\n                     if (p1 == null && p2 == null) {\n                         return 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Delete", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 302, 
          "faulty": "return new Comparator<WeightedObservedPoint>(){\n  public int compare(  WeightedObservedPoint p1,  WeightedObservedPoint p2){\n    if (p1 == null && p2 == null) {\n      return 0;\n    }\n    if (p1 == null) {\n      return -1;\n    }\n    if (p2 == null) {\n      return 1;\n    }\n    if (p1.getX() < p2.getX()) {\n      return -1;\n    }\n    if (p1.getX() > p2.getX()) {\n      return 1;\n    }\n    if (p1.getY() < p2.getY()) {\n      return -1;\n    }\n    if (p1.getY() > p2.getY()) {\n      return 1;\n    }\n    if (p1.getWeight() < p2.getWeight()) {\n      return -1;\n    }\n    if (p1.getWeight() > p2.getWeight()) {\n      return 1;\n    }\n    return 0;\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (parameters == null) {\n  parameters=basicGuess(observations);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_814/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:48.750289552 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,10 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tArrays.sort(points, createWeightedObservedPointComparator());\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_938/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:57.553866701 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -182,7 +182,8 @@\n             } catch (OutOfRangeException e) {\n                 fwhmApprox = points[points.length - 1].getX() - points[0].getX();\n             }\n-            params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));\n+            params[1] = points[maxYIdx].getX();\n+\t\t\tparams[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));\n \n             return params;\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 185, 
          "faulty": "params[2]=fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));", 
          "type": "InsertBefore", 
          "seed": "params[1]=points[maxYIdx].getX();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1401/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:13:53.164416787 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -175,7 +175,9 @@\n \n             double fwhmApprox;\n             try {\n-                double halfY = params[0] + ((params[1] - params[0]) / 2.0);\n+                fwhmApprox = points[points.length - 1].getX()\n+\t\t\t\t\t\t- points[0].getX();\n+\t\t\t\tdouble halfY = params[0] + ((params[1] - params[0]) / 2.0);\n                 double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);\n                 double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);\n                 fwhmApprox = fwhmX2 - fwhmX1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 178, 
          "faulty": "double halfY=params[0] + ((params[1] - params[0]) / 2.0);", 
          "type": "InsertBefore", 
          "seed": "fwhmApprox=points[points.length - 1].getX() - points[0].getX();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_420/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:48.619297140 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -223,7 +223,10 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_955/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:10:05.545814297 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -200,7 +200,12 @@\n                     maxYIdx = i;\n                 }\n             }\n-            return maxYIdx;\n+            for (int i = 1; i < points.length; i++) {\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n@@ -220,7 +225,8 @@\n         private double interpolateXAtY(WeightedObservedPoint[] points,\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "for (int i=1; i < points.length; i++) {\n  if (points[i].getY() > points[maxYIdx].getY()) {\n    maxYIdx=i;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_507/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:25.819102603 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -299,7 +299,12 @@\n          * @return the new {@code Comparator} instance.\n          */\n         private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {\n-            return new Comparator<WeightedObservedPoint>() {\n+            if (observations.length < 4) {\n+\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t}\n+\t\t\treturn new Comparator<WeightedObservedPoint>() {\n                 public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {\n                     if (p1 == null && p2 == null) {\n                         return 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 302, 
          "faulty": "return new Comparator<WeightedObservedPoint>(){\n  public int compare(  WeightedObservedPoint p1,  WeightedObservedPoint p2){\n    if (p1 == null && p2 == null) {\n      return 0;\n    }\n    if (p1 == null) {\n      return -1;\n    }\n    if (p2 == null) {\n      return 1;\n    }\n    if (p1.getX() < p2.getX()) {\n      return -1;\n    }\n    if (p1.getX() > p2.getX()) {\n      return 1;\n    }\n    if (p1.getY() < p2.getY()) {\n      return -1;\n    }\n    if (p1.getY() > p2.getY()) {\n      return 1;\n    }\n    if (p1.getWeight() < p2.getWeight()) {\n      return -1;\n    }\n    if (p1.getWeight() > p2.getWeight()) {\n      return 1;\n    }\n    return 0;\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 02:51:54.117461607 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_274/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 03:04:42.867641063 -0500\n@@ -105,7 +105,7 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_274/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:42.867641063 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -223,7 +223,10 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            if (idxStep == 0) {\n+\t\t\t\tthrow new ZeroException();\n+\t\t\t}\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_24/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:02:39.956284318 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -154,7 +154,10 @@\n          */\n         public double[] guess() {\n             if (parameters == null) {\n-                parameters = basicGuess(observations);\n+                if (parameters == null) {\n+\t\t\t\t\tparameters = basicGuess(observations);\n+\t\t\t\t}\n+\t\t\t\tparameters = basicGuess(observations);\n             }\n             return parameters.clone();\n         }\n@@ -223,7 +226,10 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n@@ -271,7 +277,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 4) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t\t}\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "Replace", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 157, 
          "faulty": "parameters=basicGuess(observations);", 
          "type": "InsertBefore", 
          "seed": "if (parameters == null) {\n  parameters=basicGuess(observations);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 02:51:54.117461607 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_490/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 03:06:18.587140421 -0500\n@@ -111,6 +111,6 @@\n     /** {@inheritDoc} */\n     @Override\n     public String getLocalizedMessage() {\n-        return getMessage(Locale.getDefault());\n+        return getMessage(Locale.US);\n     }\n }\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_490/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:18.587140421 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 114, 
          "faulty": "return getMessage(Locale.getDefault());", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_317/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:02.371539034 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,10 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Replace", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_866/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:17.234125031 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_866/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:09:17.234125031 -0500\n@@ -127,7 +127,10 @@\n                             double[] param) {\n             validateParameters(param);\n \n-            final double diff = x - param[1];\n+            if (param.length != 3) {\n+\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t}\n+\t\t\tfinal double diff = x - param[1];\n             final double i2s2 = 1 / (2 * param[2] * param[2]);\n             return Gaussian.value(diff, param[0], i2s2);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 130, 
          "faulty": "final double diff=x - param[1];", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_570/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:53.514957784 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -272,7 +272,8 @@\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n+                minY = Math.min(minY, point.getY());\n+\t\t\t\tmaxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "minY=Math.min(minY,point.getY());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_458/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:05.147210703 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -169,8 +169,13 @@\n             Arrays.sort(points, createWeightedObservedPointComparator());\n             double[] params = new double[3];\n \n-            int maxYIdx = findMaxY(points);\n-            params[0] = points[maxYIdx].getY();\n+            int maxYIdx = 0;\n+            for (int i = 1; i < points.length; i++) {\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tparams[0] = points[maxYIdx].getY();\n             params[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 172, 
          "faulty": "int maxYIdx=findMaxY(points);", 
          "type": "Replace", 
          "seed": "int maxYIdx=0;"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 173, 
          "faulty": "params[0]=points[maxYIdx].getY();", 
          "type": "InsertBefore", 
          "seed": "for (int i=1; i < points.length; i++) {\n  if (points[i].getY() > points[maxYIdx].getY()) {\n    maxYIdx=i;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_850/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:08.506175288 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,12 +166,14 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n             params[0] = points[maxYIdx].getY();\n-            params[1] = points[maxYIdx].getX();\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tparams[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n             try {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Delete", 
          "seed": "parameters=basicGuess(observations);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 174, 
          "faulty": "params[1]=points[maxYIdx].getX();", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_261/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:37.267670360 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -255,7 +255,11 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            if (observations == null) {\n+\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\tLocalizedFormats.INPUT_ARRAY);\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             for (int i = startIdx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 258, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_560/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:49.978976273 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -220,7 +220,8 @@\n         private double interpolateXAtY(WeightedObservedPoint[] points,\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1923/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:18:27.866712331 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -180,7 +180,11 @@\n                 double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);\n                 fwhmApprox = fwhmX2 - fwhmX1;\n             } catch (OutOfRangeException e) {\n-                fwhmApprox = points[points.length - 1].getX() - points[0].getX();\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tfwhmApprox = points[points.length - 1].getX() - points[0].getX();\n             }\n             params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 183, 
          "faulty": "fwhmApprox=points[points.length - 1].getX() - points[0].getX();", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1956/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:18:43.854615762 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -288,7 +288,11 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\treturn (value >= boundary1 && value <= boundary2) ||\n                    (value >= boundary2 && value <= boundary1);\n         }\n \n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1956/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:18:43.858615738 -0500\n@@ -180,7 +180,10 @@\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n             if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+                if (param.length != 3) {\n+\t\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t\t}\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 183, 
          "faulty": "throw new NotStrictlyPositiveException(param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_381/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:30.511391846 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -154,7 +154,11 @@\n          */\n         public double[] guess() {\n             if (parameters == null) {\n-                parameters = basicGuess(observations);\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tparameters = basicGuess(observations);\n             }\n             return parameters.clone();\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 157, 
          "faulty": "parameters=basicGuess(observations);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 02:51:54.117461607 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_240/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 03:04:27.267722677 -0500\n@@ -105,7 +105,7 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_240/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:27.267722677 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,11 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n+            if (observations.length < 4) {\n+\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t}\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n@@ -270,10 +274,9 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n-            }\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Replace", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_775/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:28.258408863 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -184,7 +184,8 @@\n             }\n             params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));\n \n-            return params;\n+            params[1] = points[maxYIdx].getX();\n+\t\t\treturn params;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 187, 
          "faulty": "return params;", 
          "type": "InsertBefore", 
          "seed": "params[1]=points[maxYIdx].getX();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_920/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:44.345953980 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,6 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n@@ -270,10 +269,9 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n-            }\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Delete", 
          "seed": "parameters=basicGuess(observations);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_860/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:14.730139436 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,9 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n@@ -271,8 +273,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n+                if (observations.length < 4) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t\t}\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "Replace", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "Delete", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_501/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:23.779113270 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -272,7 +272,10 @@\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n+                if (idxStep == 0) {\n+\t\t\t\t\tthrow new ZeroException();\n+\t\t\t\t}\n+\t\t\t\tmaxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_411/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:44.571318310 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 187, 
          "faulty": "return params;", 
          "type": "Replace", 
          "seed": "return params;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1311/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:13:09.736672419 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,6 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Delete", 
          "seed": "parameters=basicGuess(observations);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "Replace", 
          "seed": "return maxYIdx;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_655/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:30.374750829 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -221,6 +221,9 @@\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n             if (idxStep == 0) {\n+\t\t\t\t\tthrow new ZeroException();\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1767/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:17:04.275227812 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -170,7 +170,12 @@\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n-            params[0] = points[maxYIdx].getY();\n+            for (int i = 1; i < points.length; i++) {\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tparams[0] = points[maxYIdx].getY();\n             params[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 173, 
          "faulty": "params[0]=points[maxYIdx].getY();", 
          "type": "InsertBefore", 
          "seed": "for (int i=1; i < points.length; i++) {\n  if (points[i].getY() > points[maxYIdx].getY()) {\n    maxYIdx=i;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_430/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:52.615276241 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -271,7 +271,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tminY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_584/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:59.670925597 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 277, 
          "faulty": "throw new OutOfRangeException(y,minY,maxY);", 
          "type": "Replace", 
          "seed": "throw new OutOfRangeException(y,minY,maxY);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1579/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:15:23.687878885 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -176,7 +176,12 @@\n             double fwhmApprox;\n             try {\n                 double halfY = params[0] + ((params[1] - params[0]) / 2.0);\n-                double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);\n+                for (int i = 1; i < points.length; i++) {\n+\t\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tdouble fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);\n                 double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);\n                 fwhmApprox = fwhmX2 - fwhmX1;\n             } catch (OutOfRangeException e) {\n@@ -255,7 +260,11 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            if (observations == null) {\n+\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\tLocalizedFormats.INPUT_ARRAY);\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             for (int i = startIdx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 258, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 179, 
          "faulty": "double fwhmX1=interpolateXAtY(points,maxYIdx,-1,halfY);", 
          "type": "InsertBefore", 
          "seed": "for (int i=1; i < points.length; i++) {\n  if (points[i].getY() > points[maxYIdx].getY()) {\n    maxYIdx=i;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_805/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:45.298309593 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -288,8 +288,8 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n-                   (value >= boundary2 && value <= boundary1);\n+            return (value >= boundary1 && value <= boundary2)\n+\t\t\t\t\t|| (value >= boundary2 && value <= boundary1);\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "Replace", 
          "seed": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_745/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:12.698500036 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -197,7 +197,9 @@\n             int maxYIdx = 0;\n             for (int i = 1; i < points.length; i++) {\n                 if (points[i].getY() > points[maxYIdx].getY()) {\n-                    maxYIdx = i;\n+                    if (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t\t}\n                 }\n             }\n             return maxYIdx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 200, 
          "faulty": "maxYIdx=i;", 
          "type": "Replace", 
          "seed": "if (points[i].getY() > points[maxYIdx].getY()) {\n  maxYIdx=i;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_853/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:09.498169571 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -167,7 +167,8 @@\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n             Arrays.sort(points, createWeightedObservedPointComparator());\n-            double[] params = new double[3];\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tdouble[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n             params[0] = points[maxYIdx].getY();\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 170, 
          "faulty": "double[] params=new double[3];", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_660/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:31.902741698 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -194,7 +194,8 @@\n          * @return the index in specified points array.\n          */\n         private int findMaxY(WeightedObservedPoint[] points) {\n-            int maxYIdx = 0;\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tint maxYIdx = 0;\n             for (int i = 1; i < points.length; i++) {\n                 if (points[i].getY() > points[maxYIdx].getY()) {\n                     maxYIdx = i;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 197, 
          "faulty": "int maxYIdx=0;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_437/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:55.663260301 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_437/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:05:55.663260301 -0500\n@@ -128,7 +128,8 @@\n             validateParameters(param);\n \n             final double diff = x - param[1];\n-            final double i2s2 = 1 / (2 * param[2] * param[2]);\n+            validateParameters(param);\n+\t\t\tfinal double i2s2 = 1 / (2 * param[2] * param[2]);\n             return Gaussian.value(diff, param[0], i2s2);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 131, 
          "faulty": "final double i2s2=1 / (2 * param[2] * param[2]);", 
          "type": "InsertBefore", 
          "seed": "validateParameters(param);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_592/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:03.178907256 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -200,7 +200,12 @@\n                     maxYIdx = i;\n                 }\n             }\n-            return maxYIdx;\n+            for (int i = 1; i < points.length; i++) {\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "for (int i=1; i < points.length; i++) {\n  if (points[i].getY() > points[maxYIdx].getY()) {\n    maxYIdx=i;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1695/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:16:26.091470359 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -171,7 +171,8 @@\n \n             int maxYIdx = findMaxY(points);\n             params[0] = points[maxYIdx].getY();\n-            params[1] = points[maxYIdx].getX();\n+            params[0] = points[maxYIdx].getY();\n+\t\t\tparams[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n             try {\n@@ -220,7 +221,8 @@\n         private double interpolateXAtY(WeightedObservedPoint[] points,\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 174, 
          "faulty": "params[1]=points[maxYIdx].getX();", 
          "type": "InsertBefore", 
          "seed": "params[0]=points[maxYIdx].getY();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_246/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:29.803709409 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -171,7 +171,10 @@\n \n             int maxYIdx = findMaxY(points);\n             params[0] = points[maxYIdx].getY();\n-            params[1] = points[maxYIdx].getX();\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\tparams[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n             try {\n@@ -269,7 +272,16 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            for (int i = startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i\n+\t\t\t\t\t+ idxStep < points.length); i += idxStep) {\n+\t\t\t\tif (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {\n+\t\t\t\t\treturn (idxStep < 0) ? new WeightedObservedPoint[] {\n+\t\t\t\t\t\t\tpoints[i + idxStep], points[i] }\n+\t\t\t\t\t\t\t: new WeightedObservedPoint[] { points[i],\n+\t\t\t\t\t\t\t\t\tpoints[i + idxStep] };\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "for (int i=startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length); i+=idxStep) {\n  if (isBetween(y,points[i].getY(),points[i + idxStep].getY())) {\n    return (idxStep < 0) ? new WeightedObservedPoint[]{points[i + idxStep],points[i]} : new WeightedObservedPoint[]{points[i],points[i + idxStep]};\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 174, 
          "faulty": "params[1]=points[maxYIdx].getX();", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_787/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:37.162356919 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -170,7 +170,11 @@\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n-            params[0] = points[maxYIdx].getY();\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\tparams[0] = points[maxYIdx].getY();\n             params[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_787/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:08:37.162356919 -0500\n@@ -180,7 +180,10 @@\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n             if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+                if (param.length != 3) {\n+\t\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t\t}\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 183, 
          "faulty": "throw new NotStrictlyPositiveException(param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 173, 
          "faulty": "params[0]=points[maxYIdx].getY();", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_187/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:02.491852312 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_187/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:04:02.495852291 -0500\n@@ -128,7 +128,10 @@\n             validateParameters(param);\n \n             final double diff = x - param[1];\n-            final double i2s2 = 1 / (2 * param[2] * param[2]);\n+            if (param == null) {\n+\t\t\t\tthrow new NullArgumentException();\n+\t\t\t}\n+\t\t\tfinal double i2s2 = 1 / (2 * param[2] * param[2]);\n             return Gaussian.value(diff, param[0], i2s2);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 131, 
          "faulty": "final double i2s2=1 / (2 * param[2] * param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param == null) {\n  throw new NullArgumentException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1049/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:10:56.141489013 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -220,7 +220,8 @@\n         private double interpolateXAtY(WeightedObservedPoint[] points,\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n@@ -255,7 +256,11 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            if (observations == null) {\n+\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\tLocalizedFormats.INPUT_ARRAY);\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             for (int i = startIdx;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 258, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_636/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:21.262805407 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -169,7 +169,12 @@\n             Arrays.sort(points, createWeightedObservedPointComparator());\n             double[] params = new double[3];\n \n-            int maxYIdx = findMaxY(points);\n+            if (observations.length < 4) {\n+\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t}\n+\t\t\tint maxYIdx = findMaxY(points);\n             params[0] = points[maxYIdx].getY();\n             params[1] = points[maxYIdx].getX();\n \n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_636/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:07:21.262805407 -0500\n@@ -127,7 +127,10 @@\n                             double[] param) {\n             validateParameters(param);\n \n-            final double diff = x - param[1];\n+            if (param[2] <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n+\t\t\t}\n+\t\t\tfinal double diff = x - param[1];\n             final double i2s2 = 1 / (2 * param[2] * param[2]);\n             return Gaussian.value(diff, param[0], i2s2);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 172, 
          "faulty": "int maxYIdx=findMaxY(points);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 130, 
          "faulty": "final double diff=x - param[1];", 
          "type": "InsertBefore", 
          "seed": "if (param[2] <= 0) {\n  throw new NotStrictlyPositiveException(param[2]);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1085/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:11:19.549341929 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -197,6 +197,9 @@\n             int maxYIdx = 0;\n             for (int i = 1; i < points.length; i++) {\n                 if (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n                     maxYIdx = i;\n                 }\n             }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 199, 
          "faulty": "if (points[i].getY() > points[maxYIdx].getY()) {\n  maxYIdx=i;\n}", 
          "type": "InsertBefore", 
          "seed": "if (points[i].getY() > points[maxYIdx].getY()) {\n  maxYIdx=i;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_207/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:10.551810138 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -272,7 +272,10 @@\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n+                if (observations == null) {\n+\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\tLocalizedFormats.INPUT_ARRAY);\n+\t\t\t\t}\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n@@ -288,7 +291,10 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n+\t\t\treturn (value >= boundary1 && value <= boundary2) ||\n                    (value >= boundary2 && value <= boundary1);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_731/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:05.990539504 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -269,7 +269,16 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            for (int i = startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i\n+\t\t\t\t\t+ idxStep < points.length); i += idxStep) {\n+\t\t\t\tif (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {\n+\t\t\t\t\treturn (idxStep < 0) ? new WeightedObservedPoint[] {\n+\t\t\t\t\t\t\tpoints[i + idxStep], points[i] }\n+\t\t\t\t\t\t\t: new WeightedObservedPoint[] { points[i],\n+\t\t\t\t\t\t\t\t\tpoints[i + idxStep] };\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_731/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:08:05.994539480 -0500\n@@ -180,7 +180,10 @@\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n             if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+                if (param.length != 3) {\n+\t\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t\t}\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 183, 
          "faulty": "throw new NotStrictlyPositiveException(param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "for (int i=startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length); i+=idxStep) {\n  if (isBetween(y,points[i].getY(),points[i + idxStep].getY())) {\n    return (idxStep < 0) ? new WeightedObservedPoint[]{points[i + idxStep],points[i]} : new WeightedObservedPoint[]{points[i],points[i + idxStep]};\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_874/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:20.702105098 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -269,10 +269,14 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            if (idxStep == 0) {\n+\t\t\t\tthrow new ZeroException();\n+\t\t\t}\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n+                minY = Math.min(minY, point.getY());\n+\t\t\t\tmaxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "minY=Math.min(minY,point.getY());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1828/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:17:39.699007012 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -200,7 +200,12 @@\n                     maxYIdx = i;\n                 }\n             }\n-            return maxYIdx;\n+            for (int i = 1; i < points.length; i++) {\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "for (int i=1; i < points.length; i++) {\n  if (points[i].getY() > points[maxYIdx].getY()) {\n    maxYIdx=i;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_504/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:24.787108000 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -223,7 +223,10 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            if (idxStep == 0) {\n+\t\t\t\tthrow new ZeroException();\n+\t\t\t}\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n@@ -299,7 +302,11 @@\n          * @return the new {@code Comparator} instance.\n          */\n         private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {\n-            return new Comparator<WeightedObservedPoint>() {\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\treturn new Comparator<WeightedObservedPoint>() {\n                 public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {\n                     if (p1 == null && p2 == null) {\n                         return 0;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 302, 
          "faulty": "return new Comparator<WeightedObservedPoint>(){\n  public int compare(  WeightedObservedPoint p1,  WeightedObservedPoint p2){\n    if (p1 == null && p2 == null) {\n      return 0;\n    }\n    if (p1 == null) {\n      return -1;\n    }\n    if (p2 == null) {\n      return 1;\n    }\n    if (p1.getX() < p2.getX()) {\n      return -1;\n    }\n    if (p1.getX() > p2.getX()) {\n      return 1;\n    }\n    if (p1.getY() < p2.getY()) {\n      return -1;\n    }\n    if (p1.getY() > p2.getY()) {\n      return 1;\n    }\n    if (p1.getWeight() < p2.getWeight()) {\n      return -1;\n    }\n    if (p1.getWeight() > p2.getWeight()) {\n      return 1;\n    }\n    return 0;\n  }\n}\n;", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_106/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:03:20.736070837 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -223,7 +223,10 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            if (idxStep == 0) {\n+\t\t\t\tthrow new ZeroException();\n+\t\t\t}\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n@@ -270,10 +273,6 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n-            }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "Replace", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "Delete", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_333/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:09.471501895 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -154,7 +154,9 @@\n          */\n         public double[] guess() {\n             if (parameters == null) {\n-                parameters = basicGuess(observations);\n+                if (parameters == null) {\n+\t\t\t\t\tparameters = basicGuess(observations);\n+\t\t\t\t}\n             }\n             return parameters.clone();\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 157, 
          "faulty": "parameters=basicGuess(observations);", 
          "type": "Replace", 
          "seed": "if (parameters == null) {\n  parameters=basicGuess(observations);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_811/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:47.746295379 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -171,7 +171,8 @@\n \n             int maxYIdx = findMaxY(points);\n             params[0] = points[maxYIdx].getY();\n-            params[1] = points[maxYIdx].getX();\n+            params[0] = points[maxYIdx].getY();\n+\t\t\tparams[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n             try {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 174, 
          "faulty": "params[1]=points[maxYIdx].getX();", 
          "type": "InsertBefore", 
          "seed": "params[0]=points[maxYIdx].getY();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_767/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:24.718429560 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -196,11 +196,13 @@\n         private int findMaxY(WeightedObservedPoint[] points) {\n             int maxYIdx = 0;\n             for (int i = 1; i < points.length; i++) {\n-                if (points[i].getY() > points[maxYIdx].getY()) {\n-                    maxYIdx = i;\n-                }\n             }\n-            return maxYIdx;\n+            for (int i = 1; i < points.length; i++) {\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn maxYIdx;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "InsertBefore", 
          "seed": "for (int i=1; i < points.length; i++) {\n  if (points[i].getY() > points[maxYIdx].getY()) {\n    maxYIdx=i;\n  }\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 199, 
          "faulty": "if (points[i].getY() > points[maxYIdx].getY()) {\n  maxYIdx=i;\n}", 
          "type": "Delete", 
          "seed": "if (points[i].getY() > points[maxYIdx].getY()) {\n  maxYIdx=i;\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1848/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:17:48.114955089 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -171,7 +171,8 @@\n \n             int maxYIdx = findMaxY(points);\n             params[0] = points[maxYIdx].getY();\n-            params[1] = points[maxYIdx].getX();\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tparams[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n             try {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 174, 
          "faulty": "params[1]=points[maxYIdx].getX();", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 02:51:54.117461607 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_370/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/exception/MathRuntimeException.java\t2018-12-02 03:05:25.387418645 -0500\n@@ -105,7 +105,7 @@\n    /** {@inheritDoc} */\n     @Override\n     public String getMessage() {\n-        return getMessage(Locale.US);\n+        return getMessage(Locale.getDefault());\n     }\n \n     /** {@inheritDoc} */\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_370/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:25.391418625 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.getDefault());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_479/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:14.703160731 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_479/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:06:14.707160710 -0500\n@@ -127,7 +127,10 @@\n                             double[] param) {\n             validateParameters(param);\n \n-            final double diff = x - param[1];\n+            if (param[2] <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n+\t\t\t}\n+\t\t\tfinal double diff = x - param[1];\n             final double i2s2 = 1 / (2 * param[2] * param[2]);\n             return Gaussian.value(diff, param[0], i2s2);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 130, 
          "faulty": "final double diff=x - param[1];", 
          "type": "InsertBefore", 
          "seed": "if (param[2] <= 0) {\n  throw new NotStrictlyPositiveException(param[2]);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1226/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:12:25.448937491 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -271,7 +271,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 4) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t\t}\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "Replace", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_203/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:09.159817422 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -167,7 +167,11 @@\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n             Arrays.sort(points, createWeightedObservedPointComparator());\n-            double[] params = new double[3];\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\tdouble[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n             params[0] = points[maxYIdx].getY();\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 170, 
          "faulty": "double[] params=new double[3];", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_222/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:16.343779832 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -223,7 +223,10 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n+            if (idxStep == 0) {\n+\t\t\t\tthrow new ZeroException();\n+\t\t\t}\n+\t\t\tWeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n             if (pointA.getY() == y) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 226, 
          "faulty": "WeightedObservedPoint[] twoPoints=getInterpolationPointsForY(points,startIdx,idxStep,y);", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_351/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:17.263461138 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,6 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Delete", 
          "seed": "parameters=basicGuess(observations);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1726/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:16:40.691377018 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -255,7 +255,11 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            if (observations == null) {\n+\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\tLocalizedFormats.INPUT_ARRAY);\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             for (int i = startIdx;\n@@ -272,7 +276,6 @@\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 275, 
          "faulty": "maxY=Math.max(maxY,point.getY());", 
          "type": "Delete", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 258, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_483/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:16.087153494 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -220,9 +220,6 @@\n         private double interpolateXAtY(WeightedObservedPoint[] points,\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n-                throw new ZeroException();\n-            }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "Delete", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_175/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:03:57.283879564 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -220,9 +220,6 @@\n         private double interpolateXAtY(WeightedObservedPoint[] points,\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n-                throw new ZeroException();\n-            }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n@@ -288,7 +285,11 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\treturn (value >= boundary1 && value <= boundary2) ||\n                    (value >= boundary2 && value <= boundary1);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "Delete", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_908/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:38.817990766 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -271,7 +271,6 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "Delete", 
          "seed": "if (parameters == null) {\n  parameters=basicGuess(observations);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_281/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:45.855625432 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -154,7 +154,11 @@\n          */\n         public double[] guess() {\n             if (parameters == null) {\n-                parameters = basicGuess(observations);\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tparameters = basicGuess(observations);\n             }\n             return parameters.clone();\n         }\n@@ -288,8 +292,8 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n-                   (value >= boundary2 && value <= boundary1);\n+            return (value >= boundary1 && value <= boundary2)\n+\t\t\t\t\t|| (value >= boundary2 && value <= boundary1);\n         }\n \n         /**\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_281/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:04:45.859625411 -0500\n@@ -127,7 +127,10 @@\n                             double[] param) {\n             validateParameters(param);\n \n-            final double diff = x - param[1];\n+            if (param[2] <= 0) {\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n+\t\t\t}\n+\t\t\tfinal double diff = x - param[1];\n             final double i2s2 = 1 / (2 * param[2] * param[2]);\n             return Gaussian.value(diff, param[0], i2s2);\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "Replace", 
          "seed": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 130, 
          "faulty": "final double diff=x - param[1];", 
          "type": "InsertBefore", 
          "seed": "if (param[2] <= 0) {\n  throw new NotStrictlyPositiveException(param[2]);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 157, 
          "faulty": "parameters=basicGuess(observations);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_681/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:41.810682636 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -220,9 +220,6 @@\n         private double interpolateXAtY(WeightedObservedPoint[] points,\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n-                throw new ZeroException();\n-            }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n             WeightedObservedPoint pointA = twoPoints[0];\n             WeightedObservedPoint pointB = twoPoints[1];\n@@ -270,10 +267,9 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n-            }\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "Delete", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1830/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:17:40.211003848 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -258,7 +258,16 @@\n             if (idxStep == 0) {\n                 throw new ZeroException();\n             }\n-            for (int i = startIdx;\n+            for (int i = startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i\n+\t\t\t\t\t+ idxStep < points.length); i += idxStep) {\n+\t\t\t\tif (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {\n+\t\t\t\t\treturn (idxStep < 0) ? new WeightedObservedPoint[] {\n+\t\t\t\t\t\t\tpoints[i + idxStep], points[i] }\n+\t\t\t\t\t\t\t: new WeightedObservedPoint[] { points[i],\n+\t\t\t\t\t\t\t\t\tpoints[i + idxStep] };\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (int i = startIdx;\n                  (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);\n                  i += idxStep) {\n                 if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 261, 
          "faulty": "for (int i=startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length); i+=idxStep) {\n  if (isBetween(y,points[i].getY(),points[i + idxStep].getY())) {\n    return (idxStep < 0) ? new WeightedObservedPoint[]{points[i + idxStep],points[i]} : new WeightedObservedPoint[]{points[i],points[i + idxStep]};\n  }\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length); i+=idxStep) {\n  if (isBetween(y,points[i].getY(),points[i + idxStep].getY())) {\n    return (idxStep < 0) ? new WeightedObservedPoint[]{points[i + idxStep],points[i]} : new WeightedObservedPoint[]{points[i],points[i + idxStep]};\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1105/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:11:28.941283455 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -271,7 +271,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 4) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t\t}\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1105/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:11:28.945283430 -0500\n@@ -180,7 +180,10 @@\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n             if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+                if (param.length != 3) {\n+\t\t\t\t\tthrow new DimensionMismatchException(param.length, 3);\n+\t\t\t\t}\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 183, 
          "faulty": "throw new NotStrictlyPositiveException(param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param.length != 3) {\n  throw new DimensionMismatchException(param.length,3);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "Replace", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1732/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:16:43.183361163 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -255,7 +255,11 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            if (observations == null) {\n+\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\tLocalizedFormats.INPUT_ARRAY);\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             for (int i = startIdx;\n@@ -271,7 +275,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 4) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t\t}\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "Replace", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 258, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1353/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:13:29.708554373 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -154,7 +154,11 @@\n          */\n         public double[] guess() {\n             if (parameters == null) {\n-                parameters = basicGuess(observations);\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tparameters = basicGuess(observations);\n             }\n             return parameters.clone();\n         }\n@@ -269,7 +273,12 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            if (observations.length < 4) {\n+\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t}\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java", 
          "line": 108, 
          "faulty": "return getMessage(Locale.US);", 
          "type": "Replace", 
          "seed": "return getMessage(Locale.US);"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 157, 
          "faulty": "parameters=basicGuess(observations);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_466/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:08.715192045 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -153,7 +153,12 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         public double[] guess() {\n-            if (parameters == null) {\n+            if (observations.length < 4) {\n+\t\t\t\tthrow new NumberIsTooSmallException(\n+\t\t\t\t\t\tLocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n+\t\t\t\t\t\tobservations.length, 4, true);\n+\t\t\t}\n+\t\t\tif (parameters == null) {\n                 parameters = basicGuess(observations);\n             }\n             return parameters.clone();\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 156, 
          "faulty": "if (parameters == null) {\n  parameters=basicGuess(observations);\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 4) {\n  throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,observations.length,4,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_248/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:30.351706543 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -288,7 +288,11 @@\n          * {@code boundary2} (inclusive), {@code false} otherwise.\n          */\n         private boolean isBetween(double value, double boundary1, double boundary2) {\n-            return (value >= boundary1 && value <= boundary2) ||\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\treturn (value >= boundary1 && value <= boundary2) ||\n                    (value >= boundary2 && value <= boundary1);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 291, 
          "faulty": "return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_614/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:12.594857532 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,6 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n@@ -269,7 +268,8 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Delete", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1184/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:12:05.133060787 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 203, 
          "faulty": "return maxYIdx;", 
          "type": "Replace", 
          "seed": "return maxYIdx;"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1014/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:10:36.625613223 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -261,7 +261,10 @@\n             for (int i = startIdx;\n                  (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);\n                  i += idxStep) {\n-                if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {\n+                if (idxStep == 0) {\n+\t\t\t\t\t\tthrow new ZeroException();\n+\t\t\t\t\t}\n+\t\t\t\tif (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {\n                     return (idxStep < 0) ?\n                            new WeightedObservedPoint[] { points[i + idxStep], points[i] } :\n                            new WeightedObservedPoint[] { points[i], points[i + idxStep] };\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 264, 
          "faulty": "if (isBetween(y,points[i].getY(),points[i + idxStep].getY())) {\n  return (idxStep < 0) ? new WeightedObservedPoint[]{points[i + idxStep],points[i]} : new WeightedObservedPoint[]{points[i],points[i + idxStep]};\n}", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1281/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:12:50.996783998 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -170,7 +170,12 @@\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n-            params[0] = points[maxYIdx].getY();\n+            for (int i = 1; i < points.length; i++) {\n+\t\t\t\tif (points[i].getY() > points[maxYIdx].getY()) {\n+\t\t\t\t\tmaxYIdx = i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tparams[0] = points[maxYIdx].getY();\n             params[1] = points[maxYIdx].getX();\n \n             double fwhmApprox;\n@@ -220,7 +225,8 @@\n         private double interpolateXAtY(WeightedObservedPoint[] points,\n                                        int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 223, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 173, 
          "faulty": "params[0]=points[maxYIdx].getY();", 
          "type": "InsertBefore", 
          "seed": "for (int i=1; i < points.length; i++) {\n  if (points[i].getY() > points[maxYIdx].getY()) {\n    maxYIdx=i;\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_139/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:03:35.239994925 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_845/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:06.398187446 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -255,9 +255,6 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n-                throw new ZeroException();\n-            }\n             for (int i = startIdx;\n                  (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);\n                  i += idxStep) {\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 258, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "Delete", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_781/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:08:30.806393983 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -274,7 +274,8 @@\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n-            throw new OutOfRangeException(y, minY, maxY);\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tthrow new OutOfRangeException(y, minY, maxY);\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 277, 
          "faulty": "throw new OutOfRangeException(y,minY,maxY);", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_337/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:10.891494467 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -255,7 +255,11 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            if (observations == null) {\n+\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\tLocalizedFormats.INPUT_ARRAY);\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             for (int i = startIdx;\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_337/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:05:10.891494467 -0500\n@@ -180,7 +180,10 @@\n                 throw new DimensionMismatchException(param.length, 3);\n             }\n             if (param[2] <= 0) {\n-                throw new NotStrictlyPositiveException(param[2]);\n+                if (param == null) {\n+\t\t\t\t\tthrow new NullArgumentException();\n+\t\t\t\t}\n+\t\t\t\tthrow new NotStrictlyPositiveException(param[2]);\n             }\n         }\n     }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 183, 
          "faulty": "throw new NotStrictlyPositiveException(param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param == null) {\n  throw new NullArgumentException();\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 258, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1297/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:12:58.056741865 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -269,7 +269,10 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            if (idxStep == 0) {\n+\t\t\t\tthrow new ZeroException();\n+\t\t\t}\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_328/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:05:07.443512503 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -270,10 +270,9 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n-            }\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1315/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:13:11.180663855 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -154,7 +154,10 @@\n          */\n         public double[] guess() {\n             if (parameters == null) {\n-                parameters = basicGuess(observations);\n+                if (parameters == null) {\n+\t\t\t\t\tparameters = basicGuess(observations);\n+\t\t\t\t}\n+\t\t\t\tparameters = basicGuess(observations);\n             }\n             return parameters.clone();\n         }\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 157, 
          "faulty": "parameters=basicGuess(observations);", 
          "type": "InsertBefore", 
          "seed": "if (parameters == null) {\n  parameters=basicGuess(observations);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_567/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:06:52.514963013 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -166,7 +166,9 @@\n          * @return the guessed parameters: norm, mean and sigma.\n          */\n         private double[] basicGuess(WeightedObservedPoint[] points) {\n-            Arrays.sort(points, createWeightedObservedPointComparator());\n+            if (observations == null) {\n+\t\t\t\tthrow new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n+\t\t\t}\n             double[] params = new double[3];\n \n             int maxYIdx = findMaxY(points);\n@@ -184,7 +186,8 @@\n             }\n             params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));\n \n-            return params;\n+            params[1] = points[maxYIdx].getX();\n+\t\t\treturn params;\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 169, 
          "faulty": "Arrays.sort(points,createWeightedObservedPointComparator());", 
          "type": "Replace", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 187, 
          "faulty": "return params;", 
          "type": "InsertBefore", 
          "seed": "params[1]=points[maxYIdx].getX();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1156/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:11:51.657143225 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -255,7 +255,11 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            if (observations == null) {\n+\t\t\t\t\tthrow new NullArgumentException(\n+\t\t\t\t\t\t\tLocalizedFormats.INPUT_ARRAY);\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             for (int i = startIdx;\n@@ -271,7 +275,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tminY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 258, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "if (observations == null) {\n  throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1285/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:12:52.492775060 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -255,7 +255,17 @@\n         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                    int startIdx, int idxStep, double y)\n             throws OutOfRangeException {\n-            if (idxStep == 0) {\n+            for (int i = startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i\n+\t\t\t\t\t\t+ idxStep < points.length); i += idxStep) {\n+\t\t\t\t\tif (isBetween(y, points[i].getY(),\n+\t\t\t\t\t\t\tpoints[i + idxStep].getY())) {\n+\t\t\t\t\t\treturn (idxStep < 0) ? new WeightedObservedPoint[] {\n+\t\t\t\t\t\t\t\tpoints[i + idxStep], points[i] }\n+\t\t\t\t\t\t\t\t: new WeightedObservedPoint[] { points[i],\n+\t\t\t\t\t\t\t\t\t\tpoints[i + idxStep] };\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\tif (idxStep == 0) {\n                 throw new ZeroException();\n             }\n             for (int i = startIdx;\n@@ -274,7 +284,8 @@\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n-            throw new OutOfRangeException(y, minY, maxY);\n+            Arrays.sort(points, createWeightedObservedPointComparator());\n+\t\t\tthrow new OutOfRangeException(y, minY, maxY);\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 277, 
          "faulty": "throw new OutOfRangeException(y,minY,maxY);", 
          "type": "InsertBefore", 
          "seed": "Arrays.sort(points,createWeightedObservedPointComparator());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 258, 
          "faulty": "if (idxStep == 0) {\n  throw new ZeroException();\n}", 
          "type": "InsertBefore", 
          "seed": "for (int i=startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length); i+=idxStep) {\n  if (isBetween(y,points[i].getY(),points[i + idxStep].getY())) {\n    return (idxStep < 0) ? new WeightedObservedPoint[]{points[i + idxStep],points[i]} : new WeightedObservedPoint[]{points[i],points[i + idxStep]};\n  }\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_632/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:07:19.694814820 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -270,10 +270,9 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n-            }\n+            if (idxStep == 0) {\n+\t\t\t\tthrow new ZeroException();\n+\t\t\t}\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "Replace", 
          "seed": "if (idxStep == 0) {\n  throw new ZeroException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1529/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:14:57.072046951 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -274,7 +274,11 @@\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n-            throw new OutOfRangeException(y, minY, maxY);\n+            if (observations.length < 3) {\n+\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\ttrue);\n+\t\t\t}\n+\t\t\tthrow new OutOfRangeException(y, minY, maxY);\n         }\n \n         /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 277, 
          "faulty": "throw new OutOfRangeException(y,minY,maxY);", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_218/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:04:14.943787157 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -271,7 +271,11 @@\n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n+                if (observations.length < 3) {\n+\t\t\t\t\tthrow new NumberIsTooSmallException(observations.length, 3,\n+\t\t\t\t\t\t\ttrue);\n+\t\t\t\t}\n+\t\t\t\tminY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n             }\n             throw new OutOfRangeException(y, minY, maxY);\n\n\n--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 02:51:54.101461606 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_218/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/analysis/function/Gaussian.java\t2018-12-02 03:04:14.943787157 -0500\n@@ -128,7 +128,10 @@\n             validateParameters(param);\n \n             final double diff = x - param[1];\n-            final double i2s2 = 1 / (2 * param[2] * param[2]);\n+            if (param == null) {\n+\t\t\t\tthrow new NullArgumentException();\n+\t\t\t}\n+\t\t\tfinal double i2s2 = 1 / (2 * param[2] * param[2]);\n             return Gaussian.value(diff, param[0], i2s2);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 274, 
          "faulty": "minY=Math.min(minY,point.getY());", 
          "type": "InsertBefore", 
          "seed": "if (observations.length < 3) {\n  throw new NumberIsTooSmallException(observations.length,3,true);\n}"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java", 
          "line": 131, 
          "faulty": "final double i2s2=1 / (2 * param[2] * param[2]);", 
          "type": "InsertBefore", 
          "seed": "if (param == null) {\n  throw new NullArgumentException();\n}"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1748/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:16:55.299284380 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -270,10 +270,6 @@\n \n             double minY = Double.POSITIVE_INFINITY;\n             double maxY = Double.NEGATIVE_INFINITY;\n-            for (final WeightedObservedPoint point : points) {\n-                minY = Math.min(minY, point.getY());\n-                maxY = Math.max(maxY, point.getY());\n-            }\n             throw new OutOfRangeException(y, minY, maxY);\n         }\n \n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 273, 
          "faulty": "for (final WeightedObservedPoint point : points) {\n  minY=Math.min(minY,point.getY());\n  maxY=Math.max(maxY,point.getY());\n}", 
          "type": "Delete", 
          "seed": "parameters=basicGuess(observations);"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_924/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:48.377927246 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 159, 
          "faulty": "return parameters.clone();", 
          "type": "Replace", 
          "seed": "return parameters.clone();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_1233/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:12:28.476919211 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -175,7 +175,8 @@\n \n             double fwhmApprox;\n             try {\n-                double halfY = params[0] + ((params[1] - params[0]) / 2.0);\n+                params[1] = points[maxYIdx].getX();\n+\t\t\t\tdouble halfY = params[0] + ((params[1] - params[0]) / 2.0);\n                 double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);\n                 double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);\n                 fwhmApprox = fwhmX2 - fwhmX1;\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 178, 
          "faulty": "double halfY=params[0] + ((params[1] - params[0]) / 2.0);", 
          "type": "InsertBefore", 
          "seed": "params[1]=points[maxYIdx].getX();"
        }
      ]
    }, 
    {
      "diff": "--- /tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 02:51:56.625461664 -0500\n+++ /tmp/Arja_Defects4J_Math_58/patches_hsi6/Patch_876/patched/tmp/Arja_Defects4J_Math_58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\t2018-12-02 03:09:21.214102157 -0500\n@@ -118,7 +118,7 @@\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        return fit((new ParameterGuesser(getObservations())).guess());\n     }\n \n     /**\n@@ -269,7 +269,16 @@\n             }\n \n             double minY = Double.POSITIVE_INFINITY;\n-            double maxY = Double.NEGATIVE_INFINITY;\n+            for (int i = startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i\n+\t\t\t\t\t+ idxStep < points.length); i += idxStep) {\n+\t\t\t\tif (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {\n+\t\t\t\t\treturn (idxStep < 0) ? new WeightedObservedPoint[] {\n+\t\t\t\t\t\t\tpoints[i + idxStep], points[i] }\n+\t\t\t\t\t\t\t: new WeightedObservedPoint[] { points[i],\n+\t\t\t\t\t\t\t\t\tpoints[i + idxStep] };\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tdouble maxY = Double.NEGATIVE_INFINITY;\n             for (final WeightedObservedPoint point : points) {\n                 minY = Math.min(minY, point.getY());\n                 maxY = Math.max(maxY, point.getY());\n\n\n", 
      "edits": [
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 121, 
          "faulty": "return fit(new Gaussian.Parametric(),guess);", 
          "type": "Replace", 
          "seed": "return fit((new ParameterGuesser(getObservations())).guess());"
        }, 
        {
          "path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java", 
          "line": 272, 
          "faulty": "double maxY=Double.NEGATIVE_INFINITY;", 
          "type": "InsertBefore", 
          "seed": "for (int i=startIdx; (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length); i+=idxStep) {\n  if (isBetween(y,points[i].getY(),points[i + idxStep].getY())) {\n    return (idxStep < 0) ? new WeightedObservedPoint[]{points[i + idxStep],points[i]} : new WeightedObservedPoint[]{points[i],points[i + idxStep]};\n  }\n}"
        }
      ]
    }
  ]
}